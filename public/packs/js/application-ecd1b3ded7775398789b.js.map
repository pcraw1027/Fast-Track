{"version":3,"file":"js/application-ecd1b3ded7775398789b.js","sources":["webpack:///webpack/bootstrap","webpack:///./app/javascript/channels sync _channel\\.js$","webpack:///./app/javascript/channels/index.js","webpack:///./app/javascript/controllers sync \\.js$","webpack:///./app/javascript/controllers/barcode_controller.js","webpack:///./app/javascript/controllers/company_select_controller.js","webpack:///./app/javascript/controllers/ind_cat_select_controller.js","webpack:///./app/javascript/controllers/index.js","webpack:///./app/javascript/controllers/product_classification_controller.js","webpack:///./app/javascript/packs/application.js","webpack:///./node_modules/@hotwired/stimulus-webpack-helpers/dist/stimulus-webpack-helpers.js","webpack:///./node_modules/@hotwired/stimulus/dist/stimulus.js","webpack:///./node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js","webpack:///./node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js","webpack:///./node_modules/stimulus/dist/stimulus.js","webpack:///./node_modules/stimulus/webpack-helpers.js","webpack:///./node_modules/tom-select/dist/js/tom-select.complete.js","webpack:///./node_modules/turbolinks/dist/turbolinks.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/javascript/packs/application.js\");\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./app/javascript/channels sync recursive _channel\\\\.js$\";","// Load all the channels within this directory and all subdirectories.\n// Channel files must be named *_channel.js.\n\nconst channels = require.context('.', true, /_channel\\.js$/)\nchannels.keys().forEach(channels)\n","var map = {\n\t\"./barcode_controller.js\": \"./app/javascript/controllers/barcode_controller.js\",\n\t\"./company_select_controller.js\": \"./app/javascript/controllers/company_select_controller.js\",\n\t\"./ind_cat_select_controller.js\": \"./app/javascript/controllers/ind_cat_select_controller.js\",\n\t\"./index.js\": \"./app/javascript/controllers/index.js\",\n\t\"./product_classification_controller.js\": \"./app/javascript/controllers/product_classification_controller.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./app/javascript/controllers sync recursive \\\\.js$\";","import { Controller } from \"@hotwired/stimulus\"\r\n\r\nexport default class extends Controller {\r\n  static targets = [\"barcodeInput\", \"fileInput\", \"display\"]\r\n\r\n  async submitAdd(event) {\r\n    event.preventDefault();\r\n    const inp = document.getElementById(\"barcode\")\r\n    const barcode = inp.value;\r\n   \r\n    if (!barcode) return this.showError(\"Please enter barcode.\");\r\n    if (barcode.length < 12 || barcode.length > 13) return this.showError(\"barcode minimum and maximum length is 12 and 13 respectively.\");\r\n    const formData = new FormData();\r\n    formData.append(\"bit_record[barcode]\", barcode)\r\n    try {\r\n        const response = await fetch(\"/insert_barcode\", {\r\n          method: \"POST\",\r\n          body: formData,\r\n          headers: {\r\n            \"Accept\": \"application/json\"\r\n          }\r\n        })\r\n  \r\n        const data = await response.json();\r\n  \r\n        if (Array.isArray(data.bit_records)) {\r\n          document.getElementById(\"barcode\").value = \"\";\r\n          data.bit_records.forEach(record => {\r\n            this.displayTarget.insertAdjacentHTML(\"afterbegin\", `\r\n               <tr>\r\n                <td>${record.bit_rec.barcode}</td>\r\n                <td>${record.bit_rec.status}</td>\r\n                <td>${record.bit_rec.source}</td>\r\n                <td>${record.bit_rec.user_id}</td>\r\n                <td>${this.formatDate(record.bit_rec.created_at)}</td>\r\n                <td>${record.message}</td>\r\n                <td><a style=\"background-color: #8cc63f;\r\n                              border: none;\r\n                              border-radius: 15px;\r\n                              padding: 5px 20px 5px 20px;\r\n                              text-decoration: none;\"\r\n                              color: #333;\r\n                              font-weight: bold;\r\n                  href=/product_capture_interface?barcode=${record.bit_rec.barcode} \r\n                  target=\"_blank\" >Add</a></td>\r\n              </tr>\r\n            `)\r\n          })\r\n        }\r\n  \r\n        if (data.error) this.showError(data.error)\r\n  \r\n      } catch (error) {\r\n        this.showError(\"An error occurred while uploading.\")\r\n        console.error(\"Upload failed\", error)\r\n      }\r\n  }\r\n\r\n  async handleLoad(event) {\r\n    event.preventDefault();\r\n\r\n    const file = document.getElementById(\"fileinput\").files[0]\r\n    if (!file) return this.showError(\"Please choose a file to load.\")\r\n\r\n    const formData = new FormData()\r\n    formData.append(\"bit_record[file]\", file)\r\n\r\n    try {\r\n      const response = await fetch(\"/insert_barcode\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n          \"Accept\": \"application/json\"\r\n        }\r\n      })\r\n\r\n      const data = await response.json();\r\n    \r\n      if (Array.isArray(data.bit_records)) {\r\n        document.getElementById(\"fileinput\").value = \"\"\r\n        data.bit_records.forEach(record => {\r\n          this.displayTarget.insertAdjacentHTML(\"afterbegin\", `\r\n             <tr>\r\n              <td>${record.bit_rec.barcode}</td>\r\n              <td>${record.bit_rec.status}</td>\r\n              <td>${record.bit_rec.source}</td>\r\n              <td>${record.bit_rec.user_id}</td>\r\n              <td>${this.formatDate(record.bit_rec.created_at)}</td>\r\n              <td>${record.message}</td>\r\n            </tr>\r\n          `)\r\n        })\r\n      }\r\n\r\n      if (data.error) this.showError(data.error)\r\n\r\n    } catch (error) {\r\n      this.showError(\"An error occurred while uploading.\")\r\n      console.error(\"Upload failed\", error)\r\n    }\r\n  }\r\n\r\n  \r\n  showError(message) {\r\n    document.getElementById(\"barcode-error\").textContent = message\r\n    document.getElementById(\"barcode-error\").classList.remove(\"d-none\")\r\n    \r\n    setTimeout(() => {\r\n      document.getElementById(\"barcode-error\").classList.add(\"d-none\")\r\n      document.getElementById(\"barcode-error\").textContent = \"\"\r\n    }, 5000)\r\n  }\r\n\r\n  formatDate(timestamp) {\r\n    const date = new Date(timestamp);\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0'); \r\n    const year = date.getFullYear();\r\n    return `${day}/${month}/${year}`;\r\n  }\r\n  \r\n}\r\n","import { Controller } from \"stimulus\"\r\nimport TomSelect from \"tom-select\";\r\n\r\nexport default class extends Controller {\r\n  connect() {\r\n    if (this.selectInstance) return\r\n\r\n    this.selectInstance = new TomSelect(this.element, {\r\n        valueField: 'id',\r\n        labelField: 'name',\r\n        searchField: 'name',\r\n        create: (input) => {\r\n          return {\r\n            id: input,\r\n            name: input\r\n          };\r\n        },\r\n        //persist: false,\r\n        hideSelected: true,\r\n        placeholder: 'Search for a company',\r\n        load: (query, callback) => {\r\n          if (!query.length) return callback()\r\n          fetch(`/companies_search?q=${encodeURIComponent(query)}`)\r\n            .then(response => response.json())\r\n            .then(json => json.map((c)=>({id: c.id, name: `${c.id} - ${c.name}`})))\r\n            .then(res => callback(res))\r\n            .catch(() => callback())\r\n        },\r\n        onOptionAdd: function(value, data) {\r\n          if(document.getElementById('new_company_name')){\r\n            document.getElementById('new_company_name').value = value;\r\n          }\r\n        },\r\n        onItemAdd: function(value, item) {\r\n          if (/^\\d+$/.test(value)) {\r\n            if(document.getElementById('new_company_name')){\r\n              document.getElementById('new_company_name').value = \"\";\r\n            }\r\n          }\r\n        }\r\n      })\r\n      \r\n  }\r\n\r\n  disconnect() {\r\n    if (this.selectInstance) {\r\n      this.selectInstance.destroy()\r\n      this.selectInstance = null\r\n    }\r\n  }\r\n}\r\n","import { Controller } from \"stimulus\"\r\nimport TomSelect from \"tom-select\";\r\n\r\nexport default class extends Controller {\r\n  connect() {\r\n    if (this.selectInstance) return\r\n\r\n    this.selectInstance = new TomSelect(this.element, {\r\n        valueField: 'id',\r\n        labelField: 'title',\r\n        searchField: 'title',\r\n        create: false,\r\n        //persist: false,\r\n        hideSelected: true,\r\n        placeholder: 'Search for an industry category',\r\n        load: (query, callback) => {\r\n          if (!query.length) return callback()\r\n          fetch(`/industry_categories_search?q=${encodeURIComponent(query)}`)\r\n            .then(response => response.json())\r\n            .then(json => json.map((c)=>({id: c.id, title: `${c.category_code} - ${c.title}`})))\r\n            .then(res => callback(res))\r\n            .catch(() => callback())\r\n        },\r\n      })\r\n      \r\n  }\r\n\r\n  disconnect() {\r\n    if (this.selectInstance) {\r\n      this.selectInstance.destroy()\r\n      this.selectInstance = null\r\n    }\r\n  }\r\n}\r\n","// Load all Stimulus controllers\r\nimport { Application } from \"stimulus\"\r\nimport { definitionsFromContext } from \"stimulus/webpack-helpers\"\r\n\r\nconst application = Application.start()\r\nconst context = require.context(\".\", true, /\\.js$/)\r\napplication.load(definitionsFromContext(context))\r\n","import { Controller } from \"stimulus\"\r\nimport TomSelect from \"tom-select\"\r\n\r\nexport default class extends Controller {\r\n  static targets = [\"segment\", \"family\", \"klass\", \"brick\"]\r\n\r\n  connect() {\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", () => this.initialize())\r\n    } else {\r\n      this.initialize()\r\n    }\r\n  }\r\n  \r\n  initialize() {\r\n    console.log(\"Initializing...\")\r\n  \r\n    if (!this.segmentSelect && this.hasSegmentTarget) {\r\n      this.segmentSelect = new TomSelect(this.segmentTarget, {\r\n        placeholder: \"Select a segment\",\r\n        onChange: () => this.updateFamilies()\r\n      })\r\n    }\r\n  \r\n    if (!this.familySelect && this.hasFamilyTarget) {\r\n      this.familySelect = new TomSelect(this.familyTarget, {\r\n        placeholder: \"Select a family\",\r\n        onChange: () => this.updateKlasses()\r\n      })\r\n    }\r\n  \r\n    if (!this.klassSelect && this.hasKlassTarget) {\r\n      this.klassSelect = new TomSelect(this.klassTarget, {\r\n        placeholder: \"Select a klass\",\r\n        onChange: () => this.updateBricks()\r\n      })\r\n    }\r\n  \r\n    if (!this.brickSelect && this.hasBrickTarget) {\r\n      this.brickSelect = new TomSelect(this.brickTarget, {\r\n        placeholder: \"Select a brick\"\r\n      })\r\n    }\r\n  }\r\n  \r\n\r\n  async updateFamilies() {\r\n    console.log(\"updating family...\");\r\n    const segmentId = this.segmentTarget.value\r\n\r\n    if (!segmentId) {\r\n      this.familySelect.clearOptions()\r\n      return\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`/families_by_segment?segment_id=${segmentId}`)\r\n      const families = await response.json();\r\n      console.log(\"families\", families);\r\n      this.familySelect.clearOptions();\r\n     \r\n      families.forEach((family) => {\r\n        this.familySelect.addOption({\r\n          value: family.id,\r\n          text: `${family.code} ${family.title}`,\r\n        })\r\n      })\r\n\r\n      this.familySelect.refreshOptions(false)\r\n    } catch (err) {\r\n      console.error(\"Error loading families:\", err)\r\n    }\r\n  }\r\n\r\n  async updateKlasses() {\r\n    const familyId = this.familyTarget.value\r\n\r\n    if (!familyId) {\r\n      this.klassSelect.clearOptions()\r\n      return\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`/klasses_by_family?family_id=${familyId}`)\r\n      const klasses = await response.json()\r\n\r\n      this.klassSelect.clearOptions()\r\n\r\n      klasses.forEach((klass) => {\r\n        this.klassSelect.addOption({\r\n          value: klass.id,\r\n          text: `${klass.code} ${klass.title}`,\r\n        })\r\n      })\r\n\r\n      this.klassSelect.refreshOptions(false)\r\n    } catch (err) {\r\n      console.error(\"Error loading klasses:\", err)\r\n    }\r\n  }\r\n\r\n  async updateBricks() {\r\n    const klassId = this.klassTarget.value\r\n\r\n    if (!klassId) {\r\n      this.brickSelect.clearOptions()\r\n      return\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`/bricks_by_klass?klass_id=${klassId}`)\r\n      const bricks = await response.json()\r\n\r\n      this.brickSelect.clearOptions()\r\n\r\n      bricks.forEach((brick) => {\r\n        this.brickSelect.addOption({\r\n          value: brick.id,\r\n          text: `${brick.code} ${brick.title}`,\r\n        })\r\n      })\r\n\r\n      this.brickSelect.refreshOptions(false)\r\n    } catch (err) {\r\n      console.error(\"Error loading bricks:\", err)\r\n    }\r\n  }\r\n\r\n\r\n  disconnect() {\r\n    this.segmentSelect?.destroy()\r\n    this.familySelect?.destroy()\r\n    this.klassSelect?.destroy()\r\n    this.brickSelect?.destroy()\r\n  \r\n    this.segmentSelect = null\r\n    this.familySelect = null\r\n    this.klassSelect = null\r\n    this.brickSelect = null\r\n  }\r\n  \r\n}","// This file is automatically compiled by Webpack, along with any other files\n// present in this directory. You're encouraged to place your actual application logic in\n// a relevant structure within app/javascript and only use these pack files to reference\n// that code so it'll be compiled.\n\nimport Rails from \"@rails/ujs\"\nimport Turbolinks from \"turbolinks\"\nimport * as ActiveStorage from \"@rails/activestorage\"\nimport \"channels\"\nimport \"../controllers\"\n\n\nRails.start()\nTurbolinks.start()\nActiveStorage.start()\n","/*\nStimulus Webpack Helpers 1.0.0\nCopyright © 2021 Basecamp, LLC\n */\nfunction definitionsFromContext(context) {\n  return context.keys().map(key => definitionForModuleWithContextAndKey(context, key)).filter(value => value);\n}\nfunction definitionForModuleWithContextAndKey(context, key) {\n  const identifier = identifierForContextKey(key);\n  if (identifier) {\n    return definitionForModuleAndIdentifier(context(key), identifier);\n  }\n}\nfunction definitionForModuleAndIdentifier(module, identifier) {\n  const controllerConstructor = module.default;\n  if (typeof controllerConstructor == \"function\") {\n    return {\n      identifier,\n      controllerConstructor\n    };\n  }\n}\nfunction identifierForContextKey(key) {\n  const logicalName = (key.match(/^(?:\\.\\/)?(.+)(?:[_-]controller\\..+?)$/) || [])[1];\n  if (logicalName) {\n    return logicalName.replace(/_/g, \"-\").replace(/\\//g, \"--\");\n  }\n}\nexport { definitionForModuleAndIdentifier, definitionForModuleWithContextAndKey, definitionsFromContext, identifierForContextKey };","function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var n = 0, F = function () {}; return { s: F, n: function () { return n >= r.length ? { done: !0 } : { done: !1, value: r[n++] }; }, e: function (r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function () { t = t.call(r); }, n: function () { var r = t.next(); return a = r.done, r; }, e: function (r) { u = !0, o = r; }, f: function () { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/*\nStimulus 3.2.1\nCopyright © 2023 Basecamp, LLC\n */\nclass EventListener {\n  constructor(eventTarget, eventName, eventOptions) {\n    this.eventTarget = eventTarget;\n    this.eventName = eventName;\n    this.eventOptions = eventOptions;\n    this.unorderedBindings = new Set();\n  }\n  connect() {\n    this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);\n  }\n  disconnect() {\n    this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);\n  }\n  bindingConnected(binding) {\n    this.unorderedBindings.add(binding);\n  }\n  bindingDisconnected(binding) {\n    this.unorderedBindings.delete(binding);\n  }\n  handleEvent(event) {\n    const extendedEvent = extendEvent(event);\n    var _iterator = _createForOfIteratorHelper(this.bindings),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        const binding = _step.value;\n        if (extendedEvent.immediatePropagationStopped) {\n          break;\n        } else {\n          binding.handleEvent(extendedEvent);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  hasBindings() {\n    return this.unorderedBindings.size > 0;\n  }\n  get bindings() {\n    return Array.from(this.unorderedBindings).sort((left, right) => {\n      const leftIndex = left.index,\n        rightIndex = right.index;\n      return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;\n    });\n  }\n}\nfunction extendEvent(event) {\n  if (\"immediatePropagationStopped\" in event) {\n    return event;\n  } else {\n    const stopImmediatePropagation = event.stopImmediatePropagation;\n    return Object.assign(event, {\n      immediatePropagationStopped: false,\n      stopImmediatePropagation() {\n        this.immediatePropagationStopped = true;\n        stopImmediatePropagation.call(this);\n      }\n    });\n  }\n}\nclass Dispatcher {\n  constructor(application) {\n    this.application = application;\n    this.eventListenerMaps = new Map();\n    this.started = false;\n  }\n  start() {\n    if (!this.started) {\n      this.started = true;\n      this.eventListeners.forEach(eventListener => eventListener.connect());\n    }\n  }\n  stop() {\n    if (this.started) {\n      this.started = false;\n      this.eventListeners.forEach(eventListener => eventListener.disconnect());\n    }\n  }\n  get eventListeners() {\n    return Array.from(this.eventListenerMaps.values()).reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);\n  }\n  bindingConnected(binding) {\n    this.fetchEventListenerForBinding(binding).bindingConnected(binding);\n  }\n  bindingDisconnected(binding) {\n    let clearEventListeners = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);\n    if (clearEventListeners) this.clearEventListenersForBinding(binding);\n  }\n  handleError(error, message) {\n    let detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.application.handleError(error, `Error ${message}`, detail);\n  }\n  clearEventListenersForBinding(binding) {\n    const eventListener = this.fetchEventListenerForBinding(binding);\n    if (!eventListener.hasBindings()) {\n      eventListener.disconnect();\n      this.removeMappedEventListenerFor(binding);\n    }\n  }\n  removeMappedEventListenerFor(binding) {\n    const eventTarget = binding.eventTarget,\n      eventName = binding.eventName,\n      eventOptions = binding.eventOptions;\n    const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n    const cacheKey = this.cacheKey(eventName, eventOptions);\n    eventListenerMap.delete(cacheKey);\n    if (eventListenerMap.size == 0) this.eventListenerMaps.delete(eventTarget);\n  }\n  fetchEventListenerForBinding(binding) {\n    const eventTarget = binding.eventTarget,\n      eventName = binding.eventName,\n      eventOptions = binding.eventOptions;\n    return this.fetchEventListener(eventTarget, eventName, eventOptions);\n  }\n  fetchEventListener(eventTarget, eventName, eventOptions) {\n    const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n    const cacheKey = this.cacheKey(eventName, eventOptions);\n    let eventListener = eventListenerMap.get(cacheKey);\n    if (!eventListener) {\n      eventListener = this.createEventListener(eventTarget, eventName, eventOptions);\n      eventListenerMap.set(cacheKey, eventListener);\n    }\n    return eventListener;\n  }\n  createEventListener(eventTarget, eventName, eventOptions) {\n    const eventListener = new EventListener(eventTarget, eventName, eventOptions);\n    if (this.started) {\n      eventListener.connect();\n    }\n    return eventListener;\n  }\n  fetchEventListenerMapForEventTarget(eventTarget) {\n    let eventListenerMap = this.eventListenerMaps.get(eventTarget);\n    if (!eventListenerMap) {\n      eventListenerMap = new Map();\n      this.eventListenerMaps.set(eventTarget, eventListenerMap);\n    }\n    return eventListenerMap;\n  }\n  cacheKey(eventName, eventOptions) {\n    const parts = [eventName];\n    Object.keys(eventOptions).sort().forEach(key => {\n      parts.push(`${eventOptions[key] ? \"\" : \"!\"}${key}`);\n    });\n    return parts.join(\":\");\n  }\n}\nconst defaultActionDescriptorFilters = {\n  stop(_ref) {\n    let event = _ref.event,\n      value = _ref.value;\n    if (value) event.stopPropagation();\n    return true;\n  },\n  prevent(_ref2) {\n    let event = _ref2.event,\n      value = _ref2.value;\n    if (value) event.preventDefault();\n    return true;\n  },\n  self(_ref3) {\n    let event = _ref3.event,\n      value = _ref3.value,\n      element = _ref3.element;\n    if (value) {\n      return element === event.target;\n    } else {\n      return true;\n    }\n  }\n};\nconst descriptorPattern = /^(?:(?:([^.]+?)\\+)?(.+?)(?:\\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;\nfunction parseActionDescriptorString(descriptorString) {\n  const source = descriptorString.trim();\n  const matches = source.match(descriptorPattern) || [];\n  let eventName = matches[2];\n  let keyFilter = matches[3];\n  if (keyFilter && ![\"keydown\", \"keyup\", \"keypress\"].includes(eventName)) {\n    eventName += `.${keyFilter}`;\n    keyFilter = \"\";\n  }\n  return {\n    eventTarget: parseEventTarget(matches[4]),\n    eventName,\n    eventOptions: matches[7] ? parseEventOptions(matches[7]) : {},\n    identifier: matches[5],\n    methodName: matches[6],\n    keyFilter: matches[1] || keyFilter\n  };\n}\nfunction parseEventTarget(eventTargetName) {\n  if (eventTargetName == \"window\") {\n    return window;\n  } else if (eventTargetName == \"document\") {\n    return document;\n  }\n}\nfunction parseEventOptions(eventOptions) {\n  return eventOptions.split(\":\").reduce((options, token) => Object.assign(options, {\n    [token.replace(/^!/, \"\")]: !/^!/.test(token)\n  }), {});\n}\nfunction stringifyEventTarget(eventTarget) {\n  if (eventTarget == window) {\n    return \"window\";\n  } else if (eventTarget == document) {\n    return \"document\";\n  }\n}\nfunction camelize(value) {\n  return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase());\n}\nfunction namespaceCamelize(value) {\n  return camelize(value.replace(/--/g, \"-\").replace(/__/g, \"_\"));\n}\nfunction capitalize(value) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\nfunction dasherize(value) {\n  return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`);\n}\nfunction tokenize(value) {\n  return value.match(/[^\\s]+/g) || [];\n}\nfunction isSomething(object) {\n  return object !== null && object !== undefined;\n}\nfunction hasProperty(object, property) {\n  return Object.prototype.hasOwnProperty.call(object, property);\n}\nconst allModifiers = [\"meta\", \"ctrl\", \"alt\", \"shift\"];\nclass Action {\n  constructor(element, index, descriptor, schema) {\n    this.element = element;\n    this.index = index;\n    this.eventTarget = descriptor.eventTarget || element;\n    this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error(\"missing event name\");\n    this.eventOptions = descriptor.eventOptions || {};\n    this.identifier = descriptor.identifier || error(\"missing identifier\");\n    this.methodName = descriptor.methodName || error(\"missing method name\");\n    this.keyFilter = descriptor.keyFilter || \"\";\n    this.schema = schema;\n  }\n  static forToken(token, schema) {\n    return new this(token.element, token.index, parseActionDescriptorString(token.content), schema);\n  }\n  toString() {\n    const eventFilter = this.keyFilter ? `.${this.keyFilter}` : \"\";\n    const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : \"\";\n    return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`;\n  }\n  shouldIgnoreKeyboardEvent(event) {\n    if (!this.keyFilter) {\n      return false;\n    }\n    const filters = this.keyFilter.split(\"+\");\n    if (this.keyFilterDissatisfied(event, filters)) {\n      return true;\n    }\n    const standardFilter = filters.filter(key => !allModifiers.includes(key))[0];\n    if (!standardFilter) {\n      return false;\n    }\n    if (!hasProperty(this.keyMappings, standardFilter)) {\n      error(`contains unknown key filter: ${this.keyFilter}`);\n    }\n    return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase();\n  }\n  shouldIgnoreMouseEvent(event) {\n    if (!this.keyFilter) {\n      return false;\n    }\n    const filters = [this.keyFilter];\n    if (this.keyFilterDissatisfied(event, filters)) {\n      return true;\n    }\n    return false;\n  }\n  get params() {\n    const params = {};\n    const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, \"i\");\n    for (var _i = 0, _Array$from = Array.from(this.element.attributes); _i < _Array$from.length; _i++) {\n      const _Array$from$_i = _Array$from[_i],\n        name = _Array$from$_i.name,\n        value = _Array$from$_i.value;\n      const match = name.match(pattern);\n      const key = match && match[1];\n      if (key) {\n        params[camelize(key)] = typecast(value);\n      }\n    }\n    return params;\n  }\n  get eventTargetName() {\n    return stringifyEventTarget(this.eventTarget);\n  }\n  get keyMappings() {\n    return this.schema.keyMappings;\n  }\n  keyFilterDissatisfied(event, filters) {\n    const _allModifiers$map = allModifiers.map(modifier => filters.includes(modifier)),\n      _allModifiers$map2 = _slicedToArray(_allModifiers$map, 4),\n      meta = _allModifiers$map2[0],\n      ctrl = _allModifiers$map2[1],\n      alt = _allModifiers$map2[2],\n      shift = _allModifiers$map2[3];\n    return event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift;\n  }\n}\nconst defaultEventNames = {\n  a: () => \"click\",\n  button: () => \"click\",\n  form: () => \"submit\",\n  details: () => \"toggle\",\n  input: e => e.getAttribute(\"type\") == \"submit\" ? \"click\" : \"input\",\n  select: () => \"change\",\n  textarea: () => \"input\"\n};\nfunction getDefaultEventNameForElement(element) {\n  const tagName = element.tagName.toLowerCase();\n  if (tagName in defaultEventNames) {\n    return defaultEventNames[tagName](element);\n  }\n}\nfunction error(message) {\n  throw new Error(message);\n}\nfunction typecast(value) {\n  try {\n    return JSON.parse(value);\n  } catch (o_O) {\n    return value;\n  }\n}\nclass Binding {\n  constructor(context, action) {\n    this.context = context;\n    this.action = action;\n  }\n  get index() {\n    return this.action.index;\n  }\n  get eventTarget() {\n    return this.action.eventTarget;\n  }\n  get eventOptions() {\n    return this.action.eventOptions;\n  }\n  get identifier() {\n    return this.context.identifier;\n  }\n  handleEvent(event) {\n    const actionEvent = this.prepareActionEvent(event);\n    if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(actionEvent)) {\n      this.invokeWithEvent(actionEvent);\n    }\n  }\n  get eventName() {\n    return this.action.eventName;\n  }\n  get method() {\n    const method = this.controller[this.methodName];\n    if (typeof method == \"function\") {\n      return method;\n    }\n    throw new Error(`Action \"${this.action}\" references undefined method \"${this.methodName}\"`);\n  }\n  applyEventModifiers(event) {\n    const element = this.action.element;\n    const actionDescriptorFilters = this.context.application.actionDescriptorFilters;\n    const controller = this.context.controller;\n    let passes = true;\n    for (var _i2 = 0, _Object$entries = Object.entries(this.eventOptions); _i2 < _Object$entries.length; _i2++) {\n      const _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n        name = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n      if (name in actionDescriptorFilters) {\n        const filter = actionDescriptorFilters[name];\n        passes = passes && filter({\n          name,\n          value,\n          event,\n          element,\n          controller\n        });\n      } else {\n        continue;\n      }\n    }\n    return passes;\n  }\n  prepareActionEvent(event) {\n    return Object.assign(event, {\n      params: this.action.params\n    });\n  }\n  invokeWithEvent(event) {\n    const target = event.target,\n      currentTarget = event.currentTarget;\n    try {\n      this.method.call(this.controller, event);\n      this.context.logDebugActivity(this.methodName, {\n        event,\n        target,\n        currentTarget,\n        action: this.methodName\n      });\n    } catch (error) {\n      const identifier = this.identifier,\n        controller = this.controller,\n        element = this.element,\n        index = this.index;\n      const detail = {\n        identifier,\n        controller,\n        element,\n        index,\n        event\n      };\n      this.context.handleError(error, `invoking action \"${this.action}\"`, detail);\n    }\n  }\n  willBeInvokedByEvent(event) {\n    const eventTarget = event.target;\n    if (event instanceof KeyboardEvent && this.action.shouldIgnoreKeyboardEvent(event)) {\n      return false;\n    }\n    if (event instanceof MouseEvent && this.action.shouldIgnoreMouseEvent(event)) {\n      return false;\n    }\n    if (this.element === eventTarget) {\n      return true;\n    } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {\n      return this.scope.containsElement(eventTarget);\n    } else {\n      return this.scope.containsElement(this.action.element);\n    }\n  }\n  get controller() {\n    return this.context.controller;\n  }\n  get methodName() {\n    return this.action.methodName;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get scope() {\n    return this.context.scope;\n  }\n}\nclass ElementObserver {\n  constructor(element, delegate) {\n    this.mutationObserverInit = {\n      attributes: true,\n      childList: true,\n      subtree: true\n    };\n    this.element = element;\n    this.started = false;\n    this.delegate = delegate;\n    this.elements = new Set();\n    this.mutationObserver = new MutationObserver(mutations => this.processMutations(mutations));\n  }\n  start() {\n    if (!this.started) {\n      this.started = true;\n      this.mutationObserver.observe(this.element, this.mutationObserverInit);\n      this.refresh();\n    }\n  }\n  pause(callback) {\n    if (this.started) {\n      this.mutationObserver.disconnect();\n      this.started = false;\n    }\n    callback();\n    if (!this.started) {\n      this.mutationObserver.observe(this.element, this.mutationObserverInit);\n      this.started = true;\n    }\n  }\n  stop() {\n    if (this.started) {\n      this.mutationObserver.takeRecords();\n      this.mutationObserver.disconnect();\n      this.started = false;\n    }\n  }\n  refresh() {\n    if (this.started) {\n      const matches = new Set(this.matchElementsInTree());\n      for (var _i3 = 0, _Array$from2 = Array.from(this.elements); _i3 < _Array$from2.length; _i3++) {\n        const element = _Array$from2[_i3];\n        if (!matches.has(element)) {\n          this.removeElement(element);\n        }\n      }\n      for (var _i4 = 0, _Array$from3 = Array.from(matches); _i4 < _Array$from3.length; _i4++) {\n        const element = _Array$from3[_i4];\n        this.addElement(element);\n      }\n    }\n  }\n  processMutations(mutations) {\n    if (this.started) {\n      var _iterator2 = _createForOfIteratorHelper(mutations),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          const mutation = _step2.value;\n          this.processMutation(mutation);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }\n  processMutation(mutation) {\n    if (mutation.type == \"attributes\") {\n      this.processAttributeChange(mutation.target, mutation.attributeName);\n    } else if (mutation.type == \"childList\") {\n      this.processRemovedNodes(mutation.removedNodes);\n      this.processAddedNodes(mutation.addedNodes);\n    }\n  }\n  processAttributeChange(element, attributeName) {\n    if (this.elements.has(element)) {\n      if (this.delegate.elementAttributeChanged && this.matchElement(element)) {\n        this.delegate.elementAttributeChanged(element, attributeName);\n      } else {\n        this.removeElement(element);\n      }\n    } else if (this.matchElement(element)) {\n      this.addElement(element);\n    }\n  }\n  processRemovedNodes(nodes) {\n    for (var _i5 = 0, _Array$from4 = Array.from(nodes); _i5 < _Array$from4.length; _i5++) {\n      const node = _Array$from4[_i5];\n      const element = this.elementFromNode(node);\n      if (element) {\n        this.processTree(element, this.removeElement);\n      }\n    }\n  }\n  processAddedNodes(nodes) {\n    for (var _i6 = 0, _Array$from5 = Array.from(nodes); _i6 < _Array$from5.length; _i6++) {\n      const node = _Array$from5[_i6];\n      const element = this.elementFromNode(node);\n      if (element && this.elementIsActive(element)) {\n        this.processTree(element, this.addElement);\n      }\n    }\n  }\n  matchElement(element) {\n    return this.delegate.matchElement(element);\n  }\n  matchElementsInTree() {\n    let tree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.element;\n    return this.delegate.matchElementsInTree(tree);\n  }\n  processTree(tree, processor) {\n    var _iterator3 = _createForOfIteratorHelper(this.matchElementsInTree(tree)),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        const element = _step3.value;\n        processor.call(this, element);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  elementFromNode(node) {\n    if (node.nodeType == Node.ELEMENT_NODE) {\n      return node;\n    }\n  }\n  elementIsActive(element) {\n    if (element.isConnected != this.element.isConnected) {\n      return false;\n    } else {\n      return this.element.contains(element);\n    }\n  }\n  addElement(element) {\n    if (!this.elements.has(element)) {\n      if (this.elementIsActive(element)) {\n        this.elements.add(element);\n        if (this.delegate.elementMatched) {\n          this.delegate.elementMatched(element);\n        }\n      }\n    }\n  }\n  removeElement(element) {\n    if (this.elements.has(element)) {\n      this.elements.delete(element);\n      if (this.delegate.elementUnmatched) {\n        this.delegate.elementUnmatched(element);\n      }\n    }\n  }\n}\nclass AttributeObserver {\n  constructor(element, attributeName, delegate) {\n    this.attributeName = attributeName;\n    this.delegate = delegate;\n    this.elementObserver = new ElementObserver(element, this);\n  }\n  get element() {\n    return this.elementObserver.element;\n  }\n  get selector() {\n    return `[${this.attributeName}]`;\n  }\n  start() {\n    this.elementObserver.start();\n  }\n  pause(callback) {\n    this.elementObserver.pause(callback);\n  }\n  stop() {\n    this.elementObserver.stop();\n  }\n  refresh() {\n    this.elementObserver.refresh();\n  }\n  get started() {\n    return this.elementObserver.started;\n  }\n  matchElement(element) {\n    return element.hasAttribute(this.attributeName);\n  }\n  matchElementsInTree(tree) {\n    const match = this.matchElement(tree) ? [tree] : [];\n    const matches = Array.from(tree.querySelectorAll(this.selector));\n    return match.concat(matches);\n  }\n  elementMatched(element) {\n    if (this.delegate.elementMatchedAttribute) {\n      this.delegate.elementMatchedAttribute(element, this.attributeName);\n    }\n  }\n  elementUnmatched(element) {\n    if (this.delegate.elementUnmatchedAttribute) {\n      this.delegate.elementUnmatchedAttribute(element, this.attributeName);\n    }\n  }\n  elementAttributeChanged(element, attributeName) {\n    if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {\n      this.delegate.elementAttributeValueChanged(element, attributeName);\n    }\n  }\n}\nfunction add(map, key, value) {\n  fetch(map, key).add(value);\n}\nfunction del(map, key, value) {\n  fetch(map, key).delete(value);\n  prune(map, key);\n}\nfunction fetch(map, key) {\n  let values = map.get(key);\n  if (!values) {\n    values = new Set();\n    map.set(key, values);\n  }\n  return values;\n}\nfunction prune(map, key) {\n  const values = map.get(key);\n  if (values != null && values.size == 0) {\n    map.delete(key);\n  }\n}\nclass Multimap {\n  constructor() {\n    this.valuesByKey = new Map();\n  }\n  get keys() {\n    return Array.from(this.valuesByKey.keys());\n  }\n  get values() {\n    const sets = Array.from(this.valuesByKey.values());\n    return sets.reduce((values, set) => values.concat(Array.from(set)), []);\n  }\n  get size() {\n    const sets = Array.from(this.valuesByKey.values());\n    return sets.reduce((size, set) => size + set.size, 0);\n  }\n  add(key, value) {\n    add(this.valuesByKey, key, value);\n  }\n  delete(key, value) {\n    del(this.valuesByKey, key, value);\n  }\n  has(key, value) {\n    const values = this.valuesByKey.get(key);\n    return values != null && values.has(value);\n  }\n  hasKey(key) {\n    return this.valuesByKey.has(key);\n  }\n  hasValue(value) {\n    const sets = Array.from(this.valuesByKey.values());\n    return sets.some(set => set.has(value));\n  }\n  getValuesForKey(key) {\n    const values = this.valuesByKey.get(key);\n    return values ? Array.from(values) : [];\n  }\n  getKeysForValue(value) {\n    return Array.from(this.valuesByKey).filter(_ref4 => {\n      let _ref5 = _slicedToArray(_ref4, 2),\n        _key = _ref5[0],\n        values = _ref5[1];\n      return values.has(value);\n    }).map(_ref6 => {\n      let _ref7 = _slicedToArray(_ref6, 2),\n        key = _ref7[0],\n        _values = _ref7[1];\n      return key;\n    });\n  }\n}\nclass IndexedMultimap extends Multimap {\n  constructor() {\n    super();\n    this.keysByValue = new Map();\n  }\n  get values() {\n    return Array.from(this.keysByValue.keys());\n  }\n  add(key, value) {\n    super.add(key, value);\n    add(this.keysByValue, value, key);\n  }\n  delete(key, value) {\n    super.delete(key, value);\n    del(this.keysByValue, value, key);\n  }\n  hasValue(value) {\n    return this.keysByValue.has(value);\n  }\n  getKeysForValue(value) {\n    const set = this.keysByValue.get(value);\n    return set ? Array.from(set) : [];\n  }\n}\nclass SelectorObserver {\n  constructor(element, selector, delegate, details) {\n    this._selector = selector;\n    this.details = details;\n    this.elementObserver = new ElementObserver(element, this);\n    this.delegate = delegate;\n    this.matchesByElement = new Multimap();\n  }\n  get started() {\n    return this.elementObserver.started;\n  }\n  get selector() {\n    return this._selector;\n  }\n  set selector(selector) {\n    this._selector = selector;\n    this.refresh();\n  }\n  start() {\n    this.elementObserver.start();\n  }\n  pause(callback) {\n    this.elementObserver.pause(callback);\n  }\n  stop() {\n    this.elementObserver.stop();\n  }\n  refresh() {\n    this.elementObserver.refresh();\n  }\n  get element() {\n    return this.elementObserver.element;\n  }\n  matchElement(element) {\n    const selector = this.selector;\n    if (selector) {\n      const matches = element.matches(selector);\n      if (this.delegate.selectorMatchElement) {\n        return matches && this.delegate.selectorMatchElement(element, this.details);\n      }\n      return matches;\n    } else {\n      return false;\n    }\n  }\n  matchElementsInTree(tree) {\n    const selector = this.selector;\n    if (selector) {\n      const match = this.matchElement(tree) ? [tree] : [];\n      const matches = Array.from(tree.querySelectorAll(selector)).filter(match => this.matchElement(match));\n      return match.concat(matches);\n    } else {\n      return [];\n    }\n  }\n  elementMatched(element) {\n    const selector = this.selector;\n    if (selector) {\n      this.selectorMatched(element, selector);\n    }\n  }\n  elementUnmatched(element) {\n    const selectors = this.matchesByElement.getKeysForValue(element);\n    var _iterator4 = _createForOfIteratorHelper(selectors),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        const selector = _step4.value;\n        this.selectorUnmatched(element, selector);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n  elementAttributeChanged(element, _attributeName) {\n    const selector = this.selector;\n    if (selector) {\n      const matches = this.matchElement(element);\n      const matchedBefore = this.matchesByElement.has(selector, element);\n      if (matches && !matchedBefore) {\n        this.selectorMatched(element, selector);\n      } else if (!matches && matchedBefore) {\n        this.selectorUnmatched(element, selector);\n      }\n    }\n  }\n  selectorMatched(element, selector) {\n    this.delegate.selectorMatched(element, selector, this.details);\n    this.matchesByElement.add(selector, element);\n  }\n  selectorUnmatched(element, selector) {\n    this.delegate.selectorUnmatched(element, selector, this.details);\n    this.matchesByElement.delete(selector, element);\n  }\n}\nclass StringMapObserver {\n  constructor(element, delegate) {\n    this.element = element;\n    this.delegate = delegate;\n    this.started = false;\n    this.stringMap = new Map();\n    this.mutationObserver = new MutationObserver(mutations => this.processMutations(mutations));\n  }\n  start() {\n    if (!this.started) {\n      this.started = true;\n      this.mutationObserver.observe(this.element, {\n        attributes: true,\n        attributeOldValue: true\n      });\n      this.refresh();\n    }\n  }\n  stop() {\n    if (this.started) {\n      this.mutationObserver.takeRecords();\n      this.mutationObserver.disconnect();\n      this.started = false;\n    }\n  }\n  refresh() {\n    if (this.started) {\n      var _iterator5 = _createForOfIteratorHelper(this.knownAttributeNames),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          const attributeName = _step5.value;\n          this.refreshAttribute(attributeName, null);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }\n  processMutations(mutations) {\n    if (this.started) {\n      var _iterator6 = _createForOfIteratorHelper(mutations),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          const mutation = _step6.value;\n          this.processMutation(mutation);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }\n  processMutation(mutation) {\n    const attributeName = mutation.attributeName;\n    if (attributeName) {\n      this.refreshAttribute(attributeName, mutation.oldValue);\n    }\n  }\n  refreshAttribute(attributeName, oldValue) {\n    const key = this.delegate.getStringMapKeyForAttribute(attributeName);\n    if (key != null) {\n      if (!this.stringMap.has(attributeName)) {\n        this.stringMapKeyAdded(key, attributeName);\n      }\n      const value = this.element.getAttribute(attributeName);\n      if (this.stringMap.get(attributeName) != value) {\n        this.stringMapValueChanged(value, key, oldValue);\n      }\n      if (value == null) {\n        const oldValue = this.stringMap.get(attributeName);\n        this.stringMap.delete(attributeName);\n        if (oldValue) this.stringMapKeyRemoved(key, attributeName, oldValue);\n      } else {\n        this.stringMap.set(attributeName, value);\n      }\n    }\n  }\n  stringMapKeyAdded(key, attributeName) {\n    if (this.delegate.stringMapKeyAdded) {\n      this.delegate.stringMapKeyAdded(key, attributeName);\n    }\n  }\n  stringMapValueChanged(value, key, oldValue) {\n    if (this.delegate.stringMapValueChanged) {\n      this.delegate.stringMapValueChanged(value, key, oldValue);\n    }\n  }\n  stringMapKeyRemoved(key, attributeName, oldValue) {\n    if (this.delegate.stringMapKeyRemoved) {\n      this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);\n    }\n  }\n  get knownAttributeNames() {\n    return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));\n  }\n  get currentAttributeNames() {\n    return Array.from(this.element.attributes).map(attribute => attribute.name);\n  }\n  get recordedAttributeNames() {\n    return Array.from(this.stringMap.keys());\n  }\n}\nclass TokenListObserver {\n  constructor(element, attributeName, delegate) {\n    this.attributeObserver = new AttributeObserver(element, attributeName, this);\n    this.delegate = delegate;\n    this.tokensByElement = new Multimap();\n  }\n  get started() {\n    return this.attributeObserver.started;\n  }\n  start() {\n    this.attributeObserver.start();\n  }\n  pause(callback) {\n    this.attributeObserver.pause(callback);\n  }\n  stop() {\n    this.attributeObserver.stop();\n  }\n  refresh() {\n    this.attributeObserver.refresh();\n  }\n  get element() {\n    return this.attributeObserver.element;\n  }\n  get attributeName() {\n    return this.attributeObserver.attributeName;\n  }\n  elementMatchedAttribute(element) {\n    this.tokensMatched(this.readTokensForElement(element));\n  }\n  elementAttributeValueChanged(element) {\n    const _this$refreshTokensFo = this.refreshTokensForElement(element),\n      _this$refreshTokensFo2 = _slicedToArray(_this$refreshTokensFo, 2),\n      unmatchedTokens = _this$refreshTokensFo2[0],\n      matchedTokens = _this$refreshTokensFo2[1];\n    this.tokensUnmatched(unmatchedTokens);\n    this.tokensMatched(matchedTokens);\n  }\n  elementUnmatchedAttribute(element) {\n    this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));\n  }\n  tokensMatched(tokens) {\n    tokens.forEach(token => this.tokenMatched(token));\n  }\n  tokensUnmatched(tokens) {\n    tokens.forEach(token => this.tokenUnmatched(token));\n  }\n  tokenMatched(token) {\n    this.delegate.tokenMatched(token);\n    this.tokensByElement.add(token.element, token);\n  }\n  tokenUnmatched(token) {\n    this.delegate.tokenUnmatched(token);\n    this.tokensByElement.delete(token.element, token);\n  }\n  refreshTokensForElement(element) {\n    const previousTokens = this.tokensByElement.getValuesForKey(element);\n    const currentTokens = this.readTokensForElement(element);\n    const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(_ref8 => {\n      let _ref9 = _slicedToArray(_ref8, 2),\n        previousToken = _ref9[0],\n        currentToken = _ref9[1];\n      return !tokensAreEqual(previousToken, currentToken);\n    });\n    if (firstDifferingIndex == -1) {\n      return [[], []];\n    } else {\n      return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];\n    }\n  }\n  readTokensForElement(element) {\n    const attributeName = this.attributeName;\n    const tokenString = element.getAttribute(attributeName) || \"\";\n    return parseTokenString(tokenString, element, attributeName);\n  }\n}\nfunction parseTokenString(tokenString, element, attributeName) {\n  return tokenString.trim().split(/\\s+/).filter(content => content.length).map((content, index) => ({\n    element,\n    attributeName,\n    content,\n    index\n  }));\n}\nfunction zip(left, right) {\n  const length = Math.max(left.length, right.length);\n  return Array.from({\n    length\n  }, (_, index) => [left[index], right[index]]);\n}\nfunction tokensAreEqual(left, right) {\n  return left && right && left.index == right.index && left.content == right.content;\n}\nclass ValueListObserver {\n  constructor(element, attributeName, delegate) {\n    this.tokenListObserver = new TokenListObserver(element, attributeName, this);\n    this.delegate = delegate;\n    this.parseResultsByToken = new WeakMap();\n    this.valuesByTokenByElement = new WeakMap();\n  }\n  get started() {\n    return this.tokenListObserver.started;\n  }\n  start() {\n    this.tokenListObserver.start();\n  }\n  stop() {\n    this.tokenListObserver.stop();\n  }\n  refresh() {\n    this.tokenListObserver.refresh();\n  }\n  get element() {\n    return this.tokenListObserver.element;\n  }\n  get attributeName() {\n    return this.tokenListObserver.attributeName;\n  }\n  tokenMatched(token) {\n    const element = token.element;\n    const _this$fetchParseResul = this.fetchParseResultForToken(token),\n      value = _this$fetchParseResul.value;\n    if (value) {\n      this.fetchValuesByTokenForElement(element).set(token, value);\n      this.delegate.elementMatchedValue(element, value);\n    }\n  }\n  tokenUnmatched(token) {\n    const element = token.element;\n    const _this$fetchParseResul2 = this.fetchParseResultForToken(token),\n      value = _this$fetchParseResul2.value;\n    if (value) {\n      this.fetchValuesByTokenForElement(element).delete(token);\n      this.delegate.elementUnmatchedValue(element, value);\n    }\n  }\n  fetchParseResultForToken(token) {\n    let parseResult = this.parseResultsByToken.get(token);\n    if (!parseResult) {\n      parseResult = this.parseToken(token);\n      this.parseResultsByToken.set(token, parseResult);\n    }\n    return parseResult;\n  }\n  fetchValuesByTokenForElement(element) {\n    let valuesByToken = this.valuesByTokenByElement.get(element);\n    if (!valuesByToken) {\n      valuesByToken = new Map();\n      this.valuesByTokenByElement.set(element, valuesByToken);\n    }\n    return valuesByToken;\n  }\n  parseToken(token) {\n    try {\n      const value = this.delegate.parseValueForToken(token);\n      return {\n        value\n      };\n    } catch (error) {\n      return {\n        error\n      };\n    }\n  }\n}\nclass BindingObserver {\n  constructor(context, delegate) {\n    this.context = context;\n    this.delegate = delegate;\n    this.bindingsByAction = new Map();\n  }\n  start() {\n    if (!this.valueListObserver) {\n      this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);\n      this.valueListObserver.start();\n    }\n  }\n  stop() {\n    if (this.valueListObserver) {\n      this.valueListObserver.stop();\n      delete this.valueListObserver;\n      this.disconnectAllActions();\n    }\n  }\n  get element() {\n    return this.context.element;\n  }\n  get identifier() {\n    return this.context.identifier;\n  }\n  get actionAttribute() {\n    return this.schema.actionAttribute;\n  }\n  get schema() {\n    return this.context.schema;\n  }\n  get bindings() {\n    return Array.from(this.bindingsByAction.values());\n  }\n  connectAction(action) {\n    const binding = new Binding(this.context, action);\n    this.bindingsByAction.set(action, binding);\n    this.delegate.bindingConnected(binding);\n  }\n  disconnectAction(action) {\n    const binding = this.bindingsByAction.get(action);\n    if (binding) {\n      this.bindingsByAction.delete(action);\n      this.delegate.bindingDisconnected(binding);\n    }\n  }\n  disconnectAllActions() {\n    this.bindings.forEach(binding => this.delegate.bindingDisconnected(binding, true));\n    this.bindingsByAction.clear();\n  }\n  parseValueForToken(token) {\n    const action = Action.forToken(token, this.schema);\n    if (action.identifier == this.identifier) {\n      return action;\n    }\n  }\n  elementMatchedValue(element, action) {\n    this.connectAction(action);\n  }\n  elementUnmatchedValue(element, action) {\n    this.disconnectAction(action);\n  }\n}\nclass ValueObserver {\n  constructor(context, receiver) {\n    this.context = context;\n    this.receiver = receiver;\n    this.stringMapObserver = new StringMapObserver(this.element, this);\n    this.valueDescriptorMap = this.controller.valueDescriptorMap;\n  }\n  start() {\n    this.stringMapObserver.start();\n    this.invokeChangedCallbacksForDefaultValues();\n  }\n  stop() {\n    this.stringMapObserver.stop();\n  }\n  get element() {\n    return this.context.element;\n  }\n  get controller() {\n    return this.context.controller;\n  }\n  getStringMapKeyForAttribute(attributeName) {\n    if (attributeName in this.valueDescriptorMap) {\n      return this.valueDescriptorMap[attributeName].name;\n    }\n  }\n  stringMapKeyAdded(key, attributeName) {\n    const descriptor = this.valueDescriptorMap[attributeName];\n    if (!this.hasValue(key)) {\n      this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));\n    }\n  }\n  stringMapValueChanged(value, name, oldValue) {\n    const descriptor = this.valueDescriptorNameMap[name];\n    if (value === null) return;\n    if (oldValue === null) {\n      oldValue = descriptor.writer(descriptor.defaultValue);\n    }\n    this.invokeChangedCallback(name, value, oldValue);\n  }\n  stringMapKeyRemoved(key, attributeName, oldValue) {\n    const descriptor = this.valueDescriptorNameMap[key];\n    if (this.hasValue(key)) {\n      this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);\n    } else {\n      this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);\n    }\n  }\n  invokeChangedCallbacksForDefaultValues() {\n    var _iterator7 = _createForOfIteratorHelper(this.valueDescriptors),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        const _step7$value = _step7.value,\n          key = _step7$value.key,\n          name = _step7$value.name,\n          defaultValue = _step7$value.defaultValue,\n          writer = _step7$value.writer;\n        if (defaultValue != undefined && !this.controller.data.has(key)) {\n          this.invokeChangedCallback(name, writer(defaultValue), undefined);\n        }\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n  }\n  invokeChangedCallback(name, rawValue, rawOldValue) {\n    const changedMethodName = `${name}Changed`;\n    const changedMethod = this.receiver[changedMethodName];\n    if (typeof changedMethod == \"function\") {\n      const descriptor = this.valueDescriptorNameMap[name];\n      try {\n        const value = descriptor.reader(rawValue);\n        let oldValue = rawOldValue;\n        if (rawOldValue) {\n          oldValue = descriptor.reader(rawOldValue);\n        }\n        changedMethod.call(this.receiver, value, oldValue);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          error.message = `Stimulus Value \"${this.context.identifier}.${descriptor.name}\" - ${error.message}`;\n        }\n        throw error;\n      }\n    }\n  }\n  get valueDescriptors() {\n    const valueDescriptorMap = this.valueDescriptorMap;\n    return Object.keys(valueDescriptorMap).map(key => valueDescriptorMap[key]);\n  }\n  get valueDescriptorNameMap() {\n    const descriptors = {};\n    Object.keys(this.valueDescriptorMap).forEach(key => {\n      const descriptor = this.valueDescriptorMap[key];\n      descriptors[descriptor.name] = descriptor;\n    });\n    return descriptors;\n  }\n  hasValue(attributeName) {\n    const descriptor = this.valueDescriptorNameMap[attributeName];\n    const hasMethodName = `has${capitalize(descriptor.name)}`;\n    return this.receiver[hasMethodName];\n  }\n}\nclass TargetObserver {\n  constructor(context, delegate) {\n    this.context = context;\n    this.delegate = delegate;\n    this.targetsByName = new Multimap();\n  }\n  start() {\n    if (!this.tokenListObserver) {\n      this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);\n      this.tokenListObserver.start();\n    }\n  }\n  stop() {\n    if (this.tokenListObserver) {\n      this.disconnectAllTargets();\n      this.tokenListObserver.stop();\n      delete this.tokenListObserver;\n    }\n  }\n  tokenMatched(_ref10) {\n    let element = _ref10.element,\n      name = _ref10.content;\n    if (this.scope.containsElement(element)) {\n      this.connectTarget(element, name);\n    }\n  }\n  tokenUnmatched(_ref11) {\n    let element = _ref11.element,\n      name = _ref11.content;\n    this.disconnectTarget(element, name);\n  }\n  connectTarget(element, name) {\n    var _a;\n    if (!this.targetsByName.has(name, element)) {\n      this.targetsByName.add(name, element);\n      (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));\n    }\n  }\n  disconnectTarget(element, name) {\n    var _a;\n    if (this.targetsByName.has(name, element)) {\n      this.targetsByName.delete(name, element);\n      (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));\n    }\n  }\n  disconnectAllTargets() {\n    var _iterator8 = _createForOfIteratorHelper(this.targetsByName.keys),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        const name = _step8.value;\n        var _iterator9 = _createForOfIteratorHelper(this.targetsByName.getValuesForKey(name)),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            const element = _step9.value;\n            this.disconnectTarget(element, name);\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n  }\n  get attributeName() {\n    return `data-${this.context.identifier}-target`;\n  }\n  get element() {\n    return this.context.element;\n  }\n  get scope() {\n    return this.context.scope;\n  }\n}\nfunction readInheritableStaticArrayValues(constructor, propertyName) {\n  const ancestors = getAncestorsForConstructor(constructor);\n  return Array.from(ancestors.reduce((values, constructor) => {\n    getOwnStaticArrayValues(constructor, propertyName).forEach(name => values.add(name));\n    return values;\n  }, new Set()));\n}\nfunction readInheritableStaticObjectPairs(constructor, propertyName) {\n  const ancestors = getAncestorsForConstructor(constructor);\n  return ancestors.reduce((pairs, constructor) => {\n    pairs.push(...getOwnStaticObjectPairs(constructor, propertyName));\n    return pairs;\n  }, []);\n}\nfunction getAncestorsForConstructor(constructor) {\n  const ancestors = [];\n  while (constructor) {\n    ancestors.push(constructor);\n    constructor = Object.getPrototypeOf(constructor);\n  }\n  return ancestors.reverse();\n}\nfunction getOwnStaticArrayValues(constructor, propertyName) {\n  const definition = constructor[propertyName];\n  return Array.isArray(definition) ? definition : [];\n}\nfunction getOwnStaticObjectPairs(constructor, propertyName) {\n  const definition = constructor[propertyName];\n  return definition ? Object.keys(definition).map(key => [key, definition[key]]) : [];\n}\nclass OutletObserver {\n  constructor(context, delegate) {\n    this.started = false;\n    this.context = context;\n    this.delegate = delegate;\n    this.outletsByName = new Multimap();\n    this.outletElementsByName = new Multimap();\n    this.selectorObserverMap = new Map();\n    this.attributeObserverMap = new Map();\n  }\n  start() {\n    if (!this.started) {\n      this.outletDefinitions.forEach(outletName => {\n        this.setupSelectorObserverForOutlet(outletName);\n        this.setupAttributeObserverForOutlet(outletName);\n      });\n      this.started = true;\n      this.dependentContexts.forEach(context => context.refresh());\n    }\n  }\n  refresh() {\n    this.selectorObserverMap.forEach(observer => observer.refresh());\n    this.attributeObserverMap.forEach(observer => observer.refresh());\n  }\n  stop() {\n    if (this.started) {\n      this.started = false;\n      this.disconnectAllOutlets();\n      this.stopSelectorObservers();\n      this.stopAttributeObservers();\n    }\n  }\n  stopSelectorObservers() {\n    if (this.selectorObserverMap.size > 0) {\n      this.selectorObserverMap.forEach(observer => observer.stop());\n      this.selectorObserverMap.clear();\n    }\n  }\n  stopAttributeObservers() {\n    if (this.attributeObserverMap.size > 0) {\n      this.attributeObserverMap.forEach(observer => observer.stop());\n      this.attributeObserverMap.clear();\n    }\n  }\n  selectorMatched(element, _selector, _ref12) {\n    let outletName = _ref12.outletName;\n    const outlet = this.getOutlet(element, outletName);\n    if (outlet) {\n      this.connectOutlet(outlet, element, outletName);\n    }\n  }\n  selectorUnmatched(element, _selector, _ref13) {\n    let outletName = _ref13.outletName;\n    const outlet = this.getOutletFromMap(element, outletName);\n    if (outlet) {\n      this.disconnectOutlet(outlet, element, outletName);\n    }\n  }\n  selectorMatchElement(element, _ref14) {\n    let outletName = _ref14.outletName;\n    const selector = this.selector(outletName);\n    const hasOutlet = this.hasOutlet(element, outletName);\n    const hasOutletController = element.matches(`[${this.schema.controllerAttribute}~=${outletName}]`);\n    if (selector) {\n      return hasOutlet && hasOutletController && element.matches(selector);\n    } else {\n      return false;\n    }\n  }\n  elementMatchedAttribute(_element, attributeName) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName);\n    }\n  }\n  elementAttributeValueChanged(_element, attributeName) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName);\n    }\n  }\n  elementUnmatchedAttribute(_element, attributeName) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName);\n    }\n  }\n  connectOutlet(outlet, element, outletName) {\n    var _a;\n    if (!this.outletElementsByName.has(outletName, element)) {\n      this.outletsByName.add(outletName, outlet);\n      this.outletElementsByName.add(outletName, element);\n      (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletConnected(outlet, element, outletName));\n    }\n  }\n  disconnectOutlet(outlet, element, outletName) {\n    var _a;\n    if (this.outletElementsByName.has(outletName, element)) {\n      this.outletsByName.delete(outletName, outlet);\n      this.outletElementsByName.delete(outletName, element);\n      (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletDisconnected(outlet, element, outletName));\n    }\n  }\n  disconnectAllOutlets() {\n    var _iterator10 = _createForOfIteratorHelper(this.outletElementsByName.keys),\n      _step10;\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        const outletName = _step10.value;\n        var _iterator11 = _createForOfIteratorHelper(this.outletElementsByName.getValuesForKey(outletName)),\n          _step11;\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            const element = _step11.value;\n            var _iterator12 = _createForOfIteratorHelper(this.outletsByName.getValuesForKey(outletName)),\n              _step12;\n            try {\n              for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                const outlet = _step12.value;\n                this.disconnectOutlet(outlet, element, outletName);\n              }\n            } catch (err) {\n              _iterator12.e(err);\n            } finally {\n              _iterator12.f();\n            }\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n  }\n  updateSelectorObserverForOutlet(outletName) {\n    const observer = this.selectorObserverMap.get(outletName);\n    if (observer) {\n      observer.selector = this.selector(outletName);\n    }\n  }\n  setupSelectorObserverForOutlet(outletName) {\n    const selector = this.selector(outletName);\n    const selectorObserver = new SelectorObserver(document.body, selector, this, {\n      outletName\n    });\n    this.selectorObserverMap.set(outletName, selectorObserver);\n    selectorObserver.start();\n  }\n  setupAttributeObserverForOutlet(outletName) {\n    const attributeName = this.attributeNameForOutletName(outletName);\n    const attributeObserver = new AttributeObserver(this.scope.element, attributeName, this);\n    this.attributeObserverMap.set(outletName, attributeObserver);\n    attributeObserver.start();\n  }\n  selector(outletName) {\n    return this.scope.outlets.getSelectorForOutletName(outletName);\n  }\n  attributeNameForOutletName(outletName) {\n    return this.scope.schema.outletAttributeForScope(this.identifier, outletName);\n  }\n  getOutletNameFromOutletAttributeName(attributeName) {\n    return this.outletDefinitions.find(outletName => this.attributeNameForOutletName(outletName) === attributeName);\n  }\n  get outletDependencies() {\n    const dependencies = new Multimap();\n    this.router.modules.forEach(module => {\n      const constructor = module.definition.controllerConstructor;\n      const outlets = readInheritableStaticArrayValues(constructor, \"outlets\");\n      outlets.forEach(outlet => dependencies.add(outlet, module.identifier));\n    });\n    return dependencies;\n  }\n  get outletDefinitions() {\n    return this.outletDependencies.getKeysForValue(this.identifier);\n  }\n  get dependentControllerIdentifiers() {\n    return this.outletDependencies.getValuesForKey(this.identifier);\n  }\n  get dependentContexts() {\n    const identifiers = this.dependentControllerIdentifiers;\n    return this.router.contexts.filter(context => identifiers.includes(context.identifier));\n  }\n  hasOutlet(element, outletName) {\n    return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName);\n  }\n  getOutlet(element, outletName) {\n    return this.application.getControllerForElementAndIdentifier(element, outletName);\n  }\n  getOutletFromMap(element, outletName) {\n    return this.outletsByName.getValuesForKey(outletName).find(outlet => outlet.element === element);\n  }\n  get scope() {\n    return this.context.scope;\n  }\n  get schema() {\n    return this.context.schema;\n  }\n  get identifier() {\n    return this.context.identifier;\n  }\n  get application() {\n    return this.context.application;\n  }\n  get router() {\n    return this.application.router;\n  }\n}\nclass Context {\n  constructor(module, scope) {\n    var _this = this;\n    this.logDebugActivity = function (functionName) {\n      let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const identifier = _this.identifier,\n        controller = _this.controller,\n        element = _this.element;\n      detail = Object.assign({\n        identifier,\n        controller,\n        element\n      }, detail);\n      _this.application.logDebugActivity(_this.identifier, functionName, detail);\n    };\n    this.module = module;\n    this.scope = scope;\n    this.controller = new module.controllerConstructor(this);\n    this.bindingObserver = new BindingObserver(this, this.dispatcher);\n    this.valueObserver = new ValueObserver(this, this.controller);\n    this.targetObserver = new TargetObserver(this, this);\n    this.outletObserver = new OutletObserver(this, this);\n    try {\n      this.controller.initialize();\n      this.logDebugActivity(\"initialize\");\n    } catch (error) {\n      this.handleError(error, \"initializing controller\");\n    }\n  }\n  connect() {\n    this.bindingObserver.start();\n    this.valueObserver.start();\n    this.targetObserver.start();\n    this.outletObserver.start();\n    try {\n      this.controller.connect();\n      this.logDebugActivity(\"connect\");\n    } catch (error) {\n      this.handleError(error, \"connecting controller\");\n    }\n  }\n  refresh() {\n    this.outletObserver.refresh();\n  }\n  disconnect() {\n    try {\n      this.controller.disconnect();\n      this.logDebugActivity(\"disconnect\");\n    } catch (error) {\n      this.handleError(error, \"disconnecting controller\");\n    }\n    this.outletObserver.stop();\n    this.targetObserver.stop();\n    this.valueObserver.stop();\n    this.bindingObserver.stop();\n  }\n  get application() {\n    return this.module.application;\n  }\n  get identifier() {\n    return this.module.identifier;\n  }\n  get schema() {\n    return this.application.schema;\n  }\n  get dispatcher() {\n    return this.application.dispatcher;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get parentElement() {\n    return this.element.parentElement;\n  }\n  handleError(error, message) {\n    let detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const identifier = this.identifier,\n      controller = this.controller,\n      element = this.element;\n    detail = Object.assign({\n      identifier,\n      controller,\n      element\n    }, detail);\n    this.application.handleError(error, `Error ${message}`, detail);\n  }\n  targetConnected(element, name) {\n    this.invokeControllerMethod(`${name}TargetConnected`, element);\n  }\n  targetDisconnected(element, name) {\n    this.invokeControllerMethod(`${name}TargetDisconnected`, element);\n  }\n  outletConnected(outlet, element, name) {\n    this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element);\n  }\n  outletDisconnected(outlet, element, name) {\n    this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element);\n  }\n  invokeControllerMethod(methodName) {\n    const controller = this.controller;\n    if (typeof controller[methodName] == \"function\") {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      controller[methodName](...args);\n    }\n  }\n}\nfunction bless(constructor) {\n  return shadow(constructor, getBlessedProperties(constructor));\n}\nfunction shadow(constructor, properties) {\n  const shadowConstructor = extend(constructor);\n  const shadowProperties = getShadowProperties(constructor.prototype, properties);\n  Object.defineProperties(shadowConstructor.prototype, shadowProperties);\n  return shadowConstructor;\n}\nfunction getBlessedProperties(constructor) {\n  const blessings = readInheritableStaticArrayValues(constructor, \"blessings\");\n  return blessings.reduce((blessedProperties, blessing) => {\n    const properties = blessing(constructor);\n    for (const key in properties) {\n      const descriptor = blessedProperties[key] || {};\n      blessedProperties[key] = Object.assign(descriptor, properties[key]);\n    }\n    return blessedProperties;\n  }, {});\n}\nfunction getShadowProperties(prototype, properties) {\n  return getOwnKeys(properties).reduce((shadowProperties, key) => {\n    const descriptor = getShadowedDescriptor(prototype, properties, key);\n    if (descriptor) {\n      Object.assign(shadowProperties, {\n        [key]: descriptor\n      });\n    }\n    return shadowProperties;\n  }, {});\n}\nfunction getShadowedDescriptor(prototype, properties, key) {\n  const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);\n  const shadowedByValue = shadowingDescriptor && \"value\" in shadowingDescriptor;\n  if (!shadowedByValue) {\n    const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;\n    if (shadowingDescriptor) {\n      descriptor.get = shadowingDescriptor.get || descriptor.get;\n      descriptor.set = shadowingDescriptor.set || descriptor.set;\n    }\n    return descriptor;\n  }\n}\nconst getOwnKeys = (() => {\n  if (typeof Object.getOwnPropertySymbols == \"function\") {\n    return object => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];\n  } else {\n    return Object.getOwnPropertyNames;\n  }\n})();\nconst extend = (() => {\n  function extendWithReflect(constructor) {\n    function extended() {\n      return Reflect.construct(constructor, arguments, new.target);\n    }\n    extended.prototype = Object.create(constructor.prototype, {\n      constructor: {\n        value: extended\n      }\n    });\n    Reflect.setPrototypeOf(extended, constructor);\n    return extended;\n  }\n  function testReflectExtension() {\n    const a = function () {\n      this.a.call(this);\n    };\n    const b = extendWithReflect(a);\n    b.prototype.a = function () {};\n    return new b();\n  }\n  try {\n    testReflectExtension();\n    return extendWithReflect;\n  } catch (error) {\n    return constructor => class extended extends constructor {};\n  }\n})();\nfunction blessDefinition(definition) {\n  return {\n    identifier: definition.identifier,\n    controllerConstructor: bless(definition.controllerConstructor)\n  };\n}\nclass Module {\n  constructor(application, definition) {\n    this.application = application;\n    this.definition = blessDefinition(definition);\n    this.contextsByScope = new WeakMap();\n    this.connectedContexts = new Set();\n  }\n  get identifier() {\n    return this.definition.identifier;\n  }\n  get controllerConstructor() {\n    return this.definition.controllerConstructor;\n  }\n  get contexts() {\n    return Array.from(this.connectedContexts);\n  }\n  connectContextForScope(scope) {\n    const context = this.fetchContextForScope(scope);\n    this.connectedContexts.add(context);\n    context.connect();\n  }\n  disconnectContextForScope(scope) {\n    const context = this.contextsByScope.get(scope);\n    if (context) {\n      this.connectedContexts.delete(context);\n      context.disconnect();\n    }\n  }\n  fetchContextForScope(scope) {\n    let context = this.contextsByScope.get(scope);\n    if (!context) {\n      context = new Context(this, scope);\n      this.contextsByScope.set(scope, context);\n    }\n    return context;\n  }\n}\nclass ClassMap {\n  constructor(scope) {\n    this.scope = scope;\n  }\n  has(name) {\n    return this.data.has(this.getDataKey(name));\n  }\n  get(name) {\n    return this.getAll(name)[0];\n  }\n  getAll(name) {\n    const tokenString = this.data.get(this.getDataKey(name)) || \"\";\n    return tokenize(tokenString);\n  }\n  getAttributeName(name) {\n    return this.data.getAttributeNameForKey(this.getDataKey(name));\n  }\n  getDataKey(name) {\n    return `${name}-class`;\n  }\n  get data() {\n    return this.scope.data;\n  }\n}\nclass DataMap {\n  constructor(scope) {\n    this.scope = scope;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get identifier() {\n    return this.scope.identifier;\n  }\n  get(key) {\n    const name = this.getAttributeNameForKey(key);\n    return this.element.getAttribute(name);\n  }\n  set(key, value) {\n    const name = this.getAttributeNameForKey(key);\n    this.element.setAttribute(name, value);\n    return this.get(key);\n  }\n  has(key) {\n    const name = this.getAttributeNameForKey(key);\n    return this.element.hasAttribute(name);\n  }\n  delete(key) {\n    if (this.has(key)) {\n      const name = this.getAttributeNameForKey(key);\n      this.element.removeAttribute(name);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  getAttributeNameForKey(key) {\n    return `data-${this.identifier}-${dasherize(key)}`;\n  }\n}\nclass Guide {\n  constructor(logger) {\n    this.warnedKeysByObject = new WeakMap();\n    this.logger = logger;\n  }\n  warn(object, key, message) {\n    let warnedKeys = this.warnedKeysByObject.get(object);\n    if (!warnedKeys) {\n      warnedKeys = new Set();\n      this.warnedKeysByObject.set(object, warnedKeys);\n    }\n    if (!warnedKeys.has(key)) {\n      warnedKeys.add(key);\n      this.logger.warn(message, object);\n    }\n  }\n}\nfunction attributeValueContainsToken(attributeName, token) {\n  return `[${attributeName}~=\"${token}\"]`;\n}\nclass TargetSet {\n  constructor(scope) {\n    this.scope = scope;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get identifier() {\n    return this.scope.identifier;\n  }\n  get schema() {\n    return this.scope.schema;\n  }\n  has(targetName) {\n    return this.find(targetName) != null;\n  }\n  find() {\n    for (var _len2 = arguments.length, targetNames = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      targetNames[_key3] = arguments[_key3];\n    }\n    return targetNames.reduce((target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName), undefined);\n  }\n  findAll() {\n    for (var _len3 = arguments.length, targetNames = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n      targetNames[_key4] = arguments[_key4];\n    }\n    return targetNames.reduce((targets, targetName) => [...targets, ...this.findAllTargets(targetName), ...this.findAllLegacyTargets(targetName)], []);\n  }\n  findTarget(targetName) {\n    const selector = this.getSelectorForTargetName(targetName);\n    return this.scope.findElement(selector);\n  }\n  findAllTargets(targetName) {\n    const selector = this.getSelectorForTargetName(targetName);\n    return this.scope.findAllElements(selector);\n  }\n  getSelectorForTargetName(targetName) {\n    const attributeName = this.schema.targetAttributeForScope(this.identifier);\n    return attributeValueContainsToken(attributeName, targetName);\n  }\n  findLegacyTarget(targetName) {\n    const selector = this.getLegacySelectorForTargetName(targetName);\n    return this.deprecate(this.scope.findElement(selector), targetName);\n  }\n  findAllLegacyTargets(targetName) {\n    const selector = this.getLegacySelectorForTargetName(targetName);\n    return this.scope.findAllElements(selector).map(element => this.deprecate(element, targetName));\n  }\n  getLegacySelectorForTargetName(targetName) {\n    const targetDescriptor = `${this.identifier}.${targetName}`;\n    return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);\n  }\n  deprecate(element, targetName) {\n    if (element) {\n      const identifier = this.identifier;\n      const attributeName = this.schema.targetAttribute;\n      const revisedAttributeName = this.schema.targetAttributeForScope(identifier);\n      this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}=\"${identifier}.${targetName}\" with ${revisedAttributeName}=\"${targetName}\". ` + `The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);\n    }\n    return element;\n  }\n  get guide() {\n    return this.scope.guide;\n  }\n}\nclass OutletSet {\n  constructor(scope, controllerElement) {\n    this.scope = scope;\n    this.controllerElement = controllerElement;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get identifier() {\n    return this.scope.identifier;\n  }\n  get schema() {\n    return this.scope.schema;\n  }\n  has(outletName) {\n    return this.find(outletName) != null;\n  }\n  find() {\n    for (var _len4 = arguments.length, outletNames = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n      outletNames[_key5] = arguments[_key5];\n    }\n    return outletNames.reduce((outlet, outletName) => outlet || this.findOutlet(outletName), undefined);\n  }\n  findAll() {\n    for (var _len5 = arguments.length, outletNames = new Array(_len5), _key6 = 0; _key6 < _len5; _key6++) {\n      outletNames[_key6] = arguments[_key6];\n    }\n    return outletNames.reduce((outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)], []);\n  }\n  getSelectorForOutletName(outletName) {\n    const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName);\n    return this.controllerElement.getAttribute(attributeName);\n  }\n  findOutlet(outletName) {\n    const selector = this.getSelectorForOutletName(outletName);\n    if (selector) return this.findElement(selector, outletName);\n  }\n  findAllOutlets(outletName) {\n    const selector = this.getSelectorForOutletName(outletName);\n    return selector ? this.findAllElements(selector, outletName) : [];\n  }\n  findElement(selector, outletName) {\n    const elements = this.scope.queryElements(selector);\n    return elements.filter(element => this.matchesElement(element, selector, outletName))[0];\n  }\n  findAllElements(selector, outletName) {\n    const elements = this.scope.queryElements(selector);\n    return elements.filter(element => this.matchesElement(element, selector, outletName));\n  }\n  matchesElement(element, selector, outletName) {\n    const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || \"\";\n    return element.matches(selector) && controllerAttribute.split(\" \").includes(outletName);\n  }\n}\nclass Scope {\n  constructor(schema, element, identifier, logger) {\n    this.targets = new TargetSet(this);\n    this.classes = new ClassMap(this);\n    this.data = new DataMap(this);\n    this.containsElement = element => {\n      return element.closest(this.controllerSelector) === this.element;\n    };\n    this.schema = schema;\n    this.element = element;\n    this.identifier = identifier;\n    this.guide = new Guide(logger);\n    this.outlets = new OutletSet(this.documentScope, element);\n  }\n  findElement(selector) {\n    return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);\n  }\n  findAllElements(selector) {\n    return [...(this.element.matches(selector) ? [this.element] : []), ...this.queryElements(selector).filter(this.containsElement)];\n  }\n  queryElements(selector) {\n    return Array.from(this.element.querySelectorAll(selector));\n  }\n  get controllerSelector() {\n    return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);\n  }\n  get isDocumentScope() {\n    return this.element === document.documentElement;\n  }\n  get documentScope() {\n    return this.isDocumentScope ? this : new Scope(this.schema, document.documentElement, this.identifier, this.guide.logger);\n  }\n}\nclass ScopeObserver {\n  constructor(element, schema, delegate) {\n    this.element = element;\n    this.schema = schema;\n    this.delegate = delegate;\n    this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);\n    this.scopesByIdentifierByElement = new WeakMap();\n    this.scopeReferenceCounts = new WeakMap();\n  }\n  start() {\n    this.valueListObserver.start();\n  }\n  stop() {\n    this.valueListObserver.stop();\n  }\n  get controllerAttribute() {\n    return this.schema.controllerAttribute;\n  }\n  parseValueForToken(token) {\n    const element = token.element,\n      identifier = token.content;\n    return this.parseValueForElementAndIdentifier(element, identifier);\n  }\n  parseValueForElementAndIdentifier(element, identifier) {\n    const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);\n    let scope = scopesByIdentifier.get(identifier);\n    if (!scope) {\n      scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);\n      scopesByIdentifier.set(identifier, scope);\n    }\n    return scope;\n  }\n  elementMatchedValue(element, value) {\n    const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;\n    this.scopeReferenceCounts.set(value, referenceCount);\n    if (referenceCount == 1) {\n      this.delegate.scopeConnected(value);\n    }\n  }\n  elementUnmatchedValue(element, value) {\n    const referenceCount = this.scopeReferenceCounts.get(value);\n    if (referenceCount) {\n      this.scopeReferenceCounts.set(value, referenceCount - 1);\n      if (referenceCount == 1) {\n        this.delegate.scopeDisconnected(value);\n      }\n    }\n  }\n  fetchScopesByIdentifierForElement(element) {\n    let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);\n    if (!scopesByIdentifier) {\n      scopesByIdentifier = new Map();\n      this.scopesByIdentifierByElement.set(element, scopesByIdentifier);\n    }\n    return scopesByIdentifier;\n  }\n}\nclass Router {\n  constructor(application) {\n    this.application = application;\n    this.scopeObserver = new ScopeObserver(this.element, this.schema, this);\n    this.scopesByIdentifier = new Multimap();\n    this.modulesByIdentifier = new Map();\n  }\n  get element() {\n    return this.application.element;\n  }\n  get schema() {\n    return this.application.schema;\n  }\n  get logger() {\n    return this.application.logger;\n  }\n  get controllerAttribute() {\n    return this.schema.controllerAttribute;\n  }\n  get modules() {\n    return Array.from(this.modulesByIdentifier.values());\n  }\n  get contexts() {\n    return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), []);\n  }\n  start() {\n    this.scopeObserver.start();\n  }\n  stop() {\n    this.scopeObserver.stop();\n  }\n  loadDefinition(definition) {\n    this.unloadIdentifier(definition.identifier);\n    const module = new Module(this.application, definition);\n    this.connectModule(module);\n    const afterLoad = definition.controllerConstructor.afterLoad;\n    if (afterLoad) {\n      afterLoad.call(definition.controllerConstructor, definition.identifier, this.application);\n    }\n  }\n  unloadIdentifier(identifier) {\n    const module = this.modulesByIdentifier.get(identifier);\n    if (module) {\n      this.disconnectModule(module);\n    }\n  }\n  getContextForElementAndIdentifier(element, identifier) {\n    const module = this.modulesByIdentifier.get(identifier);\n    if (module) {\n      return module.contexts.find(context => context.element == element);\n    }\n  }\n  proposeToConnectScopeForElementAndIdentifier(element, identifier) {\n    const scope = this.scopeObserver.parseValueForElementAndIdentifier(element, identifier);\n    if (scope) {\n      this.scopeObserver.elementMatchedValue(scope.element, scope);\n    } else {\n      console.error(`Couldn't find or create scope for identifier: \"${identifier}\" and element:`, element);\n    }\n  }\n  handleError(error, message, detail) {\n    this.application.handleError(error, message, detail);\n  }\n  createScopeForElementAndIdentifier(element, identifier) {\n    return new Scope(this.schema, element, identifier, this.logger);\n  }\n  scopeConnected(scope) {\n    this.scopesByIdentifier.add(scope.identifier, scope);\n    const module = this.modulesByIdentifier.get(scope.identifier);\n    if (module) {\n      module.connectContextForScope(scope);\n    }\n  }\n  scopeDisconnected(scope) {\n    this.scopesByIdentifier.delete(scope.identifier, scope);\n    const module = this.modulesByIdentifier.get(scope.identifier);\n    if (module) {\n      module.disconnectContextForScope(scope);\n    }\n  }\n  connectModule(module) {\n    this.modulesByIdentifier.set(module.identifier, module);\n    const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n    scopes.forEach(scope => module.connectContextForScope(scope));\n  }\n  disconnectModule(module) {\n    this.modulesByIdentifier.delete(module.identifier);\n    const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n    scopes.forEach(scope => module.disconnectContextForScope(scope));\n  }\n}\nconst defaultSchema = {\n  controllerAttribute: \"data-controller\",\n  actionAttribute: \"data-action\",\n  targetAttribute: \"data-target\",\n  targetAttributeForScope: identifier => `data-${identifier}-target`,\n  outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,\n  keyMappings: Object.assign(Object.assign({\n    enter: \"Enter\",\n    tab: \"Tab\",\n    esc: \"Escape\",\n    space: \" \",\n    up: \"ArrowUp\",\n    down: \"ArrowDown\",\n    left: \"ArrowLeft\",\n    right: \"ArrowRight\",\n    home: \"Home\",\n    end: \"End\",\n    page_up: \"PageUp\",\n    page_down: \"PageDown\"\n  }, objectFromEntries(\"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(c => [c, c]))), objectFromEntries(\"0123456789\".split(\"\").map(n => [n, n])))\n};\nfunction objectFromEntries(array) {\n  return array.reduce((memo, _ref15) => {\n    let _ref16 = _slicedToArray(_ref15, 2),\n      k = _ref16[0],\n      v = _ref16[1];\n    return Object.assign(Object.assign({}, memo), {\n      [k]: v\n    });\n  }, {});\n}\nclass Application {\n  constructor() {\n    var _this2 = this;\n    let element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.documentElement;\n    let schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSchema;\n    this.logger = console;\n    this.debug = false;\n    this.logDebugActivity = function (identifier, functionName) {\n      let detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (_this2.debug) {\n        _this2.logFormattedMessage(identifier, functionName, detail);\n      }\n    };\n    this.element = element;\n    this.schema = schema;\n    this.dispatcher = new Dispatcher(this);\n    this.router = new Router(this);\n    this.actionDescriptorFilters = Object.assign({}, defaultActionDescriptorFilters);\n  }\n  static start(element, schema) {\n    const application = new this(element, schema);\n    application.start();\n    return application;\n  }\n  async start() {\n    await domReady();\n    this.logDebugActivity(\"application\", \"starting\");\n    this.dispatcher.start();\n    this.router.start();\n    this.logDebugActivity(\"application\", \"start\");\n  }\n  stop() {\n    this.logDebugActivity(\"application\", \"stopping\");\n    this.dispatcher.stop();\n    this.router.stop();\n    this.logDebugActivity(\"application\", \"stop\");\n  }\n  register(identifier, controllerConstructor) {\n    this.load({\n      identifier,\n      controllerConstructor\n    });\n  }\n  registerActionOption(name, filter) {\n    this.actionDescriptorFilters[name] = filter;\n  }\n  load(head) {\n    for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {\n      rest[_key7 - 1] = arguments[_key7];\n    }\n    const definitions = Array.isArray(head) ? head : [head, ...rest];\n    definitions.forEach(definition => {\n      if (definition.controllerConstructor.shouldLoad) {\n        this.router.loadDefinition(definition);\n      }\n    });\n  }\n  unload(head) {\n    for (var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key8 = 1; _key8 < _len7; _key8++) {\n      rest[_key8 - 1] = arguments[_key8];\n    }\n    const identifiers = Array.isArray(head) ? head : [head, ...rest];\n    identifiers.forEach(identifier => this.router.unloadIdentifier(identifier));\n  }\n  get controllers() {\n    return this.router.contexts.map(context => context.controller);\n  }\n  getControllerForElementAndIdentifier(element, identifier) {\n    const context = this.router.getContextForElementAndIdentifier(element, identifier);\n    return context ? context.controller : null;\n  }\n  handleError(error, message, detail) {\n    var _a;\n    this.logger.error(`%s\\n\\n%o\\n\\n%o`, message, error, detail);\n    (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, \"\", 0, 0, error);\n  }\n  logFormattedMessage(identifier, functionName) {\n    let detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    detail = Object.assign({\n      application: this\n    }, detail);\n    this.logger.groupCollapsed(`${identifier} #${functionName}`);\n    this.logger.log(\"details:\", Object.assign({}, detail));\n    this.logger.groupEnd();\n  }\n}\nfunction domReady() {\n  return new Promise(resolve => {\n    if (document.readyState == \"loading\") {\n      document.addEventListener(\"DOMContentLoaded\", () => resolve());\n    } else {\n      resolve();\n    }\n  });\n}\nfunction ClassPropertiesBlessing(constructor) {\n  const classes = readInheritableStaticArrayValues(constructor, \"classes\");\n  return classes.reduce((properties, classDefinition) => {\n    return Object.assign(properties, propertiesForClassDefinition(classDefinition));\n  }, {});\n}\nfunction propertiesForClassDefinition(key) {\n  return {\n    [`${key}Class`]: {\n      get() {\n        const classes = this.classes;\n        if (classes.has(key)) {\n          return classes.get(key);\n        } else {\n          const attribute = classes.getAttributeName(key);\n          throw new Error(`Missing attribute \"${attribute}\"`);\n        }\n      }\n    },\n    [`${key}Classes`]: {\n      get() {\n        return this.classes.getAll(key);\n      }\n    },\n    [`has${capitalize(key)}Class`]: {\n      get() {\n        return this.classes.has(key);\n      }\n    }\n  };\n}\nfunction OutletPropertiesBlessing(constructor) {\n  const outlets = readInheritableStaticArrayValues(constructor, \"outlets\");\n  return outlets.reduce((properties, outletDefinition) => {\n    return Object.assign(properties, propertiesForOutletDefinition(outletDefinition));\n  }, {});\n}\nfunction getOutletController(controller, element, identifier) {\n  return controller.application.getControllerForElementAndIdentifier(element, identifier);\n}\nfunction getControllerAndEnsureConnectedScope(controller, element, outletName) {\n  let outletController = getOutletController(controller, element, outletName);\n  if (outletController) return outletController;\n  controller.application.router.proposeToConnectScopeForElementAndIdentifier(element, outletName);\n  outletController = getOutletController(controller, element, outletName);\n  if (outletController) return outletController;\n}\nfunction propertiesForOutletDefinition(name) {\n  const camelizedName = namespaceCamelize(name);\n  return {\n    [`${camelizedName}Outlet`]: {\n      get() {\n        const outletElement = this.outlets.find(name);\n        const selector = this.outlets.getSelectorForOutletName(name);\n        if (outletElement) {\n          const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);\n          if (outletController) return outletController;\n          throw new Error(`The provided outlet element is missing an outlet controller \"${name}\" instance for host controller \"${this.identifier}\"`);\n        }\n        throw new Error(`Missing outlet element \"${name}\" for host controller \"${this.identifier}\". Stimulus couldn't find a matching outlet element using selector \"${selector}\".`);\n      }\n    },\n    [`${camelizedName}Outlets`]: {\n      get() {\n        const outlets = this.outlets.findAll(name);\n        if (outlets.length > 0) {\n          return outlets.map(outletElement => {\n            const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);\n            if (outletController) return outletController;\n            console.warn(`The provided outlet element is missing an outlet controller \"${name}\" instance for host controller \"${this.identifier}\"`, outletElement);\n          }).filter(controller => controller);\n        }\n        return [];\n      }\n    },\n    [`${camelizedName}OutletElement`]: {\n      get() {\n        const outletElement = this.outlets.find(name);\n        const selector = this.outlets.getSelectorForOutletName(name);\n        if (outletElement) {\n          return outletElement;\n        } else {\n          throw new Error(`Missing outlet element \"${name}\" for host controller \"${this.identifier}\". Stimulus couldn't find a matching outlet element using selector \"${selector}\".`);\n        }\n      }\n    },\n    [`${camelizedName}OutletElements`]: {\n      get() {\n        return this.outlets.findAll(name);\n      }\n    },\n    [`has${capitalize(camelizedName)}Outlet`]: {\n      get() {\n        return this.outlets.has(name);\n      }\n    }\n  };\n}\nfunction TargetPropertiesBlessing(constructor) {\n  const targets = readInheritableStaticArrayValues(constructor, \"targets\");\n  return targets.reduce((properties, targetDefinition) => {\n    return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));\n  }, {});\n}\nfunction propertiesForTargetDefinition(name) {\n  return {\n    [`${name}Target`]: {\n      get() {\n        const target = this.targets.find(name);\n        if (target) {\n          return target;\n        } else {\n          throw new Error(`Missing target element \"${name}\" for \"${this.identifier}\" controller`);\n        }\n      }\n    },\n    [`${name}Targets`]: {\n      get() {\n        return this.targets.findAll(name);\n      }\n    },\n    [`has${capitalize(name)}Target`]: {\n      get() {\n        return this.targets.has(name);\n      }\n    }\n  };\n}\nfunction ValuePropertiesBlessing(constructor) {\n  const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, \"values\");\n  const propertyDescriptorMap = {\n    valueDescriptorMap: {\n      get() {\n        return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {\n          const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier);\n          const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);\n          return Object.assign(result, {\n            [attributeName]: valueDescriptor\n          });\n        }, {});\n      }\n    }\n  };\n  return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {\n    return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));\n  }, propertyDescriptorMap);\n}\nfunction propertiesForValueDefinitionPair(valueDefinitionPair, controller) {\n  const definition = parseValueDefinitionPair(valueDefinitionPair, controller);\n  const key = definition.key,\n    name = definition.name,\n    read = definition.reader,\n    write = definition.writer;\n  return {\n    [name]: {\n      get() {\n        const value = this.data.get(key);\n        if (value !== null) {\n          return read(value);\n        } else {\n          return definition.defaultValue;\n        }\n      },\n      set(value) {\n        if (value === undefined) {\n          this.data.delete(key);\n        } else {\n          this.data.set(key, write(value));\n        }\n      }\n    },\n    [`has${capitalize(name)}`]: {\n      get() {\n        return this.data.has(key) || definition.hasCustomDefaultValue;\n      }\n    }\n  };\n}\nfunction parseValueDefinitionPair(_ref17, controller) {\n  let _ref18 = _slicedToArray(_ref17, 2),\n    token = _ref18[0],\n    typeDefinition = _ref18[1];\n  return valueDescriptorForTokenAndTypeDefinition({\n    controller,\n    token,\n    typeDefinition\n  });\n}\nfunction parseValueTypeConstant(constant) {\n  switch (constant) {\n    case Array:\n      return \"array\";\n    case Boolean:\n      return \"boolean\";\n    case Number:\n      return \"number\";\n    case Object:\n      return \"object\";\n    case String:\n      return \"string\";\n  }\n}\nfunction parseValueTypeDefault(defaultValue) {\n  switch (typeof defaultValue) {\n    case \"boolean\":\n      return \"boolean\";\n    case \"number\":\n      return \"number\";\n    case \"string\":\n      return \"string\";\n  }\n  if (Array.isArray(defaultValue)) return \"array\";\n  if (Object.prototype.toString.call(defaultValue) === \"[object Object]\") return \"object\";\n}\nfunction parseValueTypeObject(payload) {\n  const controller = payload.controller,\n    token = payload.token,\n    typeObject = payload.typeObject;\n  const hasType = isSomething(typeObject.type);\n  const hasDefault = isSomething(typeObject.default);\n  const fullObject = hasType && hasDefault;\n  const onlyType = hasType && !hasDefault;\n  const onlyDefault = !hasType && hasDefault;\n  const typeFromObject = parseValueTypeConstant(typeObject.type);\n  const typeFromDefaultValue = parseValueTypeDefault(payload.typeObject.default);\n  if (onlyType) return typeFromObject;\n  if (onlyDefault) return typeFromDefaultValue;\n  if (typeFromObject !== typeFromDefaultValue) {\n    const propertyPath = controller ? `${controller}.${token}` : token;\n    throw new Error(`The specified default value for the Stimulus Value \"${propertyPath}\" must match the defined type \"${typeFromObject}\". The provided default value of \"${typeObject.default}\" is of type \"${typeFromDefaultValue}\".`);\n  }\n  if (fullObject) return typeFromObject;\n}\nfunction parseValueTypeDefinition(payload) {\n  const controller = payload.controller,\n    token = payload.token,\n    typeDefinition = payload.typeDefinition;\n  const typeObject = {\n    controller,\n    token,\n    typeObject: typeDefinition\n  };\n  const typeFromObject = parseValueTypeObject(typeObject);\n  const typeFromDefaultValue = parseValueTypeDefault(typeDefinition);\n  const typeFromConstant = parseValueTypeConstant(typeDefinition);\n  const type = typeFromObject || typeFromDefaultValue || typeFromConstant;\n  if (type) return type;\n  const propertyPath = controller ? `${controller}.${typeDefinition}` : token;\n  throw new Error(`Unknown value type \"${propertyPath}\" for \"${token}\" value`);\n}\nfunction defaultValueForDefinition(typeDefinition) {\n  const constant = parseValueTypeConstant(typeDefinition);\n  if (constant) return defaultValuesByType[constant];\n  const hasDefault = hasProperty(typeDefinition, \"default\");\n  const hasType = hasProperty(typeDefinition, \"type\");\n  const typeObject = typeDefinition;\n  if (hasDefault) return typeObject.default;\n  if (hasType) {\n    const type = typeObject.type;\n    const constantFromType = parseValueTypeConstant(type);\n    if (constantFromType) return defaultValuesByType[constantFromType];\n  }\n  return typeDefinition;\n}\nfunction valueDescriptorForTokenAndTypeDefinition(payload) {\n  const token = payload.token,\n    typeDefinition = payload.typeDefinition;\n  const key = `${dasherize(token)}-value`;\n  const type = parseValueTypeDefinition(payload);\n  return {\n    type,\n    key,\n    name: camelize(key),\n    get defaultValue() {\n      return defaultValueForDefinition(typeDefinition);\n    },\n    get hasCustomDefaultValue() {\n      return parseValueTypeDefault(typeDefinition) !== undefined;\n    },\n    reader: readers[type],\n    writer: writers[type] || writers.default\n  };\n}\nconst defaultValuesByType = {\n  get array() {\n    return [];\n  },\n  boolean: false,\n  number: 0,\n  get object() {\n    return {};\n  },\n  string: \"\"\n};\nconst readers = {\n  array(value) {\n    const array = JSON.parse(value);\n    if (!Array.isArray(array)) {\n      throw new TypeError(`expected value of type \"array\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(array)}\"`);\n    }\n    return array;\n  },\n  boolean(value) {\n    return !(value == \"0\" || String(value).toLowerCase() == \"false\");\n  },\n  number(value) {\n    return Number(value.replace(/_/g, \"\"));\n  },\n  object(value) {\n    const object = JSON.parse(value);\n    if (object === null || typeof object != \"object\" || Array.isArray(object)) {\n      throw new TypeError(`expected value of type \"object\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(object)}\"`);\n    }\n    return object;\n  },\n  string(value) {\n    return value;\n  }\n};\nconst writers = {\n  default: writeString,\n  array: writeJSON,\n  object: writeJSON\n};\nfunction writeJSON(value) {\n  return JSON.stringify(value);\n}\nfunction writeString(value) {\n  return `${value}`;\n}\nclass Controller {\n  constructor(context) {\n    this.context = context;\n  }\n  static get shouldLoad() {\n    return true;\n  }\n  static afterLoad(_identifier, _application) {\n    return;\n  }\n  get application() {\n    return this.context.application;\n  }\n  get scope() {\n    return this.context.scope;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get identifier() {\n    return this.scope.identifier;\n  }\n  get targets() {\n    return this.scope.targets;\n  }\n  get outlets() {\n    return this.scope.outlets;\n  }\n  get classes() {\n    return this.scope.classes;\n  }\n  get data() {\n    return this.scope.data;\n  }\n  initialize() {}\n  connect() {}\n  disconnect() {}\n  dispatch(eventName) {\n    let _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref19$target = _ref19.target,\n      target = _ref19$target === void 0 ? this.element : _ref19$target,\n      _ref19$detail = _ref19.detail,\n      detail = _ref19$detail === void 0 ? {} : _ref19$detail,\n      _ref19$prefix = _ref19.prefix,\n      prefix = _ref19$prefix === void 0 ? this.identifier : _ref19$prefix,\n      _ref19$bubbles = _ref19.bubbles,\n      bubbles = _ref19$bubbles === void 0 ? true : _ref19$bubbles,\n      _ref19$cancelable = _ref19.cancelable,\n      cancelable = _ref19$cancelable === void 0 ? true : _ref19$cancelable;\n    const type = prefix ? `${prefix}:${eventName}` : eventName;\n    const event = new CustomEvent(type, {\n      detail,\n      bubbles,\n      cancelable\n    });\n    target.dispatchEvent(event);\n    return event;\n  }\n}\nController.blessings = [ClassPropertiesBlessing, TargetPropertiesBlessing, ValuePropertiesBlessing, OutletPropertiesBlessing];\nController.targets = [];\nController.outlets = [];\nController.values = {};\nexport { Application, AttributeObserver, Context, Controller, ElementObserver, IndexedMultimap, Multimap, SelectorObserver, StringMapObserver, TokenListObserver, ValueListObserver, add, defaultSchema, del, fetch, prune };","(function (global, factory) {\n  typeof exports === \"object\" && typeof module !== \"undefined\" ? factory(exports) : typeof define === \"function\" && define.amd ? define([\"exports\"], factory) : factory(global.ActiveStorage = {});\n})(this, function (exports) {\n  \"use strict\";\n\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n  var sparkMd5 = createCommonjsModule(function (module, exports) {\n    (function (factory) {\n      {\n        module.exports = factory();\n      }\n    })(function (undefined) {\n      var hex_chr = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n      function md5cycle(x, k) {\n        var a = x[0],\n          b = x[1],\n          c = x[2],\n          d = x[3];\n        a += (b & c | ~b & d) + k[0] - 680876936 | 0;\n        a = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[1] - 389564586 | 0;\n        d = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[2] + 606105819 | 0;\n        c = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;\n        b = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[4] - 176418897 | 0;\n        a = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;\n        d = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;\n        c = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[7] - 45705983 | 0;\n        b = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;\n        a = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;\n        d = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[10] - 42063 | 0;\n        c = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;\n        b = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;\n        a = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[13] - 40341101 | 0;\n        d = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;\n        c = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;\n        b = (b << 22 | b >>> 10) + c | 0;\n        a += (b & d | c & ~d) + k[1] - 165796510 | 0;\n        a = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;\n        d = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[11] + 643717713 | 0;\n        c = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[0] - 373897302 | 0;\n        b = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[5] - 701558691 | 0;\n        a = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[10] + 38016083 | 0;\n        d = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[15] - 660478335 | 0;\n        c = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[4] - 405537848 | 0;\n        b = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[9] + 568446438 | 0;\n        a = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;\n        d = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[3] - 187363961 | 0;\n        c = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;\n        b = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;\n        a = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[2] - 51403784 | 0;\n        d = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;\n        c = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;\n        b = (b << 20 | b >>> 12) + c | 0;\n        a += (b ^ c ^ d) + k[5] - 378558 | 0;\n        a = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;\n        d = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;\n        c = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[14] - 35309556 | 0;\n        b = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;\n        a = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;\n        d = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[7] - 155497632 | 0;\n        c = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;\n        b = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[13] + 681279174 | 0;\n        a = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[0] - 358537222 | 0;\n        d = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[3] - 722521979 | 0;\n        c = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[6] + 76029189 | 0;\n        b = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[9] - 640364487 | 0;\n        a = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[12] - 421815835 | 0;\n        d = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[15] + 530742520 | 0;\n        c = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[2] - 995338651 | 0;\n        b = (b << 23 | b >>> 9) + c | 0;\n        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;\n        a = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;\n        d = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;\n        c = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;\n        b = (b << 21 | b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;\n        a = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;\n        d = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;\n        c = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;\n        b = (b << 21 | b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;\n        a = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;\n        d = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;\n        c = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;\n        b = (b << 21 | b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;\n        a = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;\n        d = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;\n        c = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;\n        b = (b << 21 | b >>> 11) + c | 0;\n        x[0] = a + x[0] | 0;\n        x[1] = b + x[1] | 0;\n        x[2] = c + x[2] | 0;\n        x[3] = d + x[3] | 0;\n      }\n      function md5blk(s) {\n        var md5blks = [],\n          i;\n        for (i = 0; i < 64; i += 4) {\n          md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n        }\n        return md5blks;\n      }\n      function md5blk_array(a) {\n        var md5blks = [],\n          i;\n        for (i = 0; i < 64; i += 4) {\n          md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);\n        }\n        return md5blks;\n      }\n      function md51(s) {\n        var n = s.length,\n          state = [1732584193, -271733879, -1732584194, 271733878],\n          i,\n          length,\n          tail,\n          tmp,\n          lo,\n          hi;\n        for (i = 64; i <= n; i += 64) {\n          md5cycle(state, md5blk(s.substring(i - 64, i)));\n        }\n        s = s.substring(i - 64);\n        length = s.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n          tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);\n        }\n        tail[i >> 2] |= 128 << (i % 4 << 3);\n        if (i > 55) {\n          md5cycle(state, tail);\n          for (i = 0; i < 16; i += 1) {\n            tail[i] = 0;\n          }\n        }\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n        tail[14] = lo;\n        tail[15] = hi;\n        md5cycle(state, tail);\n        return state;\n      }\n      function md51_array(a) {\n        var n = a.length,\n          state = [1732584193, -271733879, -1732584194, 271733878],\n          i,\n          length,\n          tail,\n          tmp,\n          lo,\n          hi;\n        for (i = 64; i <= n; i += 64) {\n          md5cycle(state, md5blk_array(a.subarray(i - 64, i)));\n        }\n        a = i - 64 < n ? a.subarray(i - 64) : new Uint8Array(0);\n        length = a.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n          tail[i >> 2] |= a[i] << (i % 4 << 3);\n        }\n        tail[i >> 2] |= 128 << (i % 4 << 3);\n        if (i > 55) {\n          md5cycle(state, tail);\n          for (i = 0; i < 16; i += 1) {\n            tail[i] = 0;\n          }\n        }\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n        tail[14] = lo;\n        tail[15] = hi;\n        md5cycle(state, tail);\n        return state;\n      }\n      function rhex(n) {\n        var s = \"\",\n          j;\n        for (j = 0; j < 4; j += 1) {\n          s += hex_chr[n >> j * 8 + 4 & 15] + hex_chr[n >> j * 8 & 15];\n        }\n        return s;\n      }\n      function hex(x) {\n        var i;\n        for (i = 0; i < x.length; i += 1) {\n          x[i] = rhex(x[i]);\n        }\n        return x.join(\"\");\n      }\n      if (hex(md51(\"hello\")) !== \"5d41402abc4b2a76b9719d911017c592\") ;\n      if (typeof ArrayBuffer !== \"undefined\" && !ArrayBuffer.prototype.slice) {\n        (function () {\n          function clamp(val, length) {\n            val = val | 0 || 0;\n            if (val < 0) {\n              return Math.max(val + length, 0);\n            }\n            return Math.min(val, length);\n          }\n          ArrayBuffer.prototype.slice = function (from, to) {\n            var length = this.byteLength,\n              begin = clamp(from, length),\n              end = length,\n              num,\n              target,\n              targetArray,\n              sourceArray;\n            if (to !== undefined) {\n              end = clamp(to, length);\n            }\n            if (begin > end) {\n              return new ArrayBuffer(0);\n            }\n            num = end - begin;\n            target = new ArrayBuffer(num);\n            targetArray = new Uint8Array(target);\n            sourceArray = new Uint8Array(this, begin, num);\n            targetArray.set(sourceArray);\n            return target;\n          };\n        })();\n      }\n      function toUtf8(str) {\n        if (/[\\u0080-\\uFFFF]/.test(str)) {\n          str = unescape(encodeURIComponent(str));\n        }\n        return str;\n      }\n      function utf8Str2ArrayBuffer(str, returnUInt8Array) {\n        var length = str.length,\n          buff = new ArrayBuffer(length),\n          arr = new Uint8Array(buff),\n          i;\n        for (i = 0; i < length; i += 1) {\n          arr[i] = str.charCodeAt(i);\n        }\n        return returnUInt8Array ? arr : buff;\n      }\n      function arrayBuffer2Utf8Str(buff) {\n        return String.fromCharCode.apply(null, new Uint8Array(buff));\n      }\n      function concatenateArrayBuffers(first, second, returnUInt8Array) {\n        var result = new Uint8Array(first.byteLength + second.byteLength);\n        result.set(new Uint8Array(first));\n        result.set(new Uint8Array(second), first.byteLength);\n        return returnUInt8Array ? result : result.buffer;\n      }\n      function hexToBinaryString(hex) {\n        var bytes = [],\n          length = hex.length,\n          x;\n        for (x = 0; x < length - 1; x += 2) {\n          bytes.push(parseInt(hex.substr(x, 2), 16));\n        }\n        return String.fromCharCode.apply(String, bytes);\n      }\n      function SparkMD5() {\n        this.reset();\n      }\n      SparkMD5.prototype.append = function (str) {\n        this.appendBinary(toUtf8(str));\n        return this;\n      };\n      SparkMD5.prototype.appendBinary = function (contents) {\n        this._buff += contents;\n        this._length += contents.length;\n        var length = this._buff.length,\n          i;\n        for (i = 64; i <= length; i += 64) {\n          md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));\n        }\n        this._buff = this._buff.substring(i - 64);\n        return this;\n      };\n      SparkMD5.prototype.end = function (raw) {\n        var buff = this._buff,\n          length = buff.length,\n          i,\n          tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n          ret;\n        for (i = 0; i < length; i += 1) {\n          tail[i >> 2] |= buff.charCodeAt(i) << (i % 4 << 3);\n        }\n        this._finish(tail, length);\n        ret = hex(this._hash);\n        if (raw) {\n          ret = hexToBinaryString(ret);\n        }\n        this.reset();\n        return ret;\n      };\n      SparkMD5.prototype.reset = function () {\n        this._buff = \"\";\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n        return this;\n      };\n      SparkMD5.prototype.getState = function () {\n        return {\n          buff: this._buff,\n          length: this._length,\n          hash: this._hash\n        };\n      };\n      SparkMD5.prototype.setState = function (state) {\n        this._buff = state.buff;\n        this._length = state.length;\n        this._hash = state.hash;\n        return this;\n      };\n      SparkMD5.prototype.destroy = function () {\n        delete this._hash;\n        delete this._buff;\n        delete this._length;\n      };\n      SparkMD5.prototype._finish = function (tail, length) {\n        var i = length,\n          tmp,\n          lo,\n          hi;\n        tail[i >> 2] |= 128 << (i % 4 << 3);\n        if (i > 55) {\n          md5cycle(this._hash, tail);\n          for (i = 0; i < 16; i += 1) {\n            tail[i] = 0;\n          }\n        }\n        tmp = this._length * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n        tail[14] = lo;\n        tail[15] = hi;\n        md5cycle(this._hash, tail);\n      };\n      SparkMD5.hash = function (str, raw) {\n        return SparkMD5.hashBinary(toUtf8(str), raw);\n      };\n      SparkMD5.hashBinary = function (content, raw) {\n        var hash = md51(content),\n          ret = hex(hash);\n        return raw ? hexToBinaryString(ret) : ret;\n      };\n      SparkMD5.ArrayBuffer = function () {\n        this.reset();\n      };\n      SparkMD5.ArrayBuffer.prototype.append = function (arr) {\n        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),\n          length = buff.length,\n          i;\n        this._length += arr.byteLength;\n        for (i = 64; i <= length; i += 64) {\n          md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));\n        }\n        this._buff = i - 64 < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);\n        return this;\n      };\n      SparkMD5.ArrayBuffer.prototype.end = function (raw) {\n        var buff = this._buff,\n          length = buff.length,\n          tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n          i,\n          ret;\n        for (i = 0; i < length; i += 1) {\n          tail[i >> 2] |= buff[i] << (i % 4 << 3);\n        }\n        this._finish(tail, length);\n        ret = hex(this._hash);\n        if (raw) {\n          ret = hexToBinaryString(ret);\n        }\n        this.reset();\n        return ret;\n      };\n      SparkMD5.ArrayBuffer.prototype.reset = function () {\n        this._buff = new Uint8Array(0);\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n        return this;\n      };\n      SparkMD5.ArrayBuffer.prototype.getState = function () {\n        var state = SparkMD5.prototype.getState.call(this);\n        state.buff = arrayBuffer2Utf8Str(state.buff);\n        return state;\n      };\n      SparkMD5.ArrayBuffer.prototype.setState = function (state) {\n        state.buff = utf8Str2ArrayBuffer(state.buff, true);\n        return SparkMD5.prototype.setState.call(this, state);\n      };\n      SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;\n      SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;\n      SparkMD5.ArrayBuffer.hash = function (arr, raw) {\n        var hash = md51_array(new Uint8Array(arr)),\n          ret = hex(hash);\n        return raw ? hexToBinaryString(ret) : ret;\n      };\n      return SparkMD5;\n    });\n  });\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n  var fileSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;\n  var FileChecksum = function () {\n    createClass(FileChecksum, null, [{\n      key: \"create\",\n      value: function create(file, callback) {\n        var instance = new FileChecksum(file);\n        instance.create(callback);\n      }\n    }]);\n    function FileChecksum(file) {\n      classCallCheck(this, FileChecksum);\n      this.file = file;\n      this.chunkSize = 2097152;\n      this.chunkCount = Math.ceil(this.file.size / this.chunkSize);\n      this.chunkIndex = 0;\n    }\n    createClass(FileChecksum, [{\n      key: \"create\",\n      value: function create(callback) {\n        var _this = this;\n        this.callback = callback;\n        this.md5Buffer = new sparkMd5.ArrayBuffer();\n        this.fileReader = new FileReader();\n        this.fileReader.addEventListener(\"load\", function (event) {\n          return _this.fileReaderDidLoad(event);\n        });\n        this.fileReader.addEventListener(\"error\", function (event) {\n          return _this.fileReaderDidError(event);\n        });\n        this.readNextChunk();\n      }\n    }, {\n      key: \"fileReaderDidLoad\",\n      value: function fileReaderDidLoad(event) {\n        this.md5Buffer.append(event.target.result);\n        if (!this.readNextChunk()) {\n          var binaryDigest = this.md5Buffer.end(true);\n          var base64digest = btoa(binaryDigest);\n          this.callback(null, base64digest);\n        }\n      }\n    }, {\n      key: \"fileReaderDidError\",\n      value: function fileReaderDidError(event) {\n        this.callback(\"Error reading \" + this.file.name);\n      }\n    }, {\n      key: \"readNextChunk\",\n      value: function readNextChunk() {\n        if (this.chunkIndex < this.chunkCount || this.chunkIndex == 0 && this.chunkCount == 0) {\n          var start = this.chunkIndex * this.chunkSize;\n          var end = Math.min(start + this.chunkSize, this.file.size);\n          var bytes = fileSlice.call(this.file, start, end);\n          this.fileReader.readAsArrayBuffer(bytes);\n          this.chunkIndex++;\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }]);\n    return FileChecksum;\n  }();\n  function getMetaValue(name) {\n    var element = findElement(document.head, 'meta[name=\"' + name + '\"]');\n    if (element) {\n      return element.getAttribute(\"content\");\n    }\n  }\n  function findElements(root, selector) {\n    if (typeof root == \"string\") {\n      selector = root;\n      root = document;\n    }\n    var elements = root.querySelectorAll(selector);\n    return toArray$1(elements);\n  }\n  function findElement(root, selector) {\n    if (typeof root == \"string\") {\n      selector = root;\n      root = document;\n    }\n    return root.querySelector(selector);\n  }\n  function dispatchEvent(element, type) {\n    var eventInit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var disabled = element.disabled;\n    var bubbles = eventInit.bubbles,\n      cancelable = eventInit.cancelable,\n      detail = eventInit.detail;\n    var event = document.createEvent(\"Event\");\n    event.initEvent(type, bubbles || true, cancelable || true);\n    event.detail = detail || {};\n    try {\n      element.disabled = false;\n      element.dispatchEvent(event);\n    } finally {\n      element.disabled = disabled;\n    }\n    return event;\n  }\n  function toArray$1(value) {\n    if (Array.isArray(value)) {\n      return value;\n    } else if (Array.from) {\n      return Array.from(value);\n    } else {\n      return [].slice.call(value);\n    }\n  }\n  var BlobRecord = function () {\n    function BlobRecord(file, checksum, url) {\n      var _this = this;\n      classCallCheck(this, BlobRecord);\n      this.file = file;\n      this.attributes = {\n        filename: file.name,\n        content_type: file.type || \"application/octet-stream\",\n        byte_size: file.size,\n        checksum: checksum\n      };\n      this.xhr = new XMLHttpRequest();\n      this.xhr.open(\"POST\", url, true);\n      this.xhr.responseType = \"json\";\n      this.xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      this.xhr.setRequestHeader(\"Accept\", \"application/json\");\n      this.xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var csrfToken = getMetaValue(\"csrf-token\");\n      if (csrfToken != undefined) {\n        this.xhr.setRequestHeader(\"X-CSRF-Token\", csrfToken);\n      }\n      this.xhr.addEventListener(\"load\", function (event) {\n        return _this.requestDidLoad(event);\n      });\n      this.xhr.addEventListener(\"error\", function (event) {\n        return _this.requestDidError(event);\n      });\n    }\n    createClass(BlobRecord, [{\n      key: \"create\",\n      value: function create(callback) {\n        this.callback = callback;\n        this.xhr.send(JSON.stringify({\n          blob: this.attributes\n        }));\n      }\n    }, {\n      key: \"requestDidLoad\",\n      value: function requestDidLoad(event) {\n        if (this.status >= 200 && this.status < 300) {\n          var response = this.response;\n          var direct_upload = response.direct_upload;\n          delete response.direct_upload;\n          this.attributes = response;\n          this.directUploadData = direct_upload;\n          this.callback(null, this.toJSON());\n        } else {\n          this.requestDidError(event);\n        }\n      }\n    }, {\n      key: \"requestDidError\",\n      value: function requestDidError(event) {\n        this.callback('Error creating Blob for \"' + this.file.name + '\". Status: ' + this.status);\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var result = {};\n        for (var key in this.attributes) {\n          result[key] = this.attributes[key];\n        }\n        return result;\n      }\n    }, {\n      key: \"status\",\n      get: function get$$1() {\n        return this.xhr.status;\n      }\n    }, {\n      key: \"response\",\n      get: function get$$1() {\n        var _xhr = this.xhr,\n          responseType = _xhr.responseType,\n          response = _xhr.response;\n        if (responseType == \"json\") {\n          return response;\n        } else {\n          return JSON.parse(response);\n        }\n      }\n    }]);\n    return BlobRecord;\n  }();\n  var BlobUpload = function () {\n    function BlobUpload(blob) {\n      var _this = this;\n      classCallCheck(this, BlobUpload);\n      this.blob = blob;\n      this.file = blob.file;\n      var _blob$directUploadDat = blob.directUploadData,\n        url = _blob$directUploadDat.url,\n        headers = _blob$directUploadDat.headers;\n      this.xhr = new XMLHttpRequest();\n      this.xhr.open(\"PUT\", url, true);\n      this.xhr.responseType = \"text\";\n      for (var key in headers) {\n        this.xhr.setRequestHeader(key, headers[key]);\n      }\n      this.xhr.addEventListener(\"load\", function (event) {\n        return _this.requestDidLoad(event);\n      });\n      this.xhr.addEventListener(\"error\", function (event) {\n        return _this.requestDidError(event);\n      });\n    }\n    createClass(BlobUpload, [{\n      key: \"create\",\n      value: function create(callback) {\n        this.callback = callback;\n        this.xhr.send(this.file.slice());\n      }\n    }, {\n      key: \"requestDidLoad\",\n      value: function requestDidLoad(event) {\n        var _xhr = this.xhr,\n          status = _xhr.status,\n          response = _xhr.response;\n        if (status >= 200 && status < 300) {\n          this.callback(null, response);\n        } else {\n          this.requestDidError(event);\n        }\n      }\n    }, {\n      key: \"requestDidError\",\n      value: function requestDidError(event) {\n        this.callback('Error storing \"' + this.file.name + '\". Status: ' + this.xhr.status);\n      }\n    }]);\n    return BlobUpload;\n  }();\n  var id = 0;\n  var DirectUpload = function () {\n    function DirectUpload(file, url, delegate) {\n      classCallCheck(this, DirectUpload);\n      this.id = ++id;\n      this.file = file;\n      this.url = url;\n      this.delegate = delegate;\n    }\n    createClass(DirectUpload, [{\n      key: \"create\",\n      value: function create(callback) {\n        var _this = this;\n        FileChecksum.create(this.file, function (error, checksum) {\n          if (error) {\n            callback(error);\n            return;\n          }\n          var blob = new BlobRecord(_this.file, checksum, _this.url);\n          notify(_this.delegate, \"directUploadWillCreateBlobWithXHR\", blob.xhr);\n          blob.create(function (error) {\n            if (error) {\n              callback(error);\n            } else {\n              var upload = new BlobUpload(blob);\n              notify(_this.delegate, \"directUploadWillStoreFileWithXHR\", upload.xhr);\n              upload.create(function (error) {\n                if (error) {\n                  callback(error);\n                } else {\n                  callback(null, blob.toJSON());\n                }\n              });\n            }\n          });\n        });\n      }\n    }]);\n    return DirectUpload;\n  }();\n  function notify(object, methodName) {\n    if (object && typeof object[methodName] == \"function\") {\n      for (var _len = arguments.length, messages = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        messages[_key - 2] = arguments[_key];\n      }\n      return object[methodName].apply(object, messages);\n    }\n  }\n  var DirectUploadController = function () {\n    function DirectUploadController(input, file) {\n      classCallCheck(this, DirectUploadController);\n      this.input = input;\n      this.file = file;\n      this.directUpload = new DirectUpload(this.file, this.url, this);\n      this.dispatch(\"initialize\");\n    }\n    createClass(DirectUploadController, [{\n      key: \"start\",\n      value: function start(callback) {\n        var _this = this;\n        var hiddenInput = document.createElement(\"input\");\n        hiddenInput.type = \"hidden\";\n        hiddenInput.name = this.input.name;\n        this.input.insertAdjacentElement(\"beforebegin\", hiddenInput);\n        this.dispatch(\"start\");\n        this.directUpload.create(function (error, attributes) {\n          if (error) {\n            hiddenInput.parentNode.removeChild(hiddenInput);\n            _this.dispatchError(error);\n          } else {\n            hiddenInput.value = attributes.signed_id;\n          }\n          _this.dispatch(\"end\");\n          callback(error);\n        });\n      }\n    }, {\n      key: \"uploadRequestDidProgress\",\n      value: function uploadRequestDidProgress(event) {\n        var progress = event.loaded / event.total * 100;\n        if (progress) {\n          this.dispatch(\"progress\", {\n            progress: progress\n          });\n        }\n      }\n    }, {\n      key: \"dispatch\",\n      value: function dispatch(name) {\n        var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        detail.file = this.file;\n        detail.id = this.directUpload.id;\n        return dispatchEvent(this.input, \"direct-upload:\" + name, {\n          detail: detail\n        });\n      }\n    }, {\n      key: \"dispatchError\",\n      value: function dispatchError(error) {\n        var event = this.dispatch(\"error\", {\n          error: error\n        });\n        if (!event.defaultPrevented) {\n          alert(error);\n        }\n      }\n    }, {\n      key: \"directUploadWillCreateBlobWithXHR\",\n      value: function directUploadWillCreateBlobWithXHR(xhr) {\n        this.dispatch(\"before-blob-request\", {\n          xhr: xhr\n        });\n      }\n    }, {\n      key: \"directUploadWillStoreFileWithXHR\",\n      value: function directUploadWillStoreFileWithXHR(xhr) {\n        var _this2 = this;\n        this.dispatch(\"before-storage-request\", {\n          xhr: xhr\n        });\n        xhr.upload.addEventListener(\"progress\", function (event) {\n          return _this2.uploadRequestDidProgress(event);\n        });\n      }\n    }, {\n      key: \"url\",\n      get: function get$$1() {\n        return this.input.getAttribute(\"data-direct-upload-url\");\n      }\n    }]);\n    return DirectUploadController;\n  }();\n  var inputSelector = \"input[type=file][data-direct-upload-url]:not([disabled])\";\n  var DirectUploadsController = function () {\n    function DirectUploadsController(form) {\n      classCallCheck(this, DirectUploadsController);\n      this.form = form;\n      this.inputs = findElements(form, inputSelector).filter(function (input) {\n        return input.files.length;\n      });\n    }\n    createClass(DirectUploadsController, [{\n      key: \"start\",\n      value: function start(callback) {\n        var _this = this;\n        var controllers = this.createDirectUploadControllers();\n        var startNextController = function startNextController() {\n          var controller = controllers.shift();\n          if (controller) {\n            controller.start(function (error) {\n              if (error) {\n                callback(error);\n                _this.dispatch(\"end\");\n              } else {\n                startNextController();\n              }\n            });\n          } else {\n            callback();\n            _this.dispatch(\"end\");\n          }\n        };\n        this.dispatch(\"start\");\n        startNextController();\n      }\n    }, {\n      key: \"createDirectUploadControllers\",\n      value: function createDirectUploadControllers() {\n        var controllers = [];\n        this.inputs.forEach(function (input) {\n          toArray$1(input.files).forEach(function (file) {\n            var controller = new DirectUploadController(input, file);\n            controllers.push(controller);\n          });\n        });\n        return controllers;\n      }\n    }, {\n      key: \"dispatch\",\n      value: function dispatch(name) {\n        var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return dispatchEvent(this.form, \"direct-uploads:\" + name, {\n          detail: detail\n        });\n      }\n    }]);\n    return DirectUploadsController;\n  }();\n  var processingAttribute = \"data-direct-uploads-processing\";\n  var submitButtonsByForm = new WeakMap();\n  var started = false;\n  function start() {\n    if (!started) {\n      started = true;\n      document.addEventListener(\"click\", didClick, true);\n      document.addEventListener(\"submit\", didSubmitForm);\n      document.addEventListener(\"ajax:before\", didSubmitRemoteElement);\n    }\n  }\n  function didClick(event) {\n    var target = event.target;\n    if ((target.tagName == \"INPUT\" || target.tagName == \"BUTTON\") && target.type == \"submit\" && target.form) {\n      submitButtonsByForm.set(target.form, target);\n    }\n  }\n  function didSubmitForm(event) {\n    handleFormSubmissionEvent(event);\n  }\n  function didSubmitRemoteElement(event) {\n    if (event.target.tagName == \"FORM\") {\n      handleFormSubmissionEvent(event);\n    }\n  }\n  function handleFormSubmissionEvent(event) {\n    var form = event.target;\n    if (form.hasAttribute(processingAttribute)) {\n      event.preventDefault();\n      return;\n    }\n    var controller = new DirectUploadsController(form);\n    var inputs = controller.inputs;\n    if (inputs.length) {\n      event.preventDefault();\n      form.setAttribute(processingAttribute, \"\");\n      inputs.forEach(disable);\n      controller.start(function (error) {\n        form.removeAttribute(processingAttribute);\n        if (error) {\n          inputs.forEach(enable);\n        } else {\n          submitForm(form);\n        }\n      });\n    }\n  }\n  function submitForm(form) {\n    var button = submitButtonsByForm.get(form) || findElement(form, \"input[type=submit], button[type=submit]\");\n    if (button) {\n      var _button = button,\n        disabled = _button.disabled;\n      button.disabled = false;\n      button.focus();\n      button.click();\n      button.disabled = disabled;\n    } else {\n      button = document.createElement(\"input\");\n      button.type = \"submit\";\n      button.style.display = \"none\";\n      form.appendChild(button);\n      button.click();\n      form.removeChild(button);\n    }\n    submitButtonsByForm.delete(form);\n  }\n  function disable(input) {\n    input.disabled = true;\n  }\n  function enable(input) {\n    input.disabled = false;\n  }\n  function autostart() {\n    if (window.ActiveStorage) {\n      start();\n    }\n  }\n  setTimeout(autostart, 1);\n  exports.start = start;\n  exports.DirectUpload = DirectUpload;\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n});","/*\nUnobtrusive JavaScript\nhttps://github.com/rails/rails/blob/main/actionview/app/assets/javascripts\nReleased under the MIT license\n */;\n(function () {\n  var context = this;\n  (function () {\n    (function () {\n      this.Rails = {\n        linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]',\n        buttonClickSelector: {\n          selector: 'button[data-remote]:not([form]), button[data-confirm]:not([form])',\n          exclude: 'form button'\n        },\n        inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',\n        formSubmitSelector: 'form:not([data-turbo=true])',\n        formInputClickSelector: 'form:not([data-turbo=true]) input[type=submit], form:not([data-turbo=true]) input[type=image], form:not([data-turbo=true]) button[type=submit], form:not([data-turbo=true]) button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])',\n        formDisableSelector: 'input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled',\n        formEnableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled',\n        fileInputSelector: 'input[name][type=file]:not([disabled])',\n        linkDisableSelector: 'a[data-disable-with], a[data-disable]',\n        buttonDisableSelector: 'button[data-remote][data-disable-with], button[data-remote][data-disable]'\n      };\n    }).call(this);\n  }).call(context);\n  var Rails = context.Rails;\n  (function () {\n    (function () {\n      var nonce;\n      nonce = null;\n      Rails.loadCSPNonce = function () {\n        var ref;\n        return nonce = (ref = document.querySelector(\"meta[name=csp-nonce]\")) != null ? ref.content : void 0;\n      };\n      Rails.cspNonce = function () {\n        return nonce != null ? nonce : Rails.loadCSPNonce();\n      };\n    }).call(this);\n    (function () {\n      var expando, m;\n      m = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;\n      Rails.matches = function (element, selector) {\n        if (selector.exclude != null) {\n          return m.call(element, selector.selector) && !m.call(element, selector.exclude);\n        } else {\n          return m.call(element, selector);\n        }\n      };\n      expando = '_ujsData';\n      Rails.getData = function (element, key) {\n        var ref;\n        return (ref = element[expando]) != null ? ref[key] : void 0;\n      };\n      Rails.setData = function (element, key, value) {\n        if (element[expando] == null) {\n          element[expando] = {};\n        }\n        return element[expando][key] = value;\n      };\n      Rails.isContentEditable = function (element) {\n        var isEditable;\n        isEditable = false;\n        while (true) {\n          if (element.isContentEditable) {\n            isEditable = true;\n            break;\n          }\n          element = element.parentElement;\n          if (!element) {\n            break;\n          }\n        }\n        return isEditable;\n      };\n      Rails.$ = function (selector) {\n        return Array.prototype.slice.call(document.querySelectorAll(selector));\n      };\n    }).call(this);\n    (function () {\n      var $, csrfParam, csrfToken;\n      $ = Rails.$;\n      csrfToken = Rails.csrfToken = function () {\n        var meta;\n        meta = document.querySelector('meta[name=csrf-token]');\n        return meta && meta.content;\n      };\n      csrfParam = Rails.csrfParam = function () {\n        var meta;\n        meta = document.querySelector('meta[name=csrf-param]');\n        return meta && meta.content;\n      };\n      Rails.CSRFProtection = function (xhr) {\n        var token;\n        token = csrfToken();\n        if (token != null) {\n          return xhr.setRequestHeader('X-CSRF-Token', token);\n        }\n      };\n      Rails.refreshCSRFTokens = function () {\n        var param, token;\n        token = csrfToken();\n        param = csrfParam();\n        if (token != null && param != null) {\n          return $('form input[name=\"' + param + '\"]').forEach(function (input) {\n            return input.value = token;\n          });\n        }\n      };\n    }).call(this);\n    (function () {\n      var CustomEvent, fire, matches, preventDefault;\n      matches = Rails.matches;\n      CustomEvent = window.CustomEvent;\n      if (typeof CustomEvent !== 'function') {\n        CustomEvent = function (event, params) {\n          var evt;\n          evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n          return evt;\n        };\n        CustomEvent.prototype = window.Event.prototype;\n        preventDefault = CustomEvent.prototype.preventDefault;\n        CustomEvent.prototype.preventDefault = function () {\n          var result;\n          result = preventDefault.call(this);\n          if (this.cancelable && !this.defaultPrevented) {\n            Object.defineProperty(this, 'defaultPrevented', {\n              get: function () {\n                return true;\n              }\n            });\n          }\n          return result;\n        };\n      }\n      fire = Rails.fire = function (obj, name, data) {\n        var event;\n        event = new CustomEvent(name, {\n          bubbles: true,\n          cancelable: true,\n          detail: data\n        });\n        obj.dispatchEvent(event);\n        return !event.defaultPrevented;\n      };\n      Rails.stopEverything = function (e) {\n        fire(e.target, 'ujs:everythingStopped');\n        e.preventDefault();\n        e.stopPropagation();\n        return e.stopImmediatePropagation();\n      };\n      Rails.delegate = function (element, selector, eventType, handler) {\n        return element.addEventListener(eventType, function (e) {\n          var target;\n          target = e.target;\n          while (!(!(target instanceof Element) || matches(target, selector))) {\n            target = target.parentNode;\n          }\n          if (target instanceof Element && handler.call(target, e) === false) {\n            e.preventDefault();\n            return e.stopPropagation();\n          }\n        });\n      };\n    }).call(this);\n    (function () {\n      var AcceptHeaders, CSRFProtection, createXHR, cspNonce, fire, prepareOptions, processResponse;\n      cspNonce = Rails.cspNonce, CSRFProtection = Rails.CSRFProtection, fire = Rails.fire;\n      AcceptHeaders = {\n        '*': '*/*',\n        text: 'text/plain',\n        html: 'text/html',\n        xml: 'application/xml, text/xml',\n        json: 'application/json, text/javascript',\n        script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript'\n      };\n      Rails.ajax = function (options) {\n        var xhr;\n        options = prepareOptions(options);\n        xhr = createXHR(options, function () {\n          var ref, response;\n          response = processResponse((ref = xhr.response) != null ? ref : xhr.responseText, xhr.getResponseHeader('Content-Type'));\n          if (Math.floor(xhr.status / 100) === 2) {\n            if (typeof options.success === \"function\") {\n              options.success(response, xhr.statusText, xhr);\n            }\n          } else {\n            if (typeof options.error === \"function\") {\n              options.error(response, xhr.statusText, xhr);\n            }\n          }\n          return typeof options.complete === \"function\" ? options.complete(xhr, xhr.statusText) : void 0;\n        });\n        if (options.beforeSend != null && !options.beforeSend(xhr, options)) {\n          return false;\n        }\n        if (xhr.readyState === XMLHttpRequest.OPENED) {\n          return xhr.send(options.data);\n        }\n      };\n      prepareOptions = function (options) {\n        options.url = options.url || location.href;\n        options.type = options.type.toUpperCase();\n        if (options.type === 'GET' && options.data) {\n          if (options.url.indexOf('?') < 0) {\n            options.url += '?' + options.data;\n          } else {\n            options.url += '&' + options.data;\n          }\n        }\n        if (AcceptHeaders[options.dataType] == null) {\n          options.dataType = '*';\n        }\n        options.accept = AcceptHeaders[options.dataType];\n        if (options.dataType !== '*') {\n          options.accept += ', */*; q=0.01';\n        }\n        return options;\n      };\n      createXHR = function (options, done) {\n        var xhr;\n        xhr = new XMLHttpRequest();\n        xhr.open(options.type, options.url, true);\n        xhr.setRequestHeader('Accept', options.accept);\n        if (typeof options.data === 'string') {\n          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n        }\n        if (!options.crossDomain) {\n          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n          CSRFProtection(xhr);\n        }\n        xhr.withCredentials = !!options.withCredentials;\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === XMLHttpRequest.DONE) {\n            return done(xhr);\n          }\n        };\n        return xhr;\n      };\n      processResponse = function (response, type) {\n        var parser, script;\n        if (typeof response === 'string' && typeof type === 'string') {\n          if (type.match(/\\bjson\\b/)) {\n            try {\n              response = JSON.parse(response);\n            } catch (error) {}\n          } else if (type.match(/\\b(?:java|ecma)script\\b/)) {\n            script = document.createElement('script');\n            script.setAttribute('nonce', cspNonce());\n            script.text = response;\n            document.head.appendChild(script).parentNode.removeChild(script);\n          } else if (type.match(/\\b(xml|html|svg)\\b/)) {\n            parser = new DOMParser();\n            type = type.replace(/;.+/, '');\n            try {\n              response = parser.parseFromString(response, type);\n            } catch (error) {}\n          }\n        }\n        return response;\n      };\n      Rails.href = function (element) {\n        return element.href;\n      };\n      Rails.isCrossDomain = function (url) {\n        var e, originAnchor, urlAnchor;\n        originAnchor = document.createElement('a');\n        originAnchor.href = location.href;\n        urlAnchor = document.createElement('a');\n        try {\n          urlAnchor.href = url;\n          return !((!urlAnchor.protocol || urlAnchor.protocol === ':') && !urlAnchor.host || originAnchor.protocol + '//' + originAnchor.host === urlAnchor.protocol + '//' + urlAnchor.host);\n        } catch (error) {\n          e = error;\n          return true;\n        }\n      };\n    }).call(this);\n    (function () {\n      var matches, toArray;\n      matches = Rails.matches;\n      toArray = function (e) {\n        return Array.prototype.slice.call(e);\n      };\n      Rails.serializeElement = function (element, additionalParam) {\n        var inputs, params;\n        inputs = [element];\n        if (matches(element, 'form')) {\n          inputs = toArray(element.elements);\n        }\n        params = [];\n        inputs.forEach(function (input) {\n          if (!input.name || input.disabled) {\n            return;\n          }\n          if (matches(input, 'fieldset[disabled] *')) {\n            return;\n          }\n          if (matches(input, 'select')) {\n            return toArray(input.options).forEach(function (option) {\n              if (option.selected) {\n                return params.push({\n                  name: input.name,\n                  value: option.value\n                });\n              }\n            });\n          } else if (input.checked || ['radio', 'checkbox', 'submit'].indexOf(input.type) === -1) {\n            return params.push({\n              name: input.name,\n              value: input.value\n            });\n          }\n        });\n        if (additionalParam) {\n          params.push(additionalParam);\n        }\n        return params.map(function (param) {\n          if (param.name != null) {\n            return encodeURIComponent(param.name) + \"=\" + encodeURIComponent(param.value);\n          } else {\n            return param;\n          }\n        }).join('&');\n      };\n      Rails.formElements = function (form, selector) {\n        if (matches(form, 'form')) {\n          return toArray(form.elements).filter(function (el) {\n            return matches(el, selector);\n          });\n        } else {\n          return toArray(form.querySelectorAll(selector));\n        }\n      };\n    }).call(this);\n    (function () {\n      var allowAction, fire, stopEverything;\n      fire = Rails.fire, stopEverything = Rails.stopEverything;\n      Rails.handleConfirm = function (e) {\n        if (!allowAction(this)) {\n          return stopEverything(e);\n        }\n      };\n      Rails.confirm = function (message, element) {\n        return confirm(message);\n      };\n      allowAction = function (element) {\n        var answer, callback, message;\n        message = element.getAttribute('data-confirm');\n        if (!message) {\n          return true;\n        }\n        answer = false;\n        if (fire(element, 'confirm')) {\n          try {\n            answer = Rails.confirm(message, element);\n          } catch (error) {}\n          callback = fire(element, 'confirm:complete', [answer]);\n        }\n        return answer && callback;\n      };\n    }).call(this);\n    (function () {\n      var disableFormElement, disableFormElements, disableLinkElement, enableFormElement, enableFormElements, enableLinkElement, formElements, getData, isContentEditable, isXhrRedirect, matches, setData, stopEverything;\n      matches = Rails.matches, getData = Rails.getData, setData = Rails.setData, stopEverything = Rails.stopEverything, formElements = Rails.formElements, isContentEditable = Rails.isContentEditable;\n      Rails.handleDisabledElement = function (e) {\n        var element;\n        element = this;\n        if (element.disabled) {\n          return stopEverything(e);\n        }\n      };\n      Rails.enableElement = function (e) {\n        var element;\n        if (e instanceof Event) {\n          if (isXhrRedirect(e)) {\n            return;\n          }\n          element = e.target;\n        } else {\n          element = e;\n        }\n        if (isContentEditable(element)) {\n          return;\n        }\n        if (matches(element, Rails.linkDisableSelector)) {\n          return enableLinkElement(element);\n        } else if (matches(element, Rails.buttonDisableSelector) || matches(element, Rails.formEnableSelector)) {\n          return enableFormElement(element);\n        } else if (matches(element, Rails.formSubmitSelector)) {\n          return enableFormElements(element);\n        }\n      };\n      Rails.disableElement = function (e) {\n        var element;\n        element = e instanceof Event ? e.target : e;\n        if (isContentEditable(element)) {\n          return;\n        }\n        if (matches(element, Rails.linkDisableSelector)) {\n          return disableLinkElement(element);\n        } else if (matches(element, Rails.buttonDisableSelector) || matches(element, Rails.formDisableSelector)) {\n          return disableFormElement(element);\n        } else if (matches(element, Rails.formSubmitSelector)) {\n          return disableFormElements(element);\n        }\n      };\n      disableLinkElement = function (element) {\n        var replacement;\n        if (getData(element, 'ujs:disabled')) {\n          return;\n        }\n        replacement = element.getAttribute('data-disable-with');\n        if (replacement != null) {\n          setData(element, 'ujs:enable-with', element.innerHTML);\n          element.innerHTML = replacement;\n        }\n        element.addEventListener('click', stopEverything);\n        return setData(element, 'ujs:disabled', true);\n      };\n      enableLinkElement = function (element) {\n        var originalText;\n        originalText = getData(element, 'ujs:enable-with');\n        if (originalText != null) {\n          element.innerHTML = originalText;\n          setData(element, 'ujs:enable-with', null);\n        }\n        element.removeEventListener('click', stopEverything);\n        return setData(element, 'ujs:disabled', null);\n      };\n      disableFormElements = function (form) {\n        return formElements(form, Rails.formDisableSelector).forEach(disableFormElement);\n      };\n      disableFormElement = function (element) {\n        var replacement;\n        if (getData(element, 'ujs:disabled')) {\n          return;\n        }\n        replacement = element.getAttribute('data-disable-with');\n        if (replacement != null) {\n          if (matches(element, 'button')) {\n            setData(element, 'ujs:enable-with', element.innerHTML);\n            element.innerHTML = replacement;\n          } else {\n            setData(element, 'ujs:enable-with', element.value);\n            element.value = replacement;\n          }\n        }\n        element.disabled = true;\n        return setData(element, 'ujs:disabled', true);\n      };\n      enableFormElements = function (form) {\n        return formElements(form, Rails.formEnableSelector).forEach(enableFormElement);\n      };\n      enableFormElement = function (element) {\n        var originalText;\n        originalText = getData(element, 'ujs:enable-with');\n        if (originalText != null) {\n          if (matches(element, 'button')) {\n            element.innerHTML = originalText;\n          } else {\n            element.value = originalText;\n          }\n          setData(element, 'ujs:enable-with', null);\n        }\n        element.disabled = false;\n        return setData(element, 'ujs:disabled', null);\n      };\n      isXhrRedirect = function (event) {\n        var ref, xhr;\n        xhr = (ref = event.detail) != null ? ref[0] : void 0;\n        return (xhr != null ? xhr.getResponseHeader(\"X-Xhr-Redirect\") : void 0) != null;\n      };\n    }).call(this);\n    (function () {\n      var isContentEditable, stopEverything;\n      stopEverything = Rails.stopEverything;\n      isContentEditable = Rails.isContentEditable;\n      Rails.handleMethod = function (e) {\n        var csrfParam, csrfToken, form, formContent, href, link, method;\n        link = this;\n        method = link.getAttribute('data-method');\n        if (!method) {\n          return;\n        }\n        if (isContentEditable(this)) {\n          return;\n        }\n        href = Rails.href(link);\n        csrfToken = Rails.csrfToken();\n        csrfParam = Rails.csrfParam();\n        form = document.createElement('form');\n        formContent = \"<input name='_method' value='\" + method + \"' type='hidden' />\";\n        if (csrfParam != null && csrfToken != null && !Rails.isCrossDomain(href)) {\n          formContent += \"<input name='\" + csrfParam + \"' value='\" + csrfToken + \"' type='hidden' />\";\n        }\n        formContent += '<input type=\"submit\" />';\n        form.method = 'post';\n        form.action = href;\n        form.target = link.target;\n        form.innerHTML = formContent;\n        form.style.display = 'none';\n        document.body.appendChild(form);\n        form.querySelector('[type=\"submit\"]').click();\n        return stopEverything(e);\n      };\n    }).call(this);\n    (function () {\n      var ajax,\n        fire,\n        getData,\n        isContentEditable,\n        isCrossDomain,\n        isRemote,\n        matches,\n        serializeElement,\n        setData,\n        stopEverything,\n        slice = [].slice;\n      matches = Rails.matches, getData = Rails.getData, setData = Rails.setData, fire = Rails.fire, stopEverything = Rails.stopEverything, ajax = Rails.ajax, isCrossDomain = Rails.isCrossDomain, serializeElement = Rails.serializeElement, isContentEditable = Rails.isContentEditable;\n      isRemote = function (element) {\n        var value;\n        value = element.getAttribute('data-remote');\n        return value != null && value !== 'false';\n      };\n      Rails.handleRemote = function (e) {\n        var button, data, dataType, element, method, url, withCredentials;\n        element = this;\n        if (!isRemote(element)) {\n          return true;\n        }\n        if (!fire(element, 'ajax:before')) {\n          fire(element, 'ajax:stopped');\n          return false;\n        }\n        if (isContentEditable(element)) {\n          fire(element, 'ajax:stopped');\n          return false;\n        }\n        withCredentials = element.getAttribute('data-with-credentials');\n        dataType = element.getAttribute('data-type') || 'script';\n        if (matches(element, Rails.formSubmitSelector)) {\n          button = getData(element, 'ujs:submit-button');\n          method = getData(element, 'ujs:submit-button-formmethod') || element.method;\n          url = getData(element, 'ujs:submit-button-formaction') || element.getAttribute('action') || location.href;\n          if (method.toUpperCase() === 'GET') {\n            url = url.replace(/\\?.*$/, '');\n          }\n          if (element.enctype === 'multipart/form-data') {\n            data = new FormData(element);\n            if (button != null) {\n              data.append(button.name, button.value);\n            }\n          } else {\n            data = serializeElement(element, button);\n          }\n          setData(element, 'ujs:submit-button', null);\n          setData(element, 'ujs:submit-button-formmethod', null);\n          setData(element, 'ujs:submit-button-formaction', null);\n        } else if (matches(element, Rails.buttonClickSelector) || matches(element, Rails.inputChangeSelector)) {\n          method = element.getAttribute('data-method');\n          url = element.getAttribute('data-url');\n          data = serializeElement(element, element.getAttribute('data-params'));\n        } else {\n          method = element.getAttribute('data-method');\n          url = Rails.href(element);\n          data = element.getAttribute('data-params');\n        }\n        ajax({\n          type: method || 'GET',\n          url: url,\n          data: data,\n          dataType: dataType,\n          beforeSend: function (xhr, options) {\n            if (fire(element, 'ajax:beforeSend', [xhr, options])) {\n              return fire(element, 'ajax:send', [xhr]);\n            } else {\n              fire(element, 'ajax:stopped');\n              return false;\n            }\n          },\n          success: function () {\n            var args;\n            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n            return fire(element, 'ajax:success', args);\n          },\n          error: function () {\n            var args;\n            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n            return fire(element, 'ajax:error', args);\n          },\n          complete: function () {\n            var args;\n            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n            return fire(element, 'ajax:complete', args);\n          },\n          crossDomain: isCrossDomain(url),\n          withCredentials: withCredentials != null && withCredentials !== 'false'\n        });\n        return stopEverything(e);\n      };\n      Rails.formSubmitButtonClick = function (e) {\n        var button, form;\n        button = this;\n        form = button.form;\n        if (!form) {\n          return;\n        }\n        if (button.name) {\n          setData(form, 'ujs:submit-button', {\n            name: button.name,\n            value: button.value\n          });\n        }\n        setData(form, 'ujs:formnovalidate-button', button.formNoValidate);\n        setData(form, 'ujs:submit-button-formaction', button.getAttribute('formaction'));\n        return setData(form, 'ujs:submit-button-formmethod', button.getAttribute('formmethod'));\n      };\n      Rails.preventInsignificantClick = function (e) {\n        var data, insignificantMetaClick, link, metaClick, method, nonPrimaryMouseClick;\n        link = this;\n        method = (link.getAttribute('data-method') || 'GET').toUpperCase();\n        data = link.getAttribute('data-params');\n        metaClick = e.metaKey || e.ctrlKey;\n        insignificantMetaClick = metaClick && method === 'GET' && !data;\n        nonPrimaryMouseClick = e.button != null && e.button !== 0;\n        if (nonPrimaryMouseClick || insignificantMetaClick) {\n          return e.stopImmediatePropagation();\n        }\n      };\n    }).call(this);\n    (function () {\n      var $, CSRFProtection, delegate, disableElement, enableElement, fire, formSubmitButtonClick, getData, handleConfirm, handleDisabledElement, handleMethod, handleRemote, loadCSPNonce, preventInsignificantClick, refreshCSRFTokens;\n      fire = Rails.fire, delegate = Rails.delegate, getData = Rails.getData, $ = Rails.$, refreshCSRFTokens = Rails.refreshCSRFTokens, CSRFProtection = Rails.CSRFProtection, loadCSPNonce = Rails.loadCSPNonce, enableElement = Rails.enableElement, disableElement = Rails.disableElement, handleDisabledElement = Rails.handleDisabledElement, handleConfirm = Rails.handleConfirm, preventInsignificantClick = Rails.preventInsignificantClick, handleRemote = Rails.handleRemote, formSubmitButtonClick = Rails.formSubmitButtonClick, handleMethod = Rails.handleMethod;\n      if (typeof jQuery !== \"undefined\" && jQuery !== null && jQuery.ajax != null) {\n        if (jQuery.rails) {\n          throw new Error('If you load both jquery_ujs and rails-ujs, use rails-ujs only.');\n        }\n        jQuery.rails = Rails;\n        jQuery.ajaxPrefilter(function (options, originalOptions, xhr) {\n          if (!options.crossDomain) {\n            return CSRFProtection(xhr);\n          }\n        });\n      }\n      Rails.start = function () {\n        if (window._rails_loaded) {\n          throw new Error('rails-ujs has already been loaded!');\n        }\n        window.addEventListener('pageshow', function () {\n          $(Rails.formEnableSelector).forEach(function (el) {\n            if (getData(el, 'ujs:disabled')) {\n              return enableElement(el);\n            }\n          });\n          return $(Rails.linkDisableSelector).forEach(function (el) {\n            if (getData(el, 'ujs:disabled')) {\n              return enableElement(el);\n            }\n          });\n        });\n        delegate(document, Rails.linkDisableSelector, 'ajax:complete', enableElement);\n        delegate(document, Rails.linkDisableSelector, 'ajax:stopped', enableElement);\n        delegate(document, Rails.buttonDisableSelector, 'ajax:complete', enableElement);\n        delegate(document, Rails.buttonDisableSelector, 'ajax:stopped', enableElement);\n        delegate(document, Rails.linkClickSelector, 'click', preventInsignificantClick);\n        delegate(document, Rails.linkClickSelector, 'click', handleDisabledElement);\n        delegate(document, Rails.linkClickSelector, 'click', handleConfirm);\n        delegate(document, Rails.linkClickSelector, 'click', disableElement);\n        delegate(document, Rails.linkClickSelector, 'click', handleRemote);\n        delegate(document, Rails.linkClickSelector, 'click', handleMethod);\n        delegate(document, Rails.buttonClickSelector, 'click', preventInsignificantClick);\n        delegate(document, Rails.buttonClickSelector, 'click', handleDisabledElement);\n        delegate(document, Rails.buttonClickSelector, 'click', handleConfirm);\n        delegate(document, Rails.buttonClickSelector, 'click', disableElement);\n        delegate(document, Rails.buttonClickSelector, 'click', handleRemote);\n        delegate(document, Rails.inputChangeSelector, 'change', handleDisabledElement);\n        delegate(document, Rails.inputChangeSelector, 'change', handleConfirm);\n        delegate(document, Rails.inputChangeSelector, 'change', handleRemote);\n        delegate(document, Rails.formSubmitSelector, 'submit', handleDisabledElement);\n        delegate(document, Rails.formSubmitSelector, 'submit', handleConfirm);\n        delegate(document, Rails.formSubmitSelector, 'submit', handleRemote);\n        delegate(document, Rails.formSubmitSelector, 'submit', function (e) {\n          return setTimeout(function () {\n            return disableElement(e);\n          }, 13);\n        });\n        delegate(document, Rails.formSubmitSelector, 'ajax:send', disableElement);\n        delegate(document, Rails.formSubmitSelector, 'ajax:complete', enableElement);\n        delegate(document, Rails.formInputClickSelector, 'click', preventInsignificantClick);\n        delegate(document, Rails.formInputClickSelector, 'click', handleDisabledElement);\n        delegate(document, Rails.formInputClickSelector, 'click', handleConfirm);\n        delegate(document, Rails.formInputClickSelector, 'click', formSubmitButtonClick);\n        document.addEventListener('DOMContentLoaded', refreshCSRFTokens);\n        document.addEventListener('DOMContentLoaded', loadCSPNonce);\n        return window._rails_loaded = true;\n      };\n      if (window.Rails === Rails && fire(document, 'rails:attachBindings')) {\n        Rails.start();\n      }\n    }).call(this);\n  }).call(this);\n  if (typeof module === \"object\" && module.exports) {\n    module.exports = Rails;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(Rails);\n  }\n}).call(this);","function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var n = 0, F = function () {}; return { s: F, n: function () { return n >= r.length ? { done: !0 } : { done: !1, value: r[n++] }; }, e: function (r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function () { t = t.call(r); }, n: function () { var r = t.next(); return a = r.done, r; }, e: function (r) { u = !0, o = r; }, f: function () { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/*\nStimulus 3.2.1\nCopyright © 2023 Basecamp, LLC\n */\nclass EventListener {\n  constructor(eventTarget, eventName, eventOptions) {\n    this.eventTarget = eventTarget;\n    this.eventName = eventName;\n    this.eventOptions = eventOptions;\n    this.unorderedBindings = new Set();\n  }\n  connect() {\n    this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);\n  }\n  disconnect() {\n    this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);\n  }\n  bindingConnected(binding) {\n    this.unorderedBindings.add(binding);\n  }\n  bindingDisconnected(binding) {\n    this.unorderedBindings.delete(binding);\n  }\n  handleEvent(event) {\n    const extendedEvent = extendEvent(event);\n    var _iterator = _createForOfIteratorHelper(this.bindings),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        const binding = _step.value;\n        if (extendedEvent.immediatePropagationStopped) {\n          break;\n        } else {\n          binding.handleEvent(extendedEvent);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  hasBindings() {\n    return this.unorderedBindings.size > 0;\n  }\n  get bindings() {\n    return Array.from(this.unorderedBindings).sort((left, right) => {\n      const leftIndex = left.index,\n        rightIndex = right.index;\n      return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;\n    });\n  }\n}\nfunction extendEvent(event) {\n  if (\"immediatePropagationStopped\" in event) {\n    return event;\n  } else {\n    const stopImmediatePropagation = event.stopImmediatePropagation;\n    return Object.assign(event, {\n      immediatePropagationStopped: false,\n      stopImmediatePropagation() {\n        this.immediatePropagationStopped = true;\n        stopImmediatePropagation.call(this);\n      }\n    });\n  }\n}\nclass Dispatcher {\n  constructor(application) {\n    this.application = application;\n    this.eventListenerMaps = new Map();\n    this.started = false;\n  }\n  start() {\n    if (!this.started) {\n      this.started = true;\n      this.eventListeners.forEach(eventListener => eventListener.connect());\n    }\n  }\n  stop() {\n    if (this.started) {\n      this.started = false;\n      this.eventListeners.forEach(eventListener => eventListener.disconnect());\n    }\n  }\n  get eventListeners() {\n    return Array.from(this.eventListenerMaps.values()).reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);\n  }\n  bindingConnected(binding) {\n    this.fetchEventListenerForBinding(binding).bindingConnected(binding);\n  }\n  bindingDisconnected(binding) {\n    let clearEventListeners = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);\n    if (clearEventListeners) this.clearEventListenersForBinding(binding);\n  }\n  handleError(error, message) {\n    let detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.application.handleError(error, `Error ${message}`, detail);\n  }\n  clearEventListenersForBinding(binding) {\n    const eventListener = this.fetchEventListenerForBinding(binding);\n    if (!eventListener.hasBindings()) {\n      eventListener.disconnect();\n      this.removeMappedEventListenerFor(binding);\n    }\n  }\n  removeMappedEventListenerFor(binding) {\n    const eventTarget = binding.eventTarget,\n      eventName = binding.eventName,\n      eventOptions = binding.eventOptions;\n    const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n    const cacheKey = this.cacheKey(eventName, eventOptions);\n    eventListenerMap.delete(cacheKey);\n    if (eventListenerMap.size == 0) this.eventListenerMaps.delete(eventTarget);\n  }\n  fetchEventListenerForBinding(binding) {\n    const eventTarget = binding.eventTarget,\n      eventName = binding.eventName,\n      eventOptions = binding.eventOptions;\n    return this.fetchEventListener(eventTarget, eventName, eventOptions);\n  }\n  fetchEventListener(eventTarget, eventName, eventOptions) {\n    const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n    const cacheKey = this.cacheKey(eventName, eventOptions);\n    let eventListener = eventListenerMap.get(cacheKey);\n    if (!eventListener) {\n      eventListener = this.createEventListener(eventTarget, eventName, eventOptions);\n      eventListenerMap.set(cacheKey, eventListener);\n    }\n    return eventListener;\n  }\n  createEventListener(eventTarget, eventName, eventOptions) {\n    const eventListener = new EventListener(eventTarget, eventName, eventOptions);\n    if (this.started) {\n      eventListener.connect();\n    }\n    return eventListener;\n  }\n  fetchEventListenerMapForEventTarget(eventTarget) {\n    let eventListenerMap = this.eventListenerMaps.get(eventTarget);\n    if (!eventListenerMap) {\n      eventListenerMap = new Map();\n      this.eventListenerMaps.set(eventTarget, eventListenerMap);\n    }\n    return eventListenerMap;\n  }\n  cacheKey(eventName, eventOptions) {\n    const parts = [eventName];\n    Object.keys(eventOptions).sort().forEach(key => {\n      parts.push(`${eventOptions[key] ? \"\" : \"!\"}${key}`);\n    });\n    return parts.join(\":\");\n  }\n}\nconst defaultActionDescriptorFilters = {\n  stop(_ref) {\n    let event = _ref.event,\n      value = _ref.value;\n    if (value) event.stopPropagation();\n    return true;\n  },\n  prevent(_ref2) {\n    let event = _ref2.event,\n      value = _ref2.value;\n    if (value) event.preventDefault();\n    return true;\n  },\n  self(_ref3) {\n    let event = _ref3.event,\n      value = _ref3.value,\n      element = _ref3.element;\n    if (value) {\n      return element === event.target;\n    } else {\n      return true;\n    }\n  }\n};\nconst descriptorPattern = /^(?:(?:([^.]+?)\\+)?(.+?)(?:\\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;\nfunction parseActionDescriptorString(descriptorString) {\n  const source = descriptorString.trim();\n  const matches = source.match(descriptorPattern) || [];\n  let eventName = matches[2];\n  let keyFilter = matches[3];\n  if (keyFilter && ![\"keydown\", \"keyup\", \"keypress\"].includes(eventName)) {\n    eventName += `.${keyFilter}`;\n    keyFilter = \"\";\n  }\n  return {\n    eventTarget: parseEventTarget(matches[4]),\n    eventName,\n    eventOptions: matches[7] ? parseEventOptions(matches[7]) : {},\n    identifier: matches[5],\n    methodName: matches[6],\n    keyFilter: matches[1] || keyFilter\n  };\n}\nfunction parseEventTarget(eventTargetName) {\n  if (eventTargetName == \"window\") {\n    return window;\n  } else if (eventTargetName == \"document\") {\n    return document;\n  }\n}\nfunction parseEventOptions(eventOptions) {\n  return eventOptions.split(\":\").reduce((options, token) => Object.assign(options, {\n    [token.replace(/^!/, \"\")]: !/^!/.test(token)\n  }), {});\n}\nfunction stringifyEventTarget(eventTarget) {\n  if (eventTarget == window) {\n    return \"window\";\n  } else if (eventTarget == document) {\n    return \"document\";\n  }\n}\nfunction camelize(value) {\n  return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase());\n}\nfunction namespaceCamelize(value) {\n  return camelize(value.replace(/--/g, \"-\").replace(/__/g, \"_\"));\n}\nfunction capitalize(value) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\nfunction dasherize(value) {\n  return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`);\n}\nfunction tokenize(value) {\n  return value.match(/[^\\s]+/g) || [];\n}\nfunction isSomething(object) {\n  return object !== null && object !== undefined;\n}\nfunction hasProperty(object, property) {\n  return Object.prototype.hasOwnProperty.call(object, property);\n}\nconst allModifiers = [\"meta\", \"ctrl\", \"alt\", \"shift\"];\nclass Action {\n  constructor(element, index, descriptor, schema) {\n    this.element = element;\n    this.index = index;\n    this.eventTarget = descriptor.eventTarget || element;\n    this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error(\"missing event name\");\n    this.eventOptions = descriptor.eventOptions || {};\n    this.identifier = descriptor.identifier || error(\"missing identifier\");\n    this.methodName = descriptor.methodName || error(\"missing method name\");\n    this.keyFilter = descriptor.keyFilter || \"\";\n    this.schema = schema;\n  }\n  static forToken(token, schema) {\n    return new this(token.element, token.index, parseActionDescriptorString(token.content), schema);\n  }\n  toString() {\n    const eventFilter = this.keyFilter ? `.${this.keyFilter}` : \"\";\n    const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : \"\";\n    return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`;\n  }\n  shouldIgnoreKeyboardEvent(event) {\n    if (!this.keyFilter) {\n      return false;\n    }\n    const filters = this.keyFilter.split(\"+\");\n    if (this.keyFilterDissatisfied(event, filters)) {\n      return true;\n    }\n    const standardFilter = filters.filter(key => !allModifiers.includes(key))[0];\n    if (!standardFilter) {\n      return false;\n    }\n    if (!hasProperty(this.keyMappings, standardFilter)) {\n      error(`contains unknown key filter: ${this.keyFilter}`);\n    }\n    return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase();\n  }\n  shouldIgnoreMouseEvent(event) {\n    if (!this.keyFilter) {\n      return false;\n    }\n    const filters = [this.keyFilter];\n    if (this.keyFilterDissatisfied(event, filters)) {\n      return true;\n    }\n    return false;\n  }\n  get params() {\n    const params = {};\n    const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, \"i\");\n    for (var _i = 0, _Array$from = Array.from(this.element.attributes); _i < _Array$from.length; _i++) {\n      const _Array$from$_i = _Array$from[_i],\n        name = _Array$from$_i.name,\n        value = _Array$from$_i.value;\n      const match = name.match(pattern);\n      const key = match && match[1];\n      if (key) {\n        params[camelize(key)] = typecast(value);\n      }\n    }\n    return params;\n  }\n  get eventTargetName() {\n    return stringifyEventTarget(this.eventTarget);\n  }\n  get keyMappings() {\n    return this.schema.keyMappings;\n  }\n  keyFilterDissatisfied(event, filters) {\n    const _allModifiers$map = allModifiers.map(modifier => filters.includes(modifier)),\n      _allModifiers$map2 = _slicedToArray(_allModifiers$map, 4),\n      meta = _allModifiers$map2[0],\n      ctrl = _allModifiers$map2[1],\n      alt = _allModifiers$map2[2],\n      shift = _allModifiers$map2[3];\n    return event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift;\n  }\n}\nconst defaultEventNames = {\n  a: () => \"click\",\n  button: () => \"click\",\n  form: () => \"submit\",\n  details: () => \"toggle\",\n  input: e => e.getAttribute(\"type\") == \"submit\" ? \"click\" : \"input\",\n  select: () => \"change\",\n  textarea: () => \"input\"\n};\nfunction getDefaultEventNameForElement(element) {\n  const tagName = element.tagName.toLowerCase();\n  if (tagName in defaultEventNames) {\n    return defaultEventNames[tagName](element);\n  }\n}\nfunction error(message) {\n  throw new Error(message);\n}\nfunction typecast(value) {\n  try {\n    return JSON.parse(value);\n  } catch (o_O) {\n    return value;\n  }\n}\nclass Binding {\n  constructor(context, action) {\n    this.context = context;\n    this.action = action;\n  }\n  get index() {\n    return this.action.index;\n  }\n  get eventTarget() {\n    return this.action.eventTarget;\n  }\n  get eventOptions() {\n    return this.action.eventOptions;\n  }\n  get identifier() {\n    return this.context.identifier;\n  }\n  handleEvent(event) {\n    const actionEvent = this.prepareActionEvent(event);\n    if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(actionEvent)) {\n      this.invokeWithEvent(actionEvent);\n    }\n  }\n  get eventName() {\n    return this.action.eventName;\n  }\n  get method() {\n    const method = this.controller[this.methodName];\n    if (typeof method == \"function\") {\n      return method;\n    }\n    throw new Error(`Action \"${this.action}\" references undefined method \"${this.methodName}\"`);\n  }\n  applyEventModifiers(event) {\n    const element = this.action.element;\n    const actionDescriptorFilters = this.context.application.actionDescriptorFilters;\n    const controller = this.context.controller;\n    let passes = true;\n    for (var _i2 = 0, _Object$entries = Object.entries(this.eventOptions); _i2 < _Object$entries.length; _i2++) {\n      const _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n        name = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n      if (name in actionDescriptorFilters) {\n        const filter = actionDescriptorFilters[name];\n        passes = passes && filter({\n          name,\n          value,\n          event,\n          element,\n          controller\n        });\n      } else {\n        continue;\n      }\n    }\n    return passes;\n  }\n  prepareActionEvent(event) {\n    return Object.assign(event, {\n      params: this.action.params\n    });\n  }\n  invokeWithEvent(event) {\n    const target = event.target,\n      currentTarget = event.currentTarget;\n    try {\n      this.method.call(this.controller, event);\n      this.context.logDebugActivity(this.methodName, {\n        event,\n        target,\n        currentTarget,\n        action: this.methodName\n      });\n    } catch (error) {\n      const identifier = this.identifier,\n        controller = this.controller,\n        element = this.element,\n        index = this.index;\n      const detail = {\n        identifier,\n        controller,\n        element,\n        index,\n        event\n      };\n      this.context.handleError(error, `invoking action \"${this.action}\"`, detail);\n    }\n  }\n  willBeInvokedByEvent(event) {\n    const eventTarget = event.target;\n    if (event instanceof KeyboardEvent && this.action.shouldIgnoreKeyboardEvent(event)) {\n      return false;\n    }\n    if (event instanceof MouseEvent && this.action.shouldIgnoreMouseEvent(event)) {\n      return false;\n    }\n    if (this.element === eventTarget) {\n      return true;\n    } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {\n      return this.scope.containsElement(eventTarget);\n    } else {\n      return this.scope.containsElement(this.action.element);\n    }\n  }\n  get controller() {\n    return this.context.controller;\n  }\n  get methodName() {\n    return this.action.methodName;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get scope() {\n    return this.context.scope;\n  }\n}\nclass ElementObserver {\n  constructor(element, delegate) {\n    this.mutationObserverInit = {\n      attributes: true,\n      childList: true,\n      subtree: true\n    };\n    this.element = element;\n    this.started = false;\n    this.delegate = delegate;\n    this.elements = new Set();\n    this.mutationObserver = new MutationObserver(mutations => this.processMutations(mutations));\n  }\n  start() {\n    if (!this.started) {\n      this.started = true;\n      this.mutationObserver.observe(this.element, this.mutationObserverInit);\n      this.refresh();\n    }\n  }\n  pause(callback) {\n    if (this.started) {\n      this.mutationObserver.disconnect();\n      this.started = false;\n    }\n    callback();\n    if (!this.started) {\n      this.mutationObserver.observe(this.element, this.mutationObserverInit);\n      this.started = true;\n    }\n  }\n  stop() {\n    if (this.started) {\n      this.mutationObserver.takeRecords();\n      this.mutationObserver.disconnect();\n      this.started = false;\n    }\n  }\n  refresh() {\n    if (this.started) {\n      const matches = new Set(this.matchElementsInTree());\n      for (var _i3 = 0, _Array$from2 = Array.from(this.elements); _i3 < _Array$from2.length; _i3++) {\n        const element = _Array$from2[_i3];\n        if (!matches.has(element)) {\n          this.removeElement(element);\n        }\n      }\n      for (var _i4 = 0, _Array$from3 = Array.from(matches); _i4 < _Array$from3.length; _i4++) {\n        const element = _Array$from3[_i4];\n        this.addElement(element);\n      }\n    }\n  }\n  processMutations(mutations) {\n    if (this.started) {\n      var _iterator2 = _createForOfIteratorHelper(mutations),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          const mutation = _step2.value;\n          this.processMutation(mutation);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }\n  processMutation(mutation) {\n    if (mutation.type == \"attributes\") {\n      this.processAttributeChange(mutation.target, mutation.attributeName);\n    } else if (mutation.type == \"childList\") {\n      this.processRemovedNodes(mutation.removedNodes);\n      this.processAddedNodes(mutation.addedNodes);\n    }\n  }\n  processAttributeChange(element, attributeName) {\n    if (this.elements.has(element)) {\n      if (this.delegate.elementAttributeChanged && this.matchElement(element)) {\n        this.delegate.elementAttributeChanged(element, attributeName);\n      } else {\n        this.removeElement(element);\n      }\n    } else if (this.matchElement(element)) {\n      this.addElement(element);\n    }\n  }\n  processRemovedNodes(nodes) {\n    for (var _i5 = 0, _Array$from4 = Array.from(nodes); _i5 < _Array$from4.length; _i5++) {\n      const node = _Array$from4[_i5];\n      const element = this.elementFromNode(node);\n      if (element) {\n        this.processTree(element, this.removeElement);\n      }\n    }\n  }\n  processAddedNodes(nodes) {\n    for (var _i6 = 0, _Array$from5 = Array.from(nodes); _i6 < _Array$from5.length; _i6++) {\n      const node = _Array$from5[_i6];\n      const element = this.elementFromNode(node);\n      if (element && this.elementIsActive(element)) {\n        this.processTree(element, this.addElement);\n      }\n    }\n  }\n  matchElement(element) {\n    return this.delegate.matchElement(element);\n  }\n  matchElementsInTree() {\n    let tree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.element;\n    return this.delegate.matchElementsInTree(tree);\n  }\n  processTree(tree, processor) {\n    var _iterator3 = _createForOfIteratorHelper(this.matchElementsInTree(tree)),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        const element = _step3.value;\n        processor.call(this, element);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  elementFromNode(node) {\n    if (node.nodeType == Node.ELEMENT_NODE) {\n      return node;\n    }\n  }\n  elementIsActive(element) {\n    if (element.isConnected != this.element.isConnected) {\n      return false;\n    } else {\n      return this.element.contains(element);\n    }\n  }\n  addElement(element) {\n    if (!this.elements.has(element)) {\n      if (this.elementIsActive(element)) {\n        this.elements.add(element);\n        if (this.delegate.elementMatched) {\n          this.delegate.elementMatched(element);\n        }\n      }\n    }\n  }\n  removeElement(element) {\n    if (this.elements.has(element)) {\n      this.elements.delete(element);\n      if (this.delegate.elementUnmatched) {\n        this.delegate.elementUnmatched(element);\n      }\n    }\n  }\n}\nclass AttributeObserver {\n  constructor(element, attributeName, delegate) {\n    this.attributeName = attributeName;\n    this.delegate = delegate;\n    this.elementObserver = new ElementObserver(element, this);\n  }\n  get element() {\n    return this.elementObserver.element;\n  }\n  get selector() {\n    return `[${this.attributeName}]`;\n  }\n  start() {\n    this.elementObserver.start();\n  }\n  pause(callback) {\n    this.elementObserver.pause(callback);\n  }\n  stop() {\n    this.elementObserver.stop();\n  }\n  refresh() {\n    this.elementObserver.refresh();\n  }\n  get started() {\n    return this.elementObserver.started;\n  }\n  matchElement(element) {\n    return element.hasAttribute(this.attributeName);\n  }\n  matchElementsInTree(tree) {\n    const match = this.matchElement(tree) ? [tree] : [];\n    const matches = Array.from(tree.querySelectorAll(this.selector));\n    return match.concat(matches);\n  }\n  elementMatched(element) {\n    if (this.delegate.elementMatchedAttribute) {\n      this.delegate.elementMatchedAttribute(element, this.attributeName);\n    }\n  }\n  elementUnmatched(element) {\n    if (this.delegate.elementUnmatchedAttribute) {\n      this.delegate.elementUnmatchedAttribute(element, this.attributeName);\n    }\n  }\n  elementAttributeChanged(element, attributeName) {\n    if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {\n      this.delegate.elementAttributeValueChanged(element, attributeName);\n    }\n  }\n}\nfunction add(map, key, value) {\n  fetch(map, key).add(value);\n}\nfunction del(map, key, value) {\n  fetch(map, key).delete(value);\n  prune(map, key);\n}\nfunction fetch(map, key) {\n  let values = map.get(key);\n  if (!values) {\n    values = new Set();\n    map.set(key, values);\n  }\n  return values;\n}\nfunction prune(map, key) {\n  const values = map.get(key);\n  if (values != null && values.size == 0) {\n    map.delete(key);\n  }\n}\nclass Multimap {\n  constructor() {\n    this.valuesByKey = new Map();\n  }\n  get keys() {\n    return Array.from(this.valuesByKey.keys());\n  }\n  get values() {\n    const sets = Array.from(this.valuesByKey.values());\n    return sets.reduce((values, set) => values.concat(Array.from(set)), []);\n  }\n  get size() {\n    const sets = Array.from(this.valuesByKey.values());\n    return sets.reduce((size, set) => size + set.size, 0);\n  }\n  add(key, value) {\n    add(this.valuesByKey, key, value);\n  }\n  delete(key, value) {\n    del(this.valuesByKey, key, value);\n  }\n  has(key, value) {\n    const values = this.valuesByKey.get(key);\n    return values != null && values.has(value);\n  }\n  hasKey(key) {\n    return this.valuesByKey.has(key);\n  }\n  hasValue(value) {\n    const sets = Array.from(this.valuesByKey.values());\n    return sets.some(set => set.has(value));\n  }\n  getValuesForKey(key) {\n    const values = this.valuesByKey.get(key);\n    return values ? Array.from(values) : [];\n  }\n  getKeysForValue(value) {\n    return Array.from(this.valuesByKey).filter(_ref4 => {\n      let _ref5 = _slicedToArray(_ref4, 2),\n        _key = _ref5[0],\n        values = _ref5[1];\n      return values.has(value);\n    }).map(_ref6 => {\n      let _ref7 = _slicedToArray(_ref6, 2),\n        key = _ref7[0],\n        _values = _ref7[1];\n      return key;\n    });\n  }\n}\nclass IndexedMultimap extends Multimap {\n  constructor() {\n    super();\n    this.keysByValue = new Map();\n  }\n  get values() {\n    return Array.from(this.keysByValue.keys());\n  }\n  add(key, value) {\n    super.add(key, value);\n    add(this.keysByValue, value, key);\n  }\n  delete(key, value) {\n    super.delete(key, value);\n    del(this.keysByValue, value, key);\n  }\n  hasValue(value) {\n    return this.keysByValue.has(value);\n  }\n  getKeysForValue(value) {\n    const set = this.keysByValue.get(value);\n    return set ? Array.from(set) : [];\n  }\n}\nclass SelectorObserver {\n  constructor(element, selector, delegate, details) {\n    this._selector = selector;\n    this.details = details;\n    this.elementObserver = new ElementObserver(element, this);\n    this.delegate = delegate;\n    this.matchesByElement = new Multimap();\n  }\n  get started() {\n    return this.elementObserver.started;\n  }\n  get selector() {\n    return this._selector;\n  }\n  set selector(selector) {\n    this._selector = selector;\n    this.refresh();\n  }\n  start() {\n    this.elementObserver.start();\n  }\n  pause(callback) {\n    this.elementObserver.pause(callback);\n  }\n  stop() {\n    this.elementObserver.stop();\n  }\n  refresh() {\n    this.elementObserver.refresh();\n  }\n  get element() {\n    return this.elementObserver.element;\n  }\n  matchElement(element) {\n    const selector = this.selector;\n    if (selector) {\n      const matches = element.matches(selector);\n      if (this.delegate.selectorMatchElement) {\n        return matches && this.delegate.selectorMatchElement(element, this.details);\n      }\n      return matches;\n    } else {\n      return false;\n    }\n  }\n  matchElementsInTree(tree) {\n    const selector = this.selector;\n    if (selector) {\n      const match = this.matchElement(tree) ? [tree] : [];\n      const matches = Array.from(tree.querySelectorAll(selector)).filter(match => this.matchElement(match));\n      return match.concat(matches);\n    } else {\n      return [];\n    }\n  }\n  elementMatched(element) {\n    const selector = this.selector;\n    if (selector) {\n      this.selectorMatched(element, selector);\n    }\n  }\n  elementUnmatched(element) {\n    const selectors = this.matchesByElement.getKeysForValue(element);\n    var _iterator4 = _createForOfIteratorHelper(selectors),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        const selector = _step4.value;\n        this.selectorUnmatched(element, selector);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n  elementAttributeChanged(element, _attributeName) {\n    const selector = this.selector;\n    if (selector) {\n      const matches = this.matchElement(element);\n      const matchedBefore = this.matchesByElement.has(selector, element);\n      if (matches && !matchedBefore) {\n        this.selectorMatched(element, selector);\n      } else if (!matches && matchedBefore) {\n        this.selectorUnmatched(element, selector);\n      }\n    }\n  }\n  selectorMatched(element, selector) {\n    this.delegate.selectorMatched(element, selector, this.details);\n    this.matchesByElement.add(selector, element);\n  }\n  selectorUnmatched(element, selector) {\n    this.delegate.selectorUnmatched(element, selector, this.details);\n    this.matchesByElement.delete(selector, element);\n  }\n}\nclass StringMapObserver {\n  constructor(element, delegate) {\n    this.element = element;\n    this.delegate = delegate;\n    this.started = false;\n    this.stringMap = new Map();\n    this.mutationObserver = new MutationObserver(mutations => this.processMutations(mutations));\n  }\n  start() {\n    if (!this.started) {\n      this.started = true;\n      this.mutationObserver.observe(this.element, {\n        attributes: true,\n        attributeOldValue: true\n      });\n      this.refresh();\n    }\n  }\n  stop() {\n    if (this.started) {\n      this.mutationObserver.takeRecords();\n      this.mutationObserver.disconnect();\n      this.started = false;\n    }\n  }\n  refresh() {\n    if (this.started) {\n      var _iterator5 = _createForOfIteratorHelper(this.knownAttributeNames),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          const attributeName = _step5.value;\n          this.refreshAttribute(attributeName, null);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }\n  processMutations(mutations) {\n    if (this.started) {\n      var _iterator6 = _createForOfIteratorHelper(mutations),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          const mutation = _step6.value;\n          this.processMutation(mutation);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }\n  processMutation(mutation) {\n    const attributeName = mutation.attributeName;\n    if (attributeName) {\n      this.refreshAttribute(attributeName, mutation.oldValue);\n    }\n  }\n  refreshAttribute(attributeName, oldValue) {\n    const key = this.delegate.getStringMapKeyForAttribute(attributeName);\n    if (key != null) {\n      if (!this.stringMap.has(attributeName)) {\n        this.stringMapKeyAdded(key, attributeName);\n      }\n      const value = this.element.getAttribute(attributeName);\n      if (this.stringMap.get(attributeName) != value) {\n        this.stringMapValueChanged(value, key, oldValue);\n      }\n      if (value == null) {\n        const oldValue = this.stringMap.get(attributeName);\n        this.stringMap.delete(attributeName);\n        if (oldValue) this.stringMapKeyRemoved(key, attributeName, oldValue);\n      } else {\n        this.stringMap.set(attributeName, value);\n      }\n    }\n  }\n  stringMapKeyAdded(key, attributeName) {\n    if (this.delegate.stringMapKeyAdded) {\n      this.delegate.stringMapKeyAdded(key, attributeName);\n    }\n  }\n  stringMapValueChanged(value, key, oldValue) {\n    if (this.delegate.stringMapValueChanged) {\n      this.delegate.stringMapValueChanged(value, key, oldValue);\n    }\n  }\n  stringMapKeyRemoved(key, attributeName, oldValue) {\n    if (this.delegate.stringMapKeyRemoved) {\n      this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);\n    }\n  }\n  get knownAttributeNames() {\n    return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));\n  }\n  get currentAttributeNames() {\n    return Array.from(this.element.attributes).map(attribute => attribute.name);\n  }\n  get recordedAttributeNames() {\n    return Array.from(this.stringMap.keys());\n  }\n}\nclass TokenListObserver {\n  constructor(element, attributeName, delegate) {\n    this.attributeObserver = new AttributeObserver(element, attributeName, this);\n    this.delegate = delegate;\n    this.tokensByElement = new Multimap();\n  }\n  get started() {\n    return this.attributeObserver.started;\n  }\n  start() {\n    this.attributeObserver.start();\n  }\n  pause(callback) {\n    this.attributeObserver.pause(callback);\n  }\n  stop() {\n    this.attributeObserver.stop();\n  }\n  refresh() {\n    this.attributeObserver.refresh();\n  }\n  get element() {\n    return this.attributeObserver.element;\n  }\n  get attributeName() {\n    return this.attributeObserver.attributeName;\n  }\n  elementMatchedAttribute(element) {\n    this.tokensMatched(this.readTokensForElement(element));\n  }\n  elementAttributeValueChanged(element) {\n    const _this$refreshTokensFo = this.refreshTokensForElement(element),\n      _this$refreshTokensFo2 = _slicedToArray(_this$refreshTokensFo, 2),\n      unmatchedTokens = _this$refreshTokensFo2[0],\n      matchedTokens = _this$refreshTokensFo2[1];\n    this.tokensUnmatched(unmatchedTokens);\n    this.tokensMatched(matchedTokens);\n  }\n  elementUnmatchedAttribute(element) {\n    this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));\n  }\n  tokensMatched(tokens) {\n    tokens.forEach(token => this.tokenMatched(token));\n  }\n  tokensUnmatched(tokens) {\n    tokens.forEach(token => this.tokenUnmatched(token));\n  }\n  tokenMatched(token) {\n    this.delegate.tokenMatched(token);\n    this.tokensByElement.add(token.element, token);\n  }\n  tokenUnmatched(token) {\n    this.delegate.tokenUnmatched(token);\n    this.tokensByElement.delete(token.element, token);\n  }\n  refreshTokensForElement(element) {\n    const previousTokens = this.tokensByElement.getValuesForKey(element);\n    const currentTokens = this.readTokensForElement(element);\n    const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(_ref8 => {\n      let _ref9 = _slicedToArray(_ref8, 2),\n        previousToken = _ref9[0],\n        currentToken = _ref9[1];\n      return !tokensAreEqual(previousToken, currentToken);\n    });\n    if (firstDifferingIndex == -1) {\n      return [[], []];\n    } else {\n      return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];\n    }\n  }\n  readTokensForElement(element) {\n    const attributeName = this.attributeName;\n    const tokenString = element.getAttribute(attributeName) || \"\";\n    return parseTokenString(tokenString, element, attributeName);\n  }\n}\nfunction parseTokenString(tokenString, element, attributeName) {\n  return tokenString.trim().split(/\\s+/).filter(content => content.length).map((content, index) => ({\n    element,\n    attributeName,\n    content,\n    index\n  }));\n}\nfunction zip(left, right) {\n  const length = Math.max(left.length, right.length);\n  return Array.from({\n    length\n  }, (_, index) => [left[index], right[index]]);\n}\nfunction tokensAreEqual(left, right) {\n  return left && right && left.index == right.index && left.content == right.content;\n}\nclass ValueListObserver {\n  constructor(element, attributeName, delegate) {\n    this.tokenListObserver = new TokenListObserver(element, attributeName, this);\n    this.delegate = delegate;\n    this.parseResultsByToken = new WeakMap();\n    this.valuesByTokenByElement = new WeakMap();\n  }\n  get started() {\n    return this.tokenListObserver.started;\n  }\n  start() {\n    this.tokenListObserver.start();\n  }\n  stop() {\n    this.tokenListObserver.stop();\n  }\n  refresh() {\n    this.tokenListObserver.refresh();\n  }\n  get element() {\n    return this.tokenListObserver.element;\n  }\n  get attributeName() {\n    return this.tokenListObserver.attributeName;\n  }\n  tokenMatched(token) {\n    const element = token.element;\n    const _this$fetchParseResul = this.fetchParseResultForToken(token),\n      value = _this$fetchParseResul.value;\n    if (value) {\n      this.fetchValuesByTokenForElement(element).set(token, value);\n      this.delegate.elementMatchedValue(element, value);\n    }\n  }\n  tokenUnmatched(token) {\n    const element = token.element;\n    const _this$fetchParseResul2 = this.fetchParseResultForToken(token),\n      value = _this$fetchParseResul2.value;\n    if (value) {\n      this.fetchValuesByTokenForElement(element).delete(token);\n      this.delegate.elementUnmatchedValue(element, value);\n    }\n  }\n  fetchParseResultForToken(token) {\n    let parseResult = this.parseResultsByToken.get(token);\n    if (!parseResult) {\n      parseResult = this.parseToken(token);\n      this.parseResultsByToken.set(token, parseResult);\n    }\n    return parseResult;\n  }\n  fetchValuesByTokenForElement(element) {\n    let valuesByToken = this.valuesByTokenByElement.get(element);\n    if (!valuesByToken) {\n      valuesByToken = new Map();\n      this.valuesByTokenByElement.set(element, valuesByToken);\n    }\n    return valuesByToken;\n  }\n  parseToken(token) {\n    try {\n      const value = this.delegate.parseValueForToken(token);\n      return {\n        value\n      };\n    } catch (error) {\n      return {\n        error\n      };\n    }\n  }\n}\nclass BindingObserver {\n  constructor(context, delegate) {\n    this.context = context;\n    this.delegate = delegate;\n    this.bindingsByAction = new Map();\n  }\n  start() {\n    if (!this.valueListObserver) {\n      this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);\n      this.valueListObserver.start();\n    }\n  }\n  stop() {\n    if (this.valueListObserver) {\n      this.valueListObserver.stop();\n      delete this.valueListObserver;\n      this.disconnectAllActions();\n    }\n  }\n  get element() {\n    return this.context.element;\n  }\n  get identifier() {\n    return this.context.identifier;\n  }\n  get actionAttribute() {\n    return this.schema.actionAttribute;\n  }\n  get schema() {\n    return this.context.schema;\n  }\n  get bindings() {\n    return Array.from(this.bindingsByAction.values());\n  }\n  connectAction(action) {\n    const binding = new Binding(this.context, action);\n    this.bindingsByAction.set(action, binding);\n    this.delegate.bindingConnected(binding);\n  }\n  disconnectAction(action) {\n    const binding = this.bindingsByAction.get(action);\n    if (binding) {\n      this.bindingsByAction.delete(action);\n      this.delegate.bindingDisconnected(binding);\n    }\n  }\n  disconnectAllActions() {\n    this.bindings.forEach(binding => this.delegate.bindingDisconnected(binding, true));\n    this.bindingsByAction.clear();\n  }\n  parseValueForToken(token) {\n    const action = Action.forToken(token, this.schema);\n    if (action.identifier == this.identifier) {\n      return action;\n    }\n  }\n  elementMatchedValue(element, action) {\n    this.connectAction(action);\n  }\n  elementUnmatchedValue(element, action) {\n    this.disconnectAction(action);\n  }\n}\nclass ValueObserver {\n  constructor(context, receiver) {\n    this.context = context;\n    this.receiver = receiver;\n    this.stringMapObserver = new StringMapObserver(this.element, this);\n    this.valueDescriptorMap = this.controller.valueDescriptorMap;\n  }\n  start() {\n    this.stringMapObserver.start();\n    this.invokeChangedCallbacksForDefaultValues();\n  }\n  stop() {\n    this.stringMapObserver.stop();\n  }\n  get element() {\n    return this.context.element;\n  }\n  get controller() {\n    return this.context.controller;\n  }\n  getStringMapKeyForAttribute(attributeName) {\n    if (attributeName in this.valueDescriptorMap) {\n      return this.valueDescriptorMap[attributeName].name;\n    }\n  }\n  stringMapKeyAdded(key, attributeName) {\n    const descriptor = this.valueDescriptorMap[attributeName];\n    if (!this.hasValue(key)) {\n      this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));\n    }\n  }\n  stringMapValueChanged(value, name, oldValue) {\n    const descriptor = this.valueDescriptorNameMap[name];\n    if (value === null) return;\n    if (oldValue === null) {\n      oldValue = descriptor.writer(descriptor.defaultValue);\n    }\n    this.invokeChangedCallback(name, value, oldValue);\n  }\n  stringMapKeyRemoved(key, attributeName, oldValue) {\n    const descriptor = this.valueDescriptorNameMap[key];\n    if (this.hasValue(key)) {\n      this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);\n    } else {\n      this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);\n    }\n  }\n  invokeChangedCallbacksForDefaultValues() {\n    var _iterator7 = _createForOfIteratorHelper(this.valueDescriptors),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        const _step7$value = _step7.value,\n          key = _step7$value.key,\n          name = _step7$value.name,\n          defaultValue = _step7$value.defaultValue,\n          writer = _step7$value.writer;\n        if (defaultValue != undefined && !this.controller.data.has(key)) {\n          this.invokeChangedCallback(name, writer(defaultValue), undefined);\n        }\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n  }\n  invokeChangedCallback(name, rawValue, rawOldValue) {\n    const changedMethodName = `${name}Changed`;\n    const changedMethod = this.receiver[changedMethodName];\n    if (typeof changedMethod == \"function\") {\n      const descriptor = this.valueDescriptorNameMap[name];\n      try {\n        const value = descriptor.reader(rawValue);\n        let oldValue = rawOldValue;\n        if (rawOldValue) {\n          oldValue = descriptor.reader(rawOldValue);\n        }\n        changedMethod.call(this.receiver, value, oldValue);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          error.message = `Stimulus Value \"${this.context.identifier}.${descriptor.name}\" - ${error.message}`;\n        }\n        throw error;\n      }\n    }\n  }\n  get valueDescriptors() {\n    const valueDescriptorMap = this.valueDescriptorMap;\n    return Object.keys(valueDescriptorMap).map(key => valueDescriptorMap[key]);\n  }\n  get valueDescriptorNameMap() {\n    const descriptors = {};\n    Object.keys(this.valueDescriptorMap).forEach(key => {\n      const descriptor = this.valueDescriptorMap[key];\n      descriptors[descriptor.name] = descriptor;\n    });\n    return descriptors;\n  }\n  hasValue(attributeName) {\n    const descriptor = this.valueDescriptorNameMap[attributeName];\n    const hasMethodName = `has${capitalize(descriptor.name)}`;\n    return this.receiver[hasMethodName];\n  }\n}\nclass TargetObserver {\n  constructor(context, delegate) {\n    this.context = context;\n    this.delegate = delegate;\n    this.targetsByName = new Multimap();\n  }\n  start() {\n    if (!this.tokenListObserver) {\n      this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);\n      this.tokenListObserver.start();\n    }\n  }\n  stop() {\n    if (this.tokenListObserver) {\n      this.disconnectAllTargets();\n      this.tokenListObserver.stop();\n      delete this.tokenListObserver;\n    }\n  }\n  tokenMatched(_ref10) {\n    let element = _ref10.element,\n      name = _ref10.content;\n    if (this.scope.containsElement(element)) {\n      this.connectTarget(element, name);\n    }\n  }\n  tokenUnmatched(_ref11) {\n    let element = _ref11.element,\n      name = _ref11.content;\n    this.disconnectTarget(element, name);\n  }\n  connectTarget(element, name) {\n    var _a;\n    if (!this.targetsByName.has(name, element)) {\n      this.targetsByName.add(name, element);\n      (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));\n    }\n  }\n  disconnectTarget(element, name) {\n    var _a;\n    if (this.targetsByName.has(name, element)) {\n      this.targetsByName.delete(name, element);\n      (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));\n    }\n  }\n  disconnectAllTargets() {\n    var _iterator8 = _createForOfIteratorHelper(this.targetsByName.keys),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        const name = _step8.value;\n        var _iterator9 = _createForOfIteratorHelper(this.targetsByName.getValuesForKey(name)),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            const element = _step9.value;\n            this.disconnectTarget(element, name);\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n  }\n  get attributeName() {\n    return `data-${this.context.identifier}-target`;\n  }\n  get element() {\n    return this.context.element;\n  }\n  get scope() {\n    return this.context.scope;\n  }\n}\nfunction readInheritableStaticArrayValues(constructor, propertyName) {\n  const ancestors = getAncestorsForConstructor(constructor);\n  return Array.from(ancestors.reduce((values, constructor) => {\n    getOwnStaticArrayValues(constructor, propertyName).forEach(name => values.add(name));\n    return values;\n  }, new Set()));\n}\nfunction readInheritableStaticObjectPairs(constructor, propertyName) {\n  const ancestors = getAncestorsForConstructor(constructor);\n  return ancestors.reduce((pairs, constructor) => {\n    pairs.push(...getOwnStaticObjectPairs(constructor, propertyName));\n    return pairs;\n  }, []);\n}\nfunction getAncestorsForConstructor(constructor) {\n  const ancestors = [];\n  while (constructor) {\n    ancestors.push(constructor);\n    constructor = Object.getPrototypeOf(constructor);\n  }\n  return ancestors.reverse();\n}\nfunction getOwnStaticArrayValues(constructor, propertyName) {\n  const definition = constructor[propertyName];\n  return Array.isArray(definition) ? definition : [];\n}\nfunction getOwnStaticObjectPairs(constructor, propertyName) {\n  const definition = constructor[propertyName];\n  return definition ? Object.keys(definition).map(key => [key, definition[key]]) : [];\n}\nclass OutletObserver {\n  constructor(context, delegate) {\n    this.started = false;\n    this.context = context;\n    this.delegate = delegate;\n    this.outletsByName = new Multimap();\n    this.outletElementsByName = new Multimap();\n    this.selectorObserverMap = new Map();\n    this.attributeObserverMap = new Map();\n  }\n  start() {\n    if (!this.started) {\n      this.outletDefinitions.forEach(outletName => {\n        this.setupSelectorObserverForOutlet(outletName);\n        this.setupAttributeObserverForOutlet(outletName);\n      });\n      this.started = true;\n      this.dependentContexts.forEach(context => context.refresh());\n    }\n  }\n  refresh() {\n    this.selectorObserverMap.forEach(observer => observer.refresh());\n    this.attributeObserverMap.forEach(observer => observer.refresh());\n  }\n  stop() {\n    if (this.started) {\n      this.started = false;\n      this.disconnectAllOutlets();\n      this.stopSelectorObservers();\n      this.stopAttributeObservers();\n    }\n  }\n  stopSelectorObservers() {\n    if (this.selectorObserverMap.size > 0) {\n      this.selectorObserverMap.forEach(observer => observer.stop());\n      this.selectorObserverMap.clear();\n    }\n  }\n  stopAttributeObservers() {\n    if (this.attributeObserverMap.size > 0) {\n      this.attributeObserverMap.forEach(observer => observer.stop());\n      this.attributeObserverMap.clear();\n    }\n  }\n  selectorMatched(element, _selector, _ref12) {\n    let outletName = _ref12.outletName;\n    const outlet = this.getOutlet(element, outletName);\n    if (outlet) {\n      this.connectOutlet(outlet, element, outletName);\n    }\n  }\n  selectorUnmatched(element, _selector, _ref13) {\n    let outletName = _ref13.outletName;\n    const outlet = this.getOutletFromMap(element, outletName);\n    if (outlet) {\n      this.disconnectOutlet(outlet, element, outletName);\n    }\n  }\n  selectorMatchElement(element, _ref14) {\n    let outletName = _ref14.outletName;\n    const selector = this.selector(outletName);\n    const hasOutlet = this.hasOutlet(element, outletName);\n    const hasOutletController = element.matches(`[${this.schema.controllerAttribute}~=${outletName}]`);\n    if (selector) {\n      return hasOutlet && hasOutletController && element.matches(selector);\n    } else {\n      return false;\n    }\n  }\n  elementMatchedAttribute(_element, attributeName) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName);\n    }\n  }\n  elementAttributeValueChanged(_element, attributeName) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName);\n    }\n  }\n  elementUnmatchedAttribute(_element, attributeName) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName);\n    }\n  }\n  connectOutlet(outlet, element, outletName) {\n    var _a;\n    if (!this.outletElementsByName.has(outletName, element)) {\n      this.outletsByName.add(outletName, outlet);\n      this.outletElementsByName.add(outletName, element);\n      (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletConnected(outlet, element, outletName));\n    }\n  }\n  disconnectOutlet(outlet, element, outletName) {\n    var _a;\n    if (this.outletElementsByName.has(outletName, element)) {\n      this.outletsByName.delete(outletName, outlet);\n      this.outletElementsByName.delete(outletName, element);\n      (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletDisconnected(outlet, element, outletName));\n    }\n  }\n  disconnectAllOutlets() {\n    var _iterator10 = _createForOfIteratorHelper(this.outletElementsByName.keys),\n      _step10;\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        const outletName = _step10.value;\n        var _iterator11 = _createForOfIteratorHelper(this.outletElementsByName.getValuesForKey(outletName)),\n          _step11;\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            const element = _step11.value;\n            var _iterator12 = _createForOfIteratorHelper(this.outletsByName.getValuesForKey(outletName)),\n              _step12;\n            try {\n              for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                const outlet = _step12.value;\n                this.disconnectOutlet(outlet, element, outletName);\n              }\n            } catch (err) {\n              _iterator12.e(err);\n            } finally {\n              _iterator12.f();\n            }\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n  }\n  updateSelectorObserverForOutlet(outletName) {\n    const observer = this.selectorObserverMap.get(outletName);\n    if (observer) {\n      observer.selector = this.selector(outletName);\n    }\n  }\n  setupSelectorObserverForOutlet(outletName) {\n    const selector = this.selector(outletName);\n    const selectorObserver = new SelectorObserver(document.body, selector, this, {\n      outletName\n    });\n    this.selectorObserverMap.set(outletName, selectorObserver);\n    selectorObserver.start();\n  }\n  setupAttributeObserverForOutlet(outletName) {\n    const attributeName = this.attributeNameForOutletName(outletName);\n    const attributeObserver = new AttributeObserver(this.scope.element, attributeName, this);\n    this.attributeObserverMap.set(outletName, attributeObserver);\n    attributeObserver.start();\n  }\n  selector(outletName) {\n    return this.scope.outlets.getSelectorForOutletName(outletName);\n  }\n  attributeNameForOutletName(outletName) {\n    return this.scope.schema.outletAttributeForScope(this.identifier, outletName);\n  }\n  getOutletNameFromOutletAttributeName(attributeName) {\n    return this.outletDefinitions.find(outletName => this.attributeNameForOutletName(outletName) === attributeName);\n  }\n  get outletDependencies() {\n    const dependencies = new Multimap();\n    this.router.modules.forEach(module => {\n      const constructor = module.definition.controllerConstructor;\n      const outlets = readInheritableStaticArrayValues(constructor, \"outlets\");\n      outlets.forEach(outlet => dependencies.add(outlet, module.identifier));\n    });\n    return dependencies;\n  }\n  get outletDefinitions() {\n    return this.outletDependencies.getKeysForValue(this.identifier);\n  }\n  get dependentControllerIdentifiers() {\n    return this.outletDependencies.getValuesForKey(this.identifier);\n  }\n  get dependentContexts() {\n    const identifiers = this.dependentControllerIdentifiers;\n    return this.router.contexts.filter(context => identifiers.includes(context.identifier));\n  }\n  hasOutlet(element, outletName) {\n    return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName);\n  }\n  getOutlet(element, outletName) {\n    return this.application.getControllerForElementAndIdentifier(element, outletName);\n  }\n  getOutletFromMap(element, outletName) {\n    return this.outletsByName.getValuesForKey(outletName).find(outlet => outlet.element === element);\n  }\n  get scope() {\n    return this.context.scope;\n  }\n  get schema() {\n    return this.context.schema;\n  }\n  get identifier() {\n    return this.context.identifier;\n  }\n  get application() {\n    return this.context.application;\n  }\n  get router() {\n    return this.application.router;\n  }\n}\nclass Context {\n  constructor(module, scope) {\n    var _this = this;\n    this.logDebugActivity = function (functionName) {\n      let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const identifier = _this.identifier,\n        controller = _this.controller,\n        element = _this.element;\n      detail = Object.assign({\n        identifier,\n        controller,\n        element\n      }, detail);\n      _this.application.logDebugActivity(_this.identifier, functionName, detail);\n    };\n    this.module = module;\n    this.scope = scope;\n    this.controller = new module.controllerConstructor(this);\n    this.bindingObserver = new BindingObserver(this, this.dispatcher);\n    this.valueObserver = new ValueObserver(this, this.controller);\n    this.targetObserver = new TargetObserver(this, this);\n    this.outletObserver = new OutletObserver(this, this);\n    try {\n      this.controller.initialize();\n      this.logDebugActivity(\"initialize\");\n    } catch (error) {\n      this.handleError(error, \"initializing controller\");\n    }\n  }\n  connect() {\n    this.bindingObserver.start();\n    this.valueObserver.start();\n    this.targetObserver.start();\n    this.outletObserver.start();\n    try {\n      this.controller.connect();\n      this.logDebugActivity(\"connect\");\n    } catch (error) {\n      this.handleError(error, \"connecting controller\");\n    }\n  }\n  refresh() {\n    this.outletObserver.refresh();\n  }\n  disconnect() {\n    try {\n      this.controller.disconnect();\n      this.logDebugActivity(\"disconnect\");\n    } catch (error) {\n      this.handleError(error, \"disconnecting controller\");\n    }\n    this.outletObserver.stop();\n    this.targetObserver.stop();\n    this.valueObserver.stop();\n    this.bindingObserver.stop();\n  }\n  get application() {\n    return this.module.application;\n  }\n  get identifier() {\n    return this.module.identifier;\n  }\n  get schema() {\n    return this.application.schema;\n  }\n  get dispatcher() {\n    return this.application.dispatcher;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get parentElement() {\n    return this.element.parentElement;\n  }\n  handleError(error, message) {\n    let detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const identifier = this.identifier,\n      controller = this.controller,\n      element = this.element;\n    detail = Object.assign({\n      identifier,\n      controller,\n      element\n    }, detail);\n    this.application.handleError(error, `Error ${message}`, detail);\n  }\n  targetConnected(element, name) {\n    this.invokeControllerMethod(`${name}TargetConnected`, element);\n  }\n  targetDisconnected(element, name) {\n    this.invokeControllerMethod(`${name}TargetDisconnected`, element);\n  }\n  outletConnected(outlet, element, name) {\n    this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element);\n  }\n  outletDisconnected(outlet, element, name) {\n    this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element);\n  }\n  invokeControllerMethod(methodName) {\n    const controller = this.controller;\n    if (typeof controller[methodName] == \"function\") {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      controller[methodName](...args);\n    }\n  }\n}\nfunction bless(constructor) {\n  return shadow(constructor, getBlessedProperties(constructor));\n}\nfunction shadow(constructor, properties) {\n  const shadowConstructor = extend(constructor);\n  const shadowProperties = getShadowProperties(constructor.prototype, properties);\n  Object.defineProperties(shadowConstructor.prototype, shadowProperties);\n  return shadowConstructor;\n}\nfunction getBlessedProperties(constructor) {\n  const blessings = readInheritableStaticArrayValues(constructor, \"blessings\");\n  return blessings.reduce((blessedProperties, blessing) => {\n    const properties = blessing(constructor);\n    for (const key in properties) {\n      const descriptor = blessedProperties[key] || {};\n      blessedProperties[key] = Object.assign(descriptor, properties[key]);\n    }\n    return blessedProperties;\n  }, {});\n}\nfunction getShadowProperties(prototype, properties) {\n  return getOwnKeys(properties).reduce((shadowProperties, key) => {\n    const descriptor = getShadowedDescriptor(prototype, properties, key);\n    if (descriptor) {\n      Object.assign(shadowProperties, {\n        [key]: descriptor\n      });\n    }\n    return shadowProperties;\n  }, {});\n}\nfunction getShadowedDescriptor(prototype, properties, key) {\n  const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);\n  const shadowedByValue = shadowingDescriptor && \"value\" in shadowingDescriptor;\n  if (!shadowedByValue) {\n    const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;\n    if (shadowingDescriptor) {\n      descriptor.get = shadowingDescriptor.get || descriptor.get;\n      descriptor.set = shadowingDescriptor.set || descriptor.set;\n    }\n    return descriptor;\n  }\n}\nconst getOwnKeys = (() => {\n  if (typeof Object.getOwnPropertySymbols == \"function\") {\n    return object => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];\n  } else {\n    return Object.getOwnPropertyNames;\n  }\n})();\nconst extend = (() => {\n  function extendWithReflect(constructor) {\n    function extended() {\n      return Reflect.construct(constructor, arguments, new.target);\n    }\n    extended.prototype = Object.create(constructor.prototype, {\n      constructor: {\n        value: extended\n      }\n    });\n    Reflect.setPrototypeOf(extended, constructor);\n    return extended;\n  }\n  function testReflectExtension() {\n    const a = function () {\n      this.a.call(this);\n    };\n    const b = extendWithReflect(a);\n    b.prototype.a = function () {};\n    return new b();\n  }\n  try {\n    testReflectExtension();\n    return extendWithReflect;\n  } catch (error) {\n    return constructor => class extended extends constructor {};\n  }\n})();\nfunction blessDefinition(definition) {\n  return {\n    identifier: definition.identifier,\n    controllerConstructor: bless(definition.controllerConstructor)\n  };\n}\nclass Module {\n  constructor(application, definition) {\n    this.application = application;\n    this.definition = blessDefinition(definition);\n    this.contextsByScope = new WeakMap();\n    this.connectedContexts = new Set();\n  }\n  get identifier() {\n    return this.definition.identifier;\n  }\n  get controllerConstructor() {\n    return this.definition.controllerConstructor;\n  }\n  get contexts() {\n    return Array.from(this.connectedContexts);\n  }\n  connectContextForScope(scope) {\n    const context = this.fetchContextForScope(scope);\n    this.connectedContexts.add(context);\n    context.connect();\n  }\n  disconnectContextForScope(scope) {\n    const context = this.contextsByScope.get(scope);\n    if (context) {\n      this.connectedContexts.delete(context);\n      context.disconnect();\n    }\n  }\n  fetchContextForScope(scope) {\n    let context = this.contextsByScope.get(scope);\n    if (!context) {\n      context = new Context(this, scope);\n      this.contextsByScope.set(scope, context);\n    }\n    return context;\n  }\n}\nclass ClassMap {\n  constructor(scope) {\n    this.scope = scope;\n  }\n  has(name) {\n    return this.data.has(this.getDataKey(name));\n  }\n  get(name) {\n    return this.getAll(name)[0];\n  }\n  getAll(name) {\n    const tokenString = this.data.get(this.getDataKey(name)) || \"\";\n    return tokenize(tokenString);\n  }\n  getAttributeName(name) {\n    return this.data.getAttributeNameForKey(this.getDataKey(name));\n  }\n  getDataKey(name) {\n    return `${name}-class`;\n  }\n  get data() {\n    return this.scope.data;\n  }\n}\nclass DataMap {\n  constructor(scope) {\n    this.scope = scope;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get identifier() {\n    return this.scope.identifier;\n  }\n  get(key) {\n    const name = this.getAttributeNameForKey(key);\n    return this.element.getAttribute(name);\n  }\n  set(key, value) {\n    const name = this.getAttributeNameForKey(key);\n    this.element.setAttribute(name, value);\n    return this.get(key);\n  }\n  has(key) {\n    const name = this.getAttributeNameForKey(key);\n    return this.element.hasAttribute(name);\n  }\n  delete(key) {\n    if (this.has(key)) {\n      const name = this.getAttributeNameForKey(key);\n      this.element.removeAttribute(name);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  getAttributeNameForKey(key) {\n    return `data-${this.identifier}-${dasherize(key)}`;\n  }\n}\nclass Guide {\n  constructor(logger) {\n    this.warnedKeysByObject = new WeakMap();\n    this.logger = logger;\n  }\n  warn(object, key, message) {\n    let warnedKeys = this.warnedKeysByObject.get(object);\n    if (!warnedKeys) {\n      warnedKeys = new Set();\n      this.warnedKeysByObject.set(object, warnedKeys);\n    }\n    if (!warnedKeys.has(key)) {\n      warnedKeys.add(key);\n      this.logger.warn(message, object);\n    }\n  }\n}\nfunction attributeValueContainsToken(attributeName, token) {\n  return `[${attributeName}~=\"${token}\"]`;\n}\nclass TargetSet {\n  constructor(scope) {\n    this.scope = scope;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get identifier() {\n    return this.scope.identifier;\n  }\n  get schema() {\n    return this.scope.schema;\n  }\n  has(targetName) {\n    return this.find(targetName) != null;\n  }\n  find() {\n    for (var _len2 = arguments.length, targetNames = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      targetNames[_key3] = arguments[_key3];\n    }\n    return targetNames.reduce((target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName), undefined);\n  }\n  findAll() {\n    for (var _len3 = arguments.length, targetNames = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n      targetNames[_key4] = arguments[_key4];\n    }\n    return targetNames.reduce((targets, targetName) => [...targets, ...this.findAllTargets(targetName), ...this.findAllLegacyTargets(targetName)], []);\n  }\n  findTarget(targetName) {\n    const selector = this.getSelectorForTargetName(targetName);\n    return this.scope.findElement(selector);\n  }\n  findAllTargets(targetName) {\n    const selector = this.getSelectorForTargetName(targetName);\n    return this.scope.findAllElements(selector);\n  }\n  getSelectorForTargetName(targetName) {\n    const attributeName = this.schema.targetAttributeForScope(this.identifier);\n    return attributeValueContainsToken(attributeName, targetName);\n  }\n  findLegacyTarget(targetName) {\n    const selector = this.getLegacySelectorForTargetName(targetName);\n    return this.deprecate(this.scope.findElement(selector), targetName);\n  }\n  findAllLegacyTargets(targetName) {\n    const selector = this.getLegacySelectorForTargetName(targetName);\n    return this.scope.findAllElements(selector).map(element => this.deprecate(element, targetName));\n  }\n  getLegacySelectorForTargetName(targetName) {\n    const targetDescriptor = `${this.identifier}.${targetName}`;\n    return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);\n  }\n  deprecate(element, targetName) {\n    if (element) {\n      const identifier = this.identifier;\n      const attributeName = this.schema.targetAttribute;\n      const revisedAttributeName = this.schema.targetAttributeForScope(identifier);\n      this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}=\"${identifier}.${targetName}\" with ${revisedAttributeName}=\"${targetName}\". ` + `The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);\n    }\n    return element;\n  }\n  get guide() {\n    return this.scope.guide;\n  }\n}\nclass OutletSet {\n  constructor(scope, controllerElement) {\n    this.scope = scope;\n    this.controllerElement = controllerElement;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get identifier() {\n    return this.scope.identifier;\n  }\n  get schema() {\n    return this.scope.schema;\n  }\n  has(outletName) {\n    return this.find(outletName) != null;\n  }\n  find() {\n    for (var _len4 = arguments.length, outletNames = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n      outletNames[_key5] = arguments[_key5];\n    }\n    return outletNames.reduce((outlet, outletName) => outlet || this.findOutlet(outletName), undefined);\n  }\n  findAll() {\n    for (var _len5 = arguments.length, outletNames = new Array(_len5), _key6 = 0; _key6 < _len5; _key6++) {\n      outletNames[_key6] = arguments[_key6];\n    }\n    return outletNames.reduce((outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)], []);\n  }\n  getSelectorForOutletName(outletName) {\n    const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName);\n    return this.controllerElement.getAttribute(attributeName);\n  }\n  findOutlet(outletName) {\n    const selector = this.getSelectorForOutletName(outletName);\n    if (selector) return this.findElement(selector, outletName);\n  }\n  findAllOutlets(outletName) {\n    const selector = this.getSelectorForOutletName(outletName);\n    return selector ? this.findAllElements(selector, outletName) : [];\n  }\n  findElement(selector, outletName) {\n    const elements = this.scope.queryElements(selector);\n    return elements.filter(element => this.matchesElement(element, selector, outletName))[0];\n  }\n  findAllElements(selector, outletName) {\n    const elements = this.scope.queryElements(selector);\n    return elements.filter(element => this.matchesElement(element, selector, outletName));\n  }\n  matchesElement(element, selector, outletName) {\n    const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || \"\";\n    return element.matches(selector) && controllerAttribute.split(\" \").includes(outletName);\n  }\n}\nclass Scope {\n  constructor(schema, element, identifier, logger) {\n    this.targets = new TargetSet(this);\n    this.classes = new ClassMap(this);\n    this.data = new DataMap(this);\n    this.containsElement = element => {\n      return element.closest(this.controllerSelector) === this.element;\n    };\n    this.schema = schema;\n    this.element = element;\n    this.identifier = identifier;\n    this.guide = new Guide(logger);\n    this.outlets = new OutletSet(this.documentScope, element);\n  }\n  findElement(selector) {\n    return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);\n  }\n  findAllElements(selector) {\n    return [...(this.element.matches(selector) ? [this.element] : []), ...this.queryElements(selector).filter(this.containsElement)];\n  }\n  queryElements(selector) {\n    return Array.from(this.element.querySelectorAll(selector));\n  }\n  get controllerSelector() {\n    return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);\n  }\n  get isDocumentScope() {\n    return this.element === document.documentElement;\n  }\n  get documentScope() {\n    return this.isDocumentScope ? this : new Scope(this.schema, document.documentElement, this.identifier, this.guide.logger);\n  }\n}\nclass ScopeObserver {\n  constructor(element, schema, delegate) {\n    this.element = element;\n    this.schema = schema;\n    this.delegate = delegate;\n    this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);\n    this.scopesByIdentifierByElement = new WeakMap();\n    this.scopeReferenceCounts = new WeakMap();\n  }\n  start() {\n    this.valueListObserver.start();\n  }\n  stop() {\n    this.valueListObserver.stop();\n  }\n  get controllerAttribute() {\n    return this.schema.controllerAttribute;\n  }\n  parseValueForToken(token) {\n    const element = token.element,\n      identifier = token.content;\n    return this.parseValueForElementAndIdentifier(element, identifier);\n  }\n  parseValueForElementAndIdentifier(element, identifier) {\n    const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);\n    let scope = scopesByIdentifier.get(identifier);\n    if (!scope) {\n      scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);\n      scopesByIdentifier.set(identifier, scope);\n    }\n    return scope;\n  }\n  elementMatchedValue(element, value) {\n    const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;\n    this.scopeReferenceCounts.set(value, referenceCount);\n    if (referenceCount == 1) {\n      this.delegate.scopeConnected(value);\n    }\n  }\n  elementUnmatchedValue(element, value) {\n    const referenceCount = this.scopeReferenceCounts.get(value);\n    if (referenceCount) {\n      this.scopeReferenceCounts.set(value, referenceCount - 1);\n      if (referenceCount == 1) {\n        this.delegate.scopeDisconnected(value);\n      }\n    }\n  }\n  fetchScopesByIdentifierForElement(element) {\n    let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);\n    if (!scopesByIdentifier) {\n      scopesByIdentifier = new Map();\n      this.scopesByIdentifierByElement.set(element, scopesByIdentifier);\n    }\n    return scopesByIdentifier;\n  }\n}\nclass Router {\n  constructor(application) {\n    this.application = application;\n    this.scopeObserver = new ScopeObserver(this.element, this.schema, this);\n    this.scopesByIdentifier = new Multimap();\n    this.modulesByIdentifier = new Map();\n  }\n  get element() {\n    return this.application.element;\n  }\n  get schema() {\n    return this.application.schema;\n  }\n  get logger() {\n    return this.application.logger;\n  }\n  get controllerAttribute() {\n    return this.schema.controllerAttribute;\n  }\n  get modules() {\n    return Array.from(this.modulesByIdentifier.values());\n  }\n  get contexts() {\n    return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), []);\n  }\n  start() {\n    this.scopeObserver.start();\n  }\n  stop() {\n    this.scopeObserver.stop();\n  }\n  loadDefinition(definition) {\n    this.unloadIdentifier(definition.identifier);\n    const module = new Module(this.application, definition);\n    this.connectModule(module);\n    const afterLoad = definition.controllerConstructor.afterLoad;\n    if (afterLoad) {\n      afterLoad.call(definition.controllerConstructor, definition.identifier, this.application);\n    }\n  }\n  unloadIdentifier(identifier) {\n    const module = this.modulesByIdentifier.get(identifier);\n    if (module) {\n      this.disconnectModule(module);\n    }\n  }\n  getContextForElementAndIdentifier(element, identifier) {\n    const module = this.modulesByIdentifier.get(identifier);\n    if (module) {\n      return module.contexts.find(context => context.element == element);\n    }\n  }\n  proposeToConnectScopeForElementAndIdentifier(element, identifier) {\n    const scope = this.scopeObserver.parseValueForElementAndIdentifier(element, identifier);\n    if (scope) {\n      this.scopeObserver.elementMatchedValue(scope.element, scope);\n    } else {\n      console.error(`Couldn't find or create scope for identifier: \"${identifier}\" and element:`, element);\n    }\n  }\n  handleError(error, message, detail) {\n    this.application.handleError(error, message, detail);\n  }\n  createScopeForElementAndIdentifier(element, identifier) {\n    return new Scope(this.schema, element, identifier, this.logger);\n  }\n  scopeConnected(scope) {\n    this.scopesByIdentifier.add(scope.identifier, scope);\n    const module = this.modulesByIdentifier.get(scope.identifier);\n    if (module) {\n      module.connectContextForScope(scope);\n    }\n  }\n  scopeDisconnected(scope) {\n    this.scopesByIdentifier.delete(scope.identifier, scope);\n    const module = this.modulesByIdentifier.get(scope.identifier);\n    if (module) {\n      module.disconnectContextForScope(scope);\n    }\n  }\n  connectModule(module) {\n    this.modulesByIdentifier.set(module.identifier, module);\n    const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n    scopes.forEach(scope => module.connectContextForScope(scope));\n  }\n  disconnectModule(module) {\n    this.modulesByIdentifier.delete(module.identifier);\n    const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n    scopes.forEach(scope => module.disconnectContextForScope(scope));\n  }\n}\nconst defaultSchema = {\n  controllerAttribute: \"data-controller\",\n  actionAttribute: \"data-action\",\n  targetAttribute: \"data-target\",\n  targetAttributeForScope: identifier => `data-${identifier}-target`,\n  outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,\n  keyMappings: Object.assign(Object.assign({\n    enter: \"Enter\",\n    tab: \"Tab\",\n    esc: \"Escape\",\n    space: \" \",\n    up: \"ArrowUp\",\n    down: \"ArrowDown\",\n    left: \"ArrowLeft\",\n    right: \"ArrowRight\",\n    home: \"Home\",\n    end: \"End\",\n    page_up: \"PageUp\",\n    page_down: \"PageDown\"\n  }, objectFromEntries(\"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(c => [c, c]))), objectFromEntries(\"0123456789\".split(\"\").map(n => [n, n])))\n};\nfunction objectFromEntries(array) {\n  return array.reduce((memo, _ref15) => {\n    let _ref16 = _slicedToArray(_ref15, 2),\n      k = _ref16[0],\n      v = _ref16[1];\n    return Object.assign(Object.assign({}, memo), {\n      [k]: v\n    });\n  }, {});\n}\nclass Application {\n  constructor() {\n    var _this2 = this;\n    let element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.documentElement;\n    let schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSchema;\n    this.logger = console;\n    this.debug = false;\n    this.logDebugActivity = function (identifier, functionName) {\n      let detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (_this2.debug) {\n        _this2.logFormattedMessage(identifier, functionName, detail);\n      }\n    };\n    this.element = element;\n    this.schema = schema;\n    this.dispatcher = new Dispatcher(this);\n    this.router = new Router(this);\n    this.actionDescriptorFilters = Object.assign({}, defaultActionDescriptorFilters);\n  }\n  static start(element, schema) {\n    const application = new this(element, schema);\n    application.start();\n    return application;\n  }\n  async start() {\n    await domReady();\n    this.logDebugActivity(\"application\", \"starting\");\n    this.dispatcher.start();\n    this.router.start();\n    this.logDebugActivity(\"application\", \"start\");\n  }\n  stop() {\n    this.logDebugActivity(\"application\", \"stopping\");\n    this.dispatcher.stop();\n    this.router.stop();\n    this.logDebugActivity(\"application\", \"stop\");\n  }\n  register(identifier, controllerConstructor) {\n    this.load({\n      identifier,\n      controllerConstructor\n    });\n  }\n  registerActionOption(name, filter) {\n    this.actionDescriptorFilters[name] = filter;\n  }\n  load(head) {\n    for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {\n      rest[_key7 - 1] = arguments[_key7];\n    }\n    const definitions = Array.isArray(head) ? head : [head, ...rest];\n    definitions.forEach(definition => {\n      if (definition.controllerConstructor.shouldLoad) {\n        this.router.loadDefinition(definition);\n      }\n    });\n  }\n  unload(head) {\n    for (var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key8 = 1; _key8 < _len7; _key8++) {\n      rest[_key8 - 1] = arguments[_key8];\n    }\n    const identifiers = Array.isArray(head) ? head : [head, ...rest];\n    identifiers.forEach(identifier => this.router.unloadIdentifier(identifier));\n  }\n  get controllers() {\n    return this.router.contexts.map(context => context.controller);\n  }\n  getControllerForElementAndIdentifier(element, identifier) {\n    const context = this.router.getContextForElementAndIdentifier(element, identifier);\n    return context ? context.controller : null;\n  }\n  handleError(error, message, detail) {\n    var _a;\n    this.logger.error(`%s\\n\\n%o\\n\\n%o`, message, error, detail);\n    (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, \"\", 0, 0, error);\n  }\n  logFormattedMessage(identifier, functionName) {\n    let detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    detail = Object.assign({\n      application: this\n    }, detail);\n    this.logger.groupCollapsed(`${identifier} #${functionName}`);\n    this.logger.log(\"details:\", Object.assign({}, detail));\n    this.logger.groupEnd();\n  }\n}\nfunction domReady() {\n  return new Promise(resolve => {\n    if (document.readyState == \"loading\") {\n      document.addEventListener(\"DOMContentLoaded\", () => resolve());\n    } else {\n      resolve();\n    }\n  });\n}\nfunction ClassPropertiesBlessing(constructor) {\n  const classes = readInheritableStaticArrayValues(constructor, \"classes\");\n  return classes.reduce((properties, classDefinition) => {\n    return Object.assign(properties, propertiesForClassDefinition(classDefinition));\n  }, {});\n}\nfunction propertiesForClassDefinition(key) {\n  return {\n    [`${key}Class`]: {\n      get() {\n        const classes = this.classes;\n        if (classes.has(key)) {\n          return classes.get(key);\n        } else {\n          const attribute = classes.getAttributeName(key);\n          throw new Error(`Missing attribute \"${attribute}\"`);\n        }\n      }\n    },\n    [`${key}Classes`]: {\n      get() {\n        return this.classes.getAll(key);\n      }\n    },\n    [`has${capitalize(key)}Class`]: {\n      get() {\n        return this.classes.has(key);\n      }\n    }\n  };\n}\nfunction OutletPropertiesBlessing(constructor) {\n  const outlets = readInheritableStaticArrayValues(constructor, \"outlets\");\n  return outlets.reduce((properties, outletDefinition) => {\n    return Object.assign(properties, propertiesForOutletDefinition(outletDefinition));\n  }, {});\n}\nfunction getOutletController(controller, element, identifier) {\n  return controller.application.getControllerForElementAndIdentifier(element, identifier);\n}\nfunction getControllerAndEnsureConnectedScope(controller, element, outletName) {\n  let outletController = getOutletController(controller, element, outletName);\n  if (outletController) return outletController;\n  controller.application.router.proposeToConnectScopeForElementAndIdentifier(element, outletName);\n  outletController = getOutletController(controller, element, outletName);\n  if (outletController) return outletController;\n}\nfunction propertiesForOutletDefinition(name) {\n  const camelizedName = namespaceCamelize(name);\n  return {\n    [`${camelizedName}Outlet`]: {\n      get() {\n        const outletElement = this.outlets.find(name);\n        const selector = this.outlets.getSelectorForOutletName(name);\n        if (outletElement) {\n          const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);\n          if (outletController) return outletController;\n          throw new Error(`The provided outlet element is missing an outlet controller \"${name}\" instance for host controller \"${this.identifier}\"`);\n        }\n        throw new Error(`Missing outlet element \"${name}\" for host controller \"${this.identifier}\". Stimulus couldn't find a matching outlet element using selector \"${selector}\".`);\n      }\n    },\n    [`${camelizedName}Outlets`]: {\n      get() {\n        const outlets = this.outlets.findAll(name);\n        if (outlets.length > 0) {\n          return outlets.map(outletElement => {\n            const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);\n            if (outletController) return outletController;\n            console.warn(`The provided outlet element is missing an outlet controller \"${name}\" instance for host controller \"${this.identifier}\"`, outletElement);\n          }).filter(controller => controller);\n        }\n        return [];\n      }\n    },\n    [`${camelizedName}OutletElement`]: {\n      get() {\n        const outletElement = this.outlets.find(name);\n        const selector = this.outlets.getSelectorForOutletName(name);\n        if (outletElement) {\n          return outletElement;\n        } else {\n          throw new Error(`Missing outlet element \"${name}\" for host controller \"${this.identifier}\". Stimulus couldn't find a matching outlet element using selector \"${selector}\".`);\n        }\n      }\n    },\n    [`${camelizedName}OutletElements`]: {\n      get() {\n        return this.outlets.findAll(name);\n      }\n    },\n    [`has${capitalize(camelizedName)}Outlet`]: {\n      get() {\n        return this.outlets.has(name);\n      }\n    }\n  };\n}\nfunction TargetPropertiesBlessing(constructor) {\n  const targets = readInheritableStaticArrayValues(constructor, \"targets\");\n  return targets.reduce((properties, targetDefinition) => {\n    return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));\n  }, {});\n}\nfunction propertiesForTargetDefinition(name) {\n  return {\n    [`${name}Target`]: {\n      get() {\n        const target = this.targets.find(name);\n        if (target) {\n          return target;\n        } else {\n          throw new Error(`Missing target element \"${name}\" for \"${this.identifier}\" controller`);\n        }\n      }\n    },\n    [`${name}Targets`]: {\n      get() {\n        return this.targets.findAll(name);\n      }\n    },\n    [`has${capitalize(name)}Target`]: {\n      get() {\n        return this.targets.has(name);\n      }\n    }\n  };\n}\nfunction ValuePropertiesBlessing(constructor) {\n  const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, \"values\");\n  const propertyDescriptorMap = {\n    valueDescriptorMap: {\n      get() {\n        return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {\n          const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier);\n          const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);\n          return Object.assign(result, {\n            [attributeName]: valueDescriptor\n          });\n        }, {});\n      }\n    }\n  };\n  return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {\n    return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));\n  }, propertyDescriptorMap);\n}\nfunction propertiesForValueDefinitionPair(valueDefinitionPair, controller) {\n  const definition = parseValueDefinitionPair(valueDefinitionPair, controller);\n  const key = definition.key,\n    name = definition.name,\n    read = definition.reader,\n    write = definition.writer;\n  return {\n    [name]: {\n      get() {\n        const value = this.data.get(key);\n        if (value !== null) {\n          return read(value);\n        } else {\n          return definition.defaultValue;\n        }\n      },\n      set(value) {\n        if (value === undefined) {\n          this.data.delete(key);\n        } else {\n          this.data.set(key, write(value));\n        }\n      }\n    },\n    [`has${capitalize(name)}`]: {\n      get() {\n        return this.data.has(key) || definition.hasCustomDefaultValue;\n      }\n    }\n  };\n}\nfunction parseValueDefinitionPair(_ref17, controller) {\n  let _ref18 = _slicedToArray(_ref17, 2),\n    token = _ref18[0],\n    typeDefinition = _ref18[1];\n  return valueDescriptorForTokenAndTypeDefinition({\n    controller,\n    token,\n    typeDefinition\n  });\n}\nfunction parseValueTypeConstant(constant) {\n  switch (constant) {\n    case Array:\n      return \"array\";\n    case Boolean:\n      return \"boolean\";\n    case Number:\n      return \"number\";\n    case Object:\n      return \"object\";\n    case String:\n      return \"string\";\n  }\n}\nfunction parseValueTypeDefault(defaultValue) {\n  switch (typeof defaultValue) {\n    case \"boolean\":\n      return \"boolean\";\n    case \"number\":\n      return \"number\";\n    case \"string\":\n      return \"string\";\n  }\n  if (Array.isArray(defaultValue)) return \"array\";\n  if (Object.prototype.toString.call(defaultValue) === \"[object Object]\") return \"object\";\n}\nfunction parseValueTypeObject(payload) {\n  const controller = payload.controller,\n    token = payload.token,\n    typeObject = payload.typeObject;\n  const hasType = isSomething(typeObject.type);\n  const hasDefault = isSomething(typeObject.default);\n  const fullObject = hasType && hasDefault;\n  const onlyType = hasType && !hasDefault;\n  const onlyDefault = !hasType && hasDefault;\n  const typeFromObject = parseValueTypeConstant(typeObject.type);\n  const typeFromDefaultValue = parseValueTypeDefault(payload.typeObject.default);\n  if (onlyType) return typeFromObject;\n  if (onlyDefault) return typeFromDefaultValue;\n  if (typeFromObject !== typeFromDefaultValue) {\n    const propertyPath = controller ? `${controller}.${token}` : token;\n    throw new Error(`The specified default value for the Stimulus Value \"${propertyPath}\" must match the defined type \"${typeFromObject}\". The provided default value of \"${typeObject.default}\" is of type \"${typeFromDefaultValue}\".`);\n  }\n  if (fullObject) return typeFromObject;\n}\nfunction parseValueTypeDefinition(payload) {\n  const controller = payload.controller,\n    token = payload.token,\n    typeDefinition = payload.typeDefinition;\n  const typeObject = {\n    controller,\n    token,\n    typeObject: typeDefinition\n  };\n  const typeFromObject = parseValueTypeObject(typeObject);\n  const typeFromDefaultValue = parseValueTypeDefault(typeDefinition);\n  const typeFromConstant = parseValueTypeConstant(typeDefinition);\n  const type = typeFromObject || typeFromDefaultValue || typeFromConstant;\n  if (type) return type;\n  const propertyPath = controller ? `${controller}.${typeDefinition}` : token;\n  throw new Error(`Unknown value type \"${propertyPath}\" for \"${token}\" value`);\n}\nfunction defaultValueForDefinition(typeDefinition) {\n  const constant = parseValueTypeConstant(typeDefinition);\n  if (constant) return defaultValuesByType[constant];\n  const hasDefault = hasProperty(typeDefinition, \"default\");\n  const hasType = hasProperty(typeDefinition, \"type\");\n  const typeObject = typeDefinition;\n  if (hasDefault) return typeObject.default;\n  if (hasType) {\n    const type = typeObject.type;\n    const constantFromType = parseValueTypeConstant(type);\n    if (constantFromType) return defaultValuesByType[constantFromType];\n  }\n  return typeDefinition;\n}\nfunction valueDescriptorForTokenAndTypeDefinition(payload) {\n  const token = payload.token,\n    typeDefinition = payload.typeDefinition;\n  const key = `${dasherize(token)}-value`;\n  const type = parseValueTypeDefinition(payload);\n  return {\n    type,\n    key,\n    name: camelize(key),\n    get defaultValue() {\n      return defaultValueForDefinition(typeDefinition);\n    },\n    get hasCustomDefaultValue() {\n      return parseValueTypeDefault(typeDefinition) !== undefined;\n    },\n    reader: readers[type],\n    writer: writers[type] || writers.default\n  };\n}\nconst defaultValuesByType = {\n  get array() {\n    return [];\n  },\n  boolean: false,\n  number: 0,\n  get object() {\n    return {};\n  },\n  string: \"\"\n};\nconst readers = {\n  array(value) {\n    const array = JSON.parse(value);\n    if (!Array.isArray(array)) {\n      throw new TypeError(`expected value of type \"array\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(array)}\"`);\n    }\n    return array;\n  },\n  boolean(value) {\n    return !(value == \"0\" || String(value).toLowerCase() == \"false\");\n  },\n  number(value) {\n    return Number(value.replace(/_/g, \"\"));\n  },\n  object(value) {\n    const object = JSON.parse(value);\n    if (object === null || typeof object != \"object\" || Array.isArray(object)) {\n      throw new TypeError(`expected value of type \"object\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(object)}\"`);\n    }\n    return object;\n  },\n  string(value) {\n    return value;\n  }\n};\nconst writers = {\n  default: writeString,\n  array: writeJSON,\n  object: writeJSON\n};\nfunction writeJSON(value) {\n  return JSON.stringify(value);\n}\nfunction writeString(value) {\n  return `${value}`;\n}\nclass Controller {\n  constructor(context) {\n    this.context = context;\n  }\n  static get shouldLoad() {\n    return true;\n  }\n  static afterLoad(_identifier, _application) {\n    return;\n  }\n  get application() {\n    return this.context.application;\n  }\n  get scope() {\n    return this.context.scope;\n  }\n  get element() {\n    return this.scope.element;\n  }\n  get identifier() {\n    return this.scope.identifier;\n  }\n  get targets() {\n    return this.scope.targets;\n  }\n  get outlets() {\n    return this.scope.outlets;\n  }\n  get classes() {\n    return this.scope.classes;\n  }\n  get data() {\n    return this.scope.data;\n  }\n  initialize() {}\n  connect() {}\n  disconnect() {}\n  dispatch(eventName) {\n    let _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref19$target = _ref19.target,\n      target = _ref19$target === void 0 ? this.element : _ref19$target,\n      _ref19$detail = _ref19.detail,\n      detail = _ref19$detail === void 0 ? {} : _ref19$detail,\n      _ref19$prefix = _ref19.prefix,\n      prefix = _ref19$prefix === void 0 ? this.identifier : _ref19$prefix,\n      _ref19$bubbles = _ref19.bubbles,\n      bubbles = _ref19$bubbles === void 0 ? true : _ref19$bubbles,\n      _ref19$cancelable = _ref19.cancelable,\n      cancelable = _ref19$cancelable === void 0 ? true : _ref19$cancelable;\n    const type = prefix ? `${prefix}:${eventName}` : eventName;\n    const event = new CustomEvent(type, {\n      detail,\n      bubbles,\n      cancelable\n    });\n    target.dispatchEvent(event);\n    return event;\n  }\n}\nController.blessings = [ClassPropertiesBlessing, TargetPropertiesBlessing, ValuePropertiesBlessing, OutletPropertiesBlessing];\nController.targets = [];\nController.outlets = [];\nController.values = {};\nexport { Application, AttributeObserver, Context, Controller, ElementObserver, IndexedMultimap, Multimap, SelectorObserver, StringMapObserver, TokenListObserver, ValueListObserver, add, defaultSchema, del, fetch, prune };","export * from \"@hotwired/stimulus-webpack-helpers\";","function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function (t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function (t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function (e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function () { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function (e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function (t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function (t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function (t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function (t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function (e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var n = 0, F = function () {}; return { s: F, n: function () { return n >= r.length ? { done: !0 } : { done: !1, value: r[n++] }; }, e: function (r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function () { t = t.call(r); }, n: function () { var r = t.next(); return a = r.done, r; }, e: function (r) { u = !0, o = r; }, f: function () { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/**\n* Tom Select v2.4.3\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n*/\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.TomSelect = factory());\n})(this, function () {\n  'use strict';\n\n  /**\n   * MicroEvent - to make any js object an event emitter\n   *\n   * - pure javascript - server compatible, browser compatible\n   * - dont rely on the browser doms\n   * - super simple - you get it immediatly, no mistery, no magic involved\n   *\n   * @author Jerome Etienne (https://github.com/jeromeetienne)\n   */\n\n  /**\n   * Execute callback for each event in space separated list of event names\n   *\n   */\n  var _marked = /*#__PURE__*/_regeneratorRuntime().mark(generator);\n  function forEvents(events, callback) {\n    events.split(/\\s+/).forEach(event => {\n      callback(event);\n    });\n  }\n  class MicroEvent {\n    constructor() {\n      this._events = {};\n    }\n    on(events, fct) {\n      forEvents(events, event => {\n        const event_array = this._events[event] || [];\n        event_array.push(fct);\n        this._events[event] = event_array;\n      });\n    }\n    off(events, fct) {\n      var n = arguments.length;\n      if (n === 0) {\n        this._events = {};\n        return;\n      }\n      forEvents(events, event => {\n        if (n === 1) {\n          delete this._events[event];\n          return;\n        }\n        const event_array = this._events[event];\n        if (event_array === undefined) return;\n        event_array.splice(event_array.indexOf(fct), 1);\n        this._events[event] = event_array;\n      });\n    }\n    trigger(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var self = this;\n      forEvents(events, event => {\n        const event_array = self._events[event];\n        if (event_array === undefined) return;\n        event_array.forEach(fct => {\n          fct.apply(self, args);\n        });\n      });\n    }\n  }\n\n  /**\n   * microplugin.js\n   * Copyright (c) 2013 Brian Reavis & contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   * @author Brian Reavis <brian@thirdroute.com>\n   */\n\n  function MicroPlugin(Interface) {\n    Interface.plugins = {};\n    return class extends Interface {\n      constructor() {\n        super(...arguments);\n        this.plugins = {\n          names: [],\n          settings: {},\n          requested: {},\n          loaded: {}\n        };\n      }\n      /**\n       * Registers a plugin.\n       *\n       * @param {function} fn\n       */\n      static define(name, fn) {\n        Interface.plugins[name] = {\n          'name': name,\n          'fn': fn\n        };\n      }\n\n      /**\n       * Initializes the listed plugins (with options).\n       * Acceptable formats:\n       *\n       * List (without options):\n       *   ['a', 'b', 'c']\n       *\n       * List (with options):\n       *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]\n       *\n       * Hash (with options):\n       *   {'a': { ... }, 'b': { ... }, 'c': { ... }}\n       *\n       * @param {array|object} plugins\n       */\n      initializePlugins(plugins) {\n        var key, name;\n        const self = this;\n        const queue = [];\n        if (Array.isArray(plugins)) {\n          plugins.forEach(plugin => {\n            if (typeof plugin === 'string') {\n              queue.push(plugin);\n            } else {\n              self.plugins.settings[plugin.name] = plugin.options;\n              queue.push(plugin.name);\n            }\n          });\n        } else if (plugins) {\n          for (key in plugins) {\n            if (plugins.hasOwnProperty(key)) {\n              self.plugins.settings[key] = plugins[key];\n              queue.push(key);\n            }\n          }\n        }\n        while (name = queue.shift()) {\n          self.require(name);\n        }\n      }\n      loadPlugin(name) {\n        var self = this;\n        var plugins = self.plugins;\n        var plugin = Interface.plugins[name];\n        if (!Interface.plugins.hasOwnProperty(name)) {\n          throw new Error('Unable to find \"' + name + '\" plugin');\n        }\n        plugins.requested[name] = true;\n        plugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);\n        plugins.names.push(name);\n      }\n\n      /**\n       * Initializes a plugin.\n       *\n       */\n      require(name) {\n        var self = this;\n        var plugins = self.plugins;\n        if (!self.plugins.loaded.hasOwnProperty(name)) {\n          if (plugins.requested[name]) {\n            throw new Error('Plugin has circular dependency (\"' + name + '\")');\n          }\n          self.loadPlugin(name);\n        }\n        return plugins.loaded[name];\n      }\n    };\n  }\n\n  /**\n   * Convert array of strings to a regular expression\n   *\tex ['ab','a'] => (?:ab|a)\n   * \tex ['a','b'] => [ab]\n   */\n  const arrayToPattern = chars => {\n    chars = chars.filter(Boolean);\n    if (chars.length < 2) {\n      return chars[0] || '';\n    }\n    return maxValueLength(chars) == 1 ? '[' + chars.join('') + ']' : '(?:' + chars.join('|') + ')';\n  };\n  const sequencePattern = array => {\n    if (!hasDuplicates(array)) {\n      return array.join('');\n    }\n    let pattern = '';\n    let prev_char_count = 0;\n    const prev_pattern = () => {\n      if (prev_char_count > 1) {\n        pattern += '{' + prev_char_count + '}';\n      }\n    };\n    array.forEach((char, i) => {\n      if (char === array[i - 1]) {\n        prev_char_count++;\n        return;\n      }\n      prev_pattern();\n      pattern += char;\n      prev_char_count = 1;\n    });\n    prev_pattern();\n    return pattern;\n  };\n  /**\n   * Convert array of strings to a regular expression\n   *\tex ['ab','a'] => (?:ab|a)\n   * \tex ['a','b'] => [ab]\n   */\n  const setToPattern = chars => {\n    let array = Array.from(chars);\n    return arrayToPattern(array);\n  };\n  /**\n   * https://stackoverflow.com/questions/7376598/in-javascript-how-do-i-check-if-an-array-has-duplicate-values\n   */\n  const hasDuplicates = array => {\n    return new Set(array).size !== array.length;\n  };\n  /**\n   * https://stackoverflow.com/questions/63006601/why-does-u-throw-an-invalid-escape-error\n   */\n  const escape_regex = str => {\n    return (str + '').replace(/([\\$\\(\\)\\*\\+\\.\\?\\[\\]\\^\\{\\|\\}\\\\])/gu, '\\\\$1');\n  };\n  /**\n   * Return the max length of array values\n   */\n  const maxValueLength = array => {\n    return array.reduce((longest, value) => Math.max(longest, unicodeLength(value)), 0);\n  };\n  const unicodeLength = str => {\n    return Array.from(str).length;\n  };\n\n  /**\n   * Get all possible combinations of substrings that add up to the given string\n   * https://stackoverflow.com/questions/30169587/find-all-the-combination-of-substrings-that-add-up-to-the-given-string\n   */\n  const allSubstrings = input => {\n    if (input.length === 1) return [[input]];\n    let result = [];\n    const start = input.substring(1);\n    const suba = allSubstrings(start);\n    suba.forEach(function (subresult) {\n      let tmp = subresult.slice(0);\n      tmp[0] = input.charAt(0) + tmp[0];\n      result.push(tmp);\n      tmp = subresult.slice(0);\n      tmp.unshift(input.charAt(0));\n      result.push(tmp);\n    });\n    return result;\n  };\n  const code_points = [[0, 65535]];\n  const accent_pat = '[\\u0300-\\u036F\\u{b7}\\u{2be}\\u{2bc}]';\n  let unicode_map;\n  let multi_char_reg;\n  const max_char_length = 3;\n  const latin_convert = {};\n  const latin_condensed = {\n    '/': '⁄∕',\n    '0': '߀',\n    \"a\": \"ⱥɐɑ\",\n    \"aa\": \"ꜳ\",\n    \"ae\": \"æǽǣ\",\n    \"ao\": \"ꜵ\",\n    \"au\": \"ꜷ\",\n    \"av\": \"ꜹꜻ\",\n    \"ay\": \"ꜽ\",\n    \"b\": \"ƀɓƃ\",\n    \"c\": \"ꜿƈȼↄ\",\n    \"d\": \"đɗɖᴅƌꮷԁɦ\",\n    \"e\": \"ɛǝᴇɇ\",\n    \"f\": \"ꝼƒ\",\n    \"g\": \"ǥɠꞡᵹꝿɢ\",\n    \"h\": \"ħⱨⱶɥ\",\n    \"i\": \"ɨı\",\n    \"j\": \"ɉȷ\",\n    \"k\": \"ƙⱪꝁꝃꝅꞣ\",\n    \"l\": \"łƚɫⱡꝉꝇꞁɭ\",\n    \"m\": \"ɱɯϻ\",\n    \"n\": \"ꞥƞɲꞑᴎлԉ\",\n    \"o\": \"øǿɔɵꝋꝍᴑ\",\n    \"oe\": \"œ\",\n    \"oi\": \"ƣ\",\n    \"oo\": \"ꝏ\",\n    \"ou\": \"ȣ\",\n    \"p\": \"ƥᵽꝑꝓꝕρ\",\n    \"q\": \"ꝗꝙɋ\",\n    \"r\": \"ɍɽꝛꞧꞃ\",\n    \"s\": \"ßȿꞩꞅʂ\",\n    \"t\": \"ŧƭʈⱦꞇ\",\n    \"th\": \"þ\",\n    \"tz\": \"ꜩ\",\n    \"u\": \"ʉ\",\n    \"v\": \"ʋꝟʌ\",\n    \"vy\": \"ꝡ\",\n    \"w\": \"ⱳ\",\n    \"y\": \"ƴɏỿ\",\n    \"z\": \"ƶȥɀⱬꝣ\",\n    \"hv\": \"ƕ\"\n  };\n  for (let latin in latin_condensed) {\n    let unicode = latin_condensed[latin] || '';\n    for (let i = 0; i < unicode.length; i++) {\n      let char = unicode.substring(i, i + 1);\n      latin_convert[char] = latin;\n    }\n  }\n  const convert_pat = new RegExp(Object.keys(latin_convert).join('|') + '|' + accent_pat, 'gu');\n  /**\n   * Initialize the unicode_map from the give code point ranges\n   */\n  const initialize = _code_points => {\n    if (unicode_map !== undefined) return;\n    unicode_map = generateMap(code_points);\n  };\n  /**\n   * Helper method for normalize a string\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n   */\n  const normalize = function (str) {\n    let form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'NFKD';\n    return str.normalize(form);\n  };\n  /**\n   * Remove accents without reordering string\n   * calling str.normalize('NFKD') on \\u{594}\\u{595}\\u{596} becomes \\u{596}\\u{594}\\u{595}\n   * via https://github.com/krisk/Fuse/issues/133#issuecomment-318692703\n   */\n  const asciifold = str => {\n    return Array.from(str).reduce(\n    /**\n     * @param {string} result\n     * @param {string} char\n     */\n    (result, char) => {\n      return result + _asciifold(char);\n    }, '');\n  };\n  const _asciifold = str => {\n    str = normalize(str).toLowerCase().replace(convert_pat, (/** @type {string} */char) => {\n      return latin_convert[char] || '';\n    });\n    //return str;\n    return normalize(str, 'NFC');\n  };\n  /**\n   * Generate a list of unicode variants from the list of code points\n   */\n  function generator(code_points) {\n    var _iterator, _step, _step$value, code_point_min, code_point_max, i, composed, folded;\n    return _regeneratorRuntime().wrap(function generator$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _iterator = _createForOfIteratorHelper(code_points);\n          _context.prev = 1;\n          _iterator.s();\n        case 3:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 22;\n            break;\n          }\n          _step$value = _slicedToArray(_step.value, 2), code_point_min = _step$value[0], code_point_max = _step$value[1];\n          i = code_point_min;\n        case 6:\n          if (!(i <= code_point_max)) {\n            _context.next = 20;\n            break;\n          }\n          composed = String.fromCharCode(i);\n          folded = asciifold(composed);\n          if (!(folded == composed.toLowerCase())) {\n            _context.next = 11;\n            break;\n          }\n          return _context.abrupt(\"continue\", 17);\n        case 11:\n          if (!(folded.length > max_char_length)) {\n            _context.next = 13;\n            break;\n          }\n          return _context.abrupt(\"continue\", 17);\n        case 13:\n          if (!(folded.length == 0)) {\n            _context.next = 15;\n            break;\n          }\n          return _context.abrupt(\"continue\", 17);\n        case 15:\n          _context.next = 17;\n          return {\n            folded: folded,\n            composed: composed,\n            code_point: i\n          };\n        case 17:\n          i++;\n          _context.next = 6;\n          break;\n        case 20:\n          _context.next = 3;\n          break;\n        case 22:\n          _context.next = 27;\n          break;\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](1);\n          _iterator.e(_context.t0);\n        case 27:\n          _context.prev = 27;\n          _iterator.f();\n          return _context.finish(27);\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _marked, null, [[1, 24, 27, 30]]);\n  }\n  /**\n   * Generate a unicode map from the list of code points\n   */\n  const generateSets = code_points => {\n    const unicode_sets = {};\n    const addMatching = (folded, to_add) => {\n      /** @type {Set<string>} */\n      const folded_set = unicode_sets[folded] || new Set();\n      const patt = new RegExp('^' + setToPattern(folded_set) + '$', 'iu');\n      if (to_add.match(patt)) {\n        return;\n      }\n      folded_set.add(escape_regex(to_add));\n      unicode_sets[folded] = folded_set;\n    };\n    var _iterator2 = _createForOfIteratorHelper(generator(code_points)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        let value = _step2.value;\n        addMatching(value.folded, value.folded);\n        addMatching(value.folded, value.composed);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return unicode_sets;\n  };\n  /**\n   * Generate a unicode map from the list of code points\n   * ae => (?:(?:ae|Æ|Ǽ|Ǣ)|(?:A|Ⓐ|Ａ...)(?:E|ɛ|Ⓔ...))\n   */\n  const generateMap = code_points => {\n    const unicode_sets = generateSets(code_points);\n    const unicode_map = {};\n    let multi_char = [];\n    for (let folded in unicode_sets) {\n      let set = unicode_sets[folded];\n      if (set) {\n        unicode_map[folded] = setToPattern(set);\n      }\n      if (folded.length > 1) {\n        multi_char.push(escape_regex(folded));\n      }\n    }\n    multi_char.sort((a, b) => b.length - a.length);\n    const multi_char_patt = arrayToPattern(multi_char);\n    multi_char_reg = new RegExp('^' + multi_char_patt, 'u');\n    return unicode_map;\n  };\n  /**\n   * Map each element of an array from its folded value to all possible unicode matches\n   */\n  const mapSequence = function (strings) {\n    let min_replacement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let chars_replaced = 0;\n    strings = strings.map(str => {\n      if (unicode_map[str]) {\n        chars_replaced += str.length;\n      }\n      return unicode_map[str] || str;\n    });\n    if (chars_replaced >= min_replacement) {\n      return sequencePattern(strings);\n    }\n    return '';\n  };\n  /**\n   * Convert a short string and split it into all possible patterns\n   * Keep a pattern only if min_replacement is met\n   *\n   * 'abc'\n   * \t\t=> [['abc'],['ab','c'],['a','bc'],['a','b','c']]\n   *\t\t=> ['abc-pattern','ab-c-pattern'...]\n   */\n  const substringsToPattern = function (str) {\n    let min_replacement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    min_replacement = Math.max(min_replacement, str.length - 1);\n    return arrayToPattern(allSubstrings(str).map(sub_pat => {\n      return mapSequence(sub_pat, min_replacement);\n    }));\n  };\n  /**\n   * Convert an array of sequences into a pattern\n   * [{start:0,end:3,length:3,substr:'iii'}...] => (?:iii...)\n   */\n  const sequencesToPattern = function (sequences) {\n    let all = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let min_replacement = sequences.length > 1 ? 1 : 0;\n    return arrayToPattern(sequences.map(sequence => {\n      let seq = [];\n      const len = all ? sequence.length() : sequence.length() - 1;\n      for (let j = 0; j < len; j++) {\n        seq.push(substringsToPattern(sequence.substrs[j] || '', min_replacement));\n      }\n      return sequencePattern(seq);\n    }));\n  };\n  /**\n   * Return true if the sequence is already in the sequences\n   */\n  const inSequences = (needle_seq, sequences) => {\n    var _iterator3 = _createForOfIteratorHelper(sequences),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        const seq = _step3.value;\n        if (seq.start != needle_seq.start || seq.end != needle_seq.end) {\n          continue;\n        }\n        if (seq.substrs.join('') !== needle_seq.substrs.join('')) {\n          continue;\n        }\n        let needle_parts = needle_seq.parts;\n        const filter = part => {\n          var _iterator4 = _createForOfIteratorHelper(needle_parts),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              const needle_part = _step4.value;\n              if (needle_part.start === part.start && needle_part.substr === part.substr) {\n                return false;\n              }\n              if (part.length == 1 || needle_part.length == 1) {\n                continue;\n              }\n              // check for overlapping parts\n              // a = ['::=','==']\n              // b = ['::','===']\n              // a = ['r','sm']\n              // b = ['rs','m']\n              if (part.start < needle_part.start && part.end > needle_part.start) {\n                return true;\n              }\n              if (needle_part.start < part.start && needle_part.end > part.start) {\n                return true;\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          return false;\n        };\n        let filtered = seq.parts.filter(filter);\n        if (filtered.length > 0) {\n          continue;\n        }\n        return true;\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    return false;\n  };\n  class Sequence {\n    constructor() {\n      this.parts = void 0;\n      this.substrs = void 0;\n      this.start = void 0;\n      this.end = void 0;\n      this.parts = [];\n      this.substrs = [];\n      this.start = 0;\n      this.end = 0;\n    }\n    add(part) {\n      if (part) {\n        this.parts.push(part);\n        this.substrs.push(part.substr);\n        this.start = Math.min(part.start, this.start);\n        this.end = Math.max(part.end, this.end);\n      }\n    }\n    last() {\n      return this.parts[this.parts.length - 1];\n    }\n    length() {\n      return this.parts.length;\n    }\n    clone(position, last_piece) {\n      let clone = new Sequence();\n      let parts = JSON.parse(JSON.stringify(this.parts));\n      let last_part = parts.pop();\n      var _iterator5 = _createForOfIteratorHelper(parts),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          const part = _step5.value;\n          clone.add(part);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      let last_substr = last_piece.substr.substring(0, position - last_part.start);\n      let clone_last_len = last_substr.length;\n      clone.add({\n        start: last_part.start,\n        end: last_part.start + clone_last_len,\n        length: clone_last_len,\n        substr: last_substr\n      });\n      return clone;\n    }\n  }\n  /**\n   * Expand a regular expression pattern to include unicode variants\n   * \teg /a/ becomes /aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑAⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ/\n   *\n   * Issue:\n   *  ﺊﺋ [ 'ﺊ = \\\\u{fe8a}', 'ﺋ = \\\\u{fe8b}' ]\n   *\tbecomes:\tئئ [ 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}', 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}' ]\n   *\n   *\tİĲ = IIJ = ⅡJ\n   *\n   * \t1/2/4\n   */\n  const getPattern = str => {\n    initialize();\n    str = asciifold(str);\n    let pattern = '';\n    let sequences = [new Sequence()];\n    for (let i = 0; i < str.length; i++) {\n      let substr = str.substring(i);\n      let match = substr.match(multi_char_reg);\n      const char = str.substring(i, i + 1);\n      const match_str = match ? match[0] : null;\n      // loop through sequences\n      // add either the char or multi_match\n      let overlapping = [];\n      let added_types = new Set();\n      var _iterator6 = _createForOfIteratorHelper(sequences),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          const sequence = _step6.value;\n          const last_piece = sequence.last();\n          if (!last_piece || last_piece.length == 1 || last_piece.end <= i) {\n            // if we have a multi match\n            if (match_str) {\n              const len = match_str.length;\n              sequence.add({\n                start: i,\n                end: i + len,\n                length: len,\n                substr: match_str\n              });\n              added_types.add('1');\n            } else {\n              sequence.add({\n                start: i,\n                end: i + 1,\n                length: 1,\n                substr: char\n              });\n              added_types.add('2');\n            }\n          } else if (match_str) {\n            let clone = sequence.clone(i, last_piece);\n            const len = match_str.length;\n            clone.add({\n              start: i,\n              end: i + len,\n              length: len,\n              substr: match_str\n            });\n            overlapping.push(clone);\n          } else {\n            // don't add char\n            // adding would create invalid patterns: 234 => [2,34,4]\n            added_types.add('3');\n          }\n        }\n        // if we have overlapping\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      if (overlapping.length > 0) {\n        // ['ii','iii'] before ['i','i','iii']\n        overlapping = overlapping.sort((a, b) => {\n          return a.length() - b.length();\n        });\n        var _iterator7 = _createForOfIteratorHelper(overlapping),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            let clone = _step7.value;\n            // don't add if we already have an equivalent sequence\n            if (inSequences(clone, sequences)) {\n              continue;\n            }\n            sequences.push(clone);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n        continue;\n      }\n      // if we haven't done anything unique\n      // clean up the patterns\n      // helps keep patterns smaller\n      // if str = 'r₨㎧aarss', pattern will be 446 instead of 655\n      if (i > 0 && added_types.size == 1 && !added_types.has('3')) {\n        pattern += sequencesToPattern(sequences, false);\n        let new_seq = new Sequence();\n        const old_seq = sequences[0];\n        if (old_seq) {\n          new_seq.add(old_seq.last());\n        }\n        sequences = [new_seq];\n      }\n    }\n    pattern += sequencesToPattern(sequences, true);\n    return pattern;\n  };\n\n  /**\n   * A property getter resolving dot-notation\n   * @param  {Object}  obj     The root object to fetch property on\n   * @param  {String}  name    The optionally dotted property name to fetch\n   * @return {Object}          The resolved property value\n   */\n  const getAttr = (obj, name) => {\n    if (!obj) return;\n    return obj[name];\n  };\n  /**\n   * A property getter resolving dot-notation\n   * @param  {Object}  obj     The root object to fetch property on\n   * @param  {String}  name    The optionally dotted property name to fetch\n   * @return {Object}          The resolved property value\n   */\n  const getAttrNesting = (obj, name) => {\n    if (!obj) return;\n    var part,\n      names = name.split(\".\");\n    while ((part = names.shift()) && (obj = obj[part]));\n    return obj;\n  };\n  /**\n   * Calculates how close of a match the\n   * given value is against a search token.\n   *\n   */\n  const scoreValue = (value, token, weight) => {\n    var score, pos;\n    if (!value) return 0;\n    value = value + '';\n    if (token.regex == null) return 0;\n    pos = value.search(token.regex);\n    if (pos === -1) return 0;\n    score = token.string.length / value.length;\n    if (pos === 0) score += 0.5;\n    return score * weight;\n  };\n  /**\n   * Cast object property to an array if it exists and has a value\n   *\n   */\n  const propToArray = (obj, key) => {\n    var value = obj[key];\n    if (typeof value == 'function') return value;\n    if (value && !Array.isArray(value)) {\n      obj[key] = [value];\n    }\n  };\n  /**\n   * Iterates over arrays and hashes.\n   *\n   * ```\n   * iterate(this.items, function(item, id) {\n   *    // invoked for each item\n   * });\n   * ```\n   *\n   */\n  const iterate$1 = (object, callback) => {\n    if (Array.isArray(object)) {\n      object.forEach(callback);\n    } else {\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          callback(object[key], key);\n        }\n      }\n    }\n  };\n  const cmp = (a, b) => {\n    if (typeof a === 'number' && typeof b === 'number') {\n      return a > b ? 1 : a < b ? -1 : 0;\n    }\n    a = asciifold(a + '').toLowerCase();\n    b = asciifold(b + '').toLowerCase();\n    if (a > b) return 1;\n    if (b > a) return -1;\n    return 0;\n  };\n\n  /**\n   * sifter.js\n   * Copyright (c) 2013–2020 Brian Reavis & contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   * @author Brian Reavis <brian@thirdroute.com>\n   */\n  class Sifter {\n    /**\n     * Textually searches arrays and hashes of objects\n     * by property (or multiple properties). Designed\n     * specifically for autocomplete.\n     *\n     */\n    constructor(items, settings) {\n      this.items = void 0;\n      // []|{};\n      this.settings = void 0;\n      this.items = items;\n      this.settings = settings || {\n        diacritics: true\n      };\n    }\n    /**\n     * Splits a search string into an array of individual\n     * regexps to be used to match results.\n     *\n     */\n    tokenize(query, respect_word_boundaries, weights) {\n      if (!query || !query.length) return [];\n      const tokens = [];\n      const words = query.split(/\\s+/);\n      var field_regex;\n      if (weights) {\n        field_regex = new RegExp('^(' + Object.keys(weights).map(escape_regex).join('|') + ')\\:(.*)$');\n      }\n      words.forEach(word => {\n        let field_match;\n        let field = null;\n        let regex = null;\n        // look for \"field:query\" tokens\n        if (field_regex && (field_match = word.match(field_regex))) {\n          field = field_match[1];\n          word = field_match[2];\n        }\n        if (word.length > 0) {\n          if (this.settings.diacritics) {\n            regex = getPattern(word) || null;\n          } else {\n            regex = escape_regex(word);\n          }\n          if (regex && respect_word_boundaries) regex = \"\\\\b\" + regex;\n        }\n        tokens.push({\n          string: word,\n          regex: regex ? new RegExp(regex, 'iu') : null,\n          field: field\n        });\n      });\n      return tokens;\n    }\n    /**\n     * Returns a function to be used to score individual results.\n     *\n     * Good matches will have a higher score than poor matches.\n     * If an item is not a match, 0 will be returned by the function.\n     *\n     * @returns {T.ScoreFn}\n     */\n    getScoreFunction(query, options) {\n      var search = this.prepareSearch(query, options);\n      return this._getScoreFunction(search);\n    }\n    /**\n     * @returns {T.ScoreFn}\n     *\n     */\n    _getScoreFunction(search) {\n      const tokens = search.tokens,\n        token_count = tokens.length;\n      if (!token_count) {\n        return function () {\n          return 0;\n        };\n      }\n      const fields = search.options.fields,\n        weights = search.weights,\n        field_count = fields.length,\n        getAttrFn = search.getAttrFn;\n      if (!field_count) {\n        return function () {\n          return 1;\n        };\n      }\n      /**\n       * Calculates the score of an object\n       * against the search query.\n       *\n       */\n      const scoreObject = function () {\n        if (field_count === 1) {\n          return function (token, data) {\n            const field = fields[0].field;\n            return scoreValue(getAttrFn(data, field), token, weights[field] || 1);\n          };\n        }\n        return function (token, data) {\n          var sum = 0;\n          // is the token specific to a field?\n          if (token.field) {\n            const value = getAttrFn(data, token.field);\n            if (!token.regex && value) {\n              sum += 1 / field_count;\n            } else {\n              sum += scoreValue(value, token, 1);\n            }\n          } else {\n            iterate$1(weights, (weight, field) => {\n              sum += scoreValue(getAttrFn(data, field), token, weight);\n            });\n          }\n          return sum / field_count;\n        };\n      }();\n      if (token_count === 1) {\n        return function (data) {\n          return scoreObject(tokens[0], data);\n        };\n      }\n      if (search.options.conjunction === 'and') {\n        return function (data) {\n          var score,\n            sum = 0;\n          var _iterator8 = _createForOfIteratorHelper(tokens),\n            _step8;\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              let token = _step8.value;\n              score = scoreObject(token, data);\n              if (score <= 0) return 0;\n              sum += score;\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n          return sum / token_count;\n        };\n      } else {\n        return function (data) {\n          var sum = 0;\n          iterate$1(tokens, token => {\n            sum += scoreObject(token, data);\n          });\n          return sum / token_count;\n        };\n      }\n    }\n    /**\n     * Returns a function that can be used to compare two\n     * results, for sorting purposes. If no sorting should\n     * be performed, `null` will be returned.\n     *\n     * @return function(a,b)\n     */\n    getSortFunction(query, options) {\n      var search = this.prepareSearch(query, options);\n      return this._getSortFunction(search);\n    }\n    _getSortFunction(search) {\n      var implicit_score,\n        sort_flds = [];\n      const self = this,\n        options = search.options,\n        sort = !search.query && options.sort_empty ? options.sort_empty : options.sort;\n      if (typeof sort == 'function') {\n        return sort.bind(this);\n      }\n      /**\n       * Fetches the specified sort field value\n       * from a search result item.\n       *\n       */\n      const get_field = function (name, result) {\n        if (name === '$score') return result.score;\n        return search.getAttrFn(self.items[result.id], name);\n      };\n      // parse options\n      if (sort) {\n        var _iterator9 = _createForOfIteratorHelper(sort),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            let s = _step9.value;\n            if (search.query || s.field !== '$score') {\n              sort_flds.push(s);\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      }\n      // the \"$score\" field is implied to be the primary\n      // sort field, unless it's manually specified\n      if (search.query) {\n        implicit_score = true;\n        var _iterator10 = _createForOfIteratorHelper(sort_flds),\n          _step10;\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            let fld = _step10.value;\n            if (fld.field === '$score') {\n              implicit_score = false;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n        if (implicit_score) {\n          sort_flds.unshift({\n            field: '$score',\n            direction: 'desc'\n          });\n        }\n        // without a search.query, all items will have the same score\n      } else {\n        sort_flds = sort_flds.filter(fld => fld.field !== '$score');\n      }\n      // build function\n      const sort_flds_count = sort_flds.length;\n      if (!sort_flds_count) {\n        return null;\n      }\n      return function (a, b) {\n        var result, field;\n        var _iterator11 = _createForOfIteratorHelper(sort_flds),\n          _step11;\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            let sort_fld = _step11.value;\n            field = sort_fld.field;\n            let multiplier = sort_fld.direction === 'desc' ? -1 : 1;\n            result = multiplier * cmp(get_field(field, a), get_field(field, b));\n            if (result) return result;\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n        return 0;\n      };\n    }\n    /**\n     * Parses a search query and returns an object\n     * with tokens and fields ready to be populated\n     * with results.\n     *\n     */\n    prepareSearch(query, optsUser) {\n      const weights = {};\n      var options = Object.assign({}, optsUser);\n      propToArray(options, 'sort');\n      propToArray(options, 'sort_empty');\n      // convert fields to new format\n      if (options.fields) {\n        propToArray(options, 'fields');\n        const fields = [];\n        options.fields.forEach(field => {\n          if (typeof field == 'string') {\n            field = {\n              field: field,\n              weight: 1\n            };\n          }\n          fields.push(field);\n          weights[field.field] = 'weight' in field ? field.weight : 1;\n        });\n        options.fields = fields;\n      }\n      return {\n        options: options,\n        query: query.toLowerCase().trim(),\n        tokens: this.tokenize(query, options.respect_word_boundaries, weights),\n        total: 0,\n        items: [],\n        weights: weights,\n        getAttrFn: options.nesting ? getAttrNesting : getAttr\n      };\n    }\n    /**\n     * Searches through all items and returns a sorted array of matches.\n     *\n     */\n    search(query, options) {\n      var self = this,\n        score,\n        search;\n      search = this.prepareSearch(query, options);\n      options = search.options;\n      query = search.query;\n      // generate result scoring function\n      const fn_score = options.score || self._getScoreFunction(search);\n      // perform search and sort\n      if (query.length) {\n        iterate$1(self.items, (item, id) => {\n          score = fn_score(item);\n          if (options.filter === false || score > 0) {\n            search.items.push({\n              'score': score,\n              'id': id\n            });\n          }\n        });\n      } else {\n        iterate$1(self.items, (_, id) => {\n          search.items.push({\n            'score': 1,\n            'id': id\n          });\n        });\n      }\n      const fn_sort = self._getSortFunction(search);\n      if (fn_sort) search.items.sort(fn_sort);\n      // apply limits\n      search.total = search.items.length;\n      if (typeof options.limit === 'number') {\n        search.items = search.items.slice(0, options.limit);\n      }\n      return search;\n    }\n  }\n\n  /**\n   * Converts a scalar to its best string representation\n   * for hash keys and HTML attribute values.\n   *\n   * Transformations:\n   *   'str'     -> 'str'\n   *   null      -> ''\n   *   undefined -> ''\n   *   true      -> '1'\n   *   false     -> '0'\n   *   0         -> '0'\n   *   1         -> '1'\n   *\n   */\n  const hash_key = value => {\n    if (typeof value === 'undefined' || value === null) return null;\n    return get_hash(value);\n  };\n  const get_hash = value => {\n    if (typeof value === 'boolean') return value ? '1' : '0';\n    return value + '';\n  };\n\n  /**\n   * Escapes a string for use within HTML.\n   *\n   */\n  const escape_html = str => {\n    return (str + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n  };\n\n  /**\n   * use setTimeout if timeout > 0 \n   */\n  const timeout = (fn, timeout) => {\n    if (timeout > 0) {\n      return window.setTimeout(fn, timeout);\n    }\n    fn.call(null);\n    return null;\n  };\n\n  /**\n   * Debounce the user provided load function\n   *\n   */\n  const loadDebounce = (fn, delay) => {\n    var timeout;\n    return function (value, callback) {\n      var self = this;\n      if (timeout) {\n        self.loading = Math.max(self.loading - 1, 0);\n        clearTimeout(timeout);\n      }\n      timeout = setTimeout(function () {\n        timeout = null;\n        self.loadedSearches[value] = true;\n        fn.call(self, value, callback);\n      }, delay);\n    };\n  };\n\n  /**\n   * Debounce all fired events types listed in `types`\n   * while executing the provided `fn`.\n   *\n   */\n  const debounce_events = (self, types, fn) => {\n    var type;\n    var trigger = self.trigger;\n    var event_args = {};\n\n    // override trigger method\n    self.trigger = function () {\n      var type = arguments[0];\n      if (types.indexOf(type) !== -1) {\n        event_args[type] = arguments;\n      } else {\n        return trigger.apply(self, arguments);\n      }\n    };\n\n    // invoke provided function\n    fn.apply(self, []);\n    self.trigger = trigger;\n\n    // trigger queued events\n    var _iterator12 = _createForOfIteratorHelper(types),\n      _step12;\n    try {\n      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n        type = _step12.value;\n        if (type in event_args) {\n          trigger.apply(self, event_args[type]);\n        }\n      }\n    } catch (err) {\n      _iterator12.e(err);\n    } finally {\n      _iterator12.f();\n    }\n  };\n\n  /**\n   * Determines the current selection within a text input control.\n   * Returns an object containing:\n   *   - start\n   *   - length\n   *\n   * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\n   * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n   */\n  const getSelection = input => {\n    return {\n      start: input.selectionStart || 0,\n      length: (input.selectionEnd || 0) - (input.selectionStart || 0)\n    };\n  };\n\n  /**\n   * Prevent default\n   *\n   */\n  const preventDefault = function (evt) {\n    let stop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (evt) {\n      evt.preventDefault();\n      if (stop) {\n        evt.stopPropagation();\n      }\n    }\n  };\n\n  /**\n   * Add event helper\n   *\n   */\n  const addEvent = (target, type, callback, options) => {\n    target.addEventListener(type, callback, options);\n  };\n\n  /**\n   * Return true if the requested key is down\n   * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n   * The current evt may not always set ( eg calling advanceSelection() )\n   *\n   */\n  const isKeyDown = (key_name, evt) => {\n    if (!evt) {\n      return false;\n    }\n    if (!evt[key_name]) {\n      return false;\n    }\n    var count = (evt.altKey ? 1 : 0) + (evt.ctrlKey ? 1 : 0) + (evt.shiftKey ? 1 : 0) + (evt.metaKey ? 1 : 0);\n    if (count === 1) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Get the id of an element\n   * If the id attribute is not set, set the attribute with the given id\n   *\n   */\n  const getId = (el, id) => {\n    const existing_id = el.getAttribute('id');\n    if (existing_id) {\n      return existing_id;\n    }\n    el.setAttribute('id', id);\n    return id;\n  };\n\n  /**\n   * Returns a string with backslashes added before characters that need to be escaped.\n   */\n  const addSlashes = str => {\n    return str.replace(/[\\\\\"']/g, '\\\\$&');\n  };\n\n  /**\n   *\n   */\n  const append = (parent, node) => {\n    if (node) parent.append(node);\n  };\n\n  /**\n   * Iterates over arrays and hashes.\n   *\n   * ```\n   * iterate(this.items, function(item, id) {\n   *    // invoked for each item\n   * });\n   * ```\n   *\n   */\n  const iterate = (object, callback) => {\n    if (Array.isArray(object)) {\n      object.forEach(callback);\n    } else {\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          callback(object[key], key);\n        }\n      }\n    }\n  };\n\n  /**\n   * Return a dom element from either a dom query string, jQuery object, a dom element or html string\n   * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n   *\n   * param query should be {}\n   */\n  const getDom = query => {\n    if (query.jquery) {\n      return query[0];\n    }\n    if (query instanceof HTMLElement) {\n      return query;\n    }\n    if (isHtmlString(query)) {\n      var tpl = document.createElement('template');\n      tpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\n      return tpl.content.firstChild;\n    }\n    return document.querySelector(query);\n  };\n  const isHtmlString = arg => {\n    if (typeof arg === 'string' && arg.indexOf('<') > -1) {\n      return true;\n    }\n    return false;\n  };\n  const escapeQuery = query => {\n    return query.replace(/['\"\\\\]/g, '\\\\$&');\n  };\n\n  /**\n   * Dispatch an event\n   *\n   */\n  const triggerEvent = (dom_el, event_name) => {\n    var event = document.createEvent('HTMLEvents');\n    event.initEvent(event_name, true, false);\n    dom_el.dispatchEvent(event);\n  };\n\n  /**\n   * Apply CSS rules to a dom element\n   *\n   */\n  const applyCSS = (dom_el, css) => {\n    Object.assign(dom_el.style, css);\n  };\n\n  /**\n   * Add css classes\n   *\n   */\n  const addClasses = function (elmts) {\n    for (var _len2 = arguments.length, classes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      classes[_key2 - 1] = arguments[_key2];\n    }\n    var norm_classes = classesArray(classes);\n    elmts = castAsArray(elmts);\n    elmts.map(el => {\n      norm_classes.map(cls => {\n        el.classList.add(cls);\n      });\n    });\n  };\n\n  /**\n   * Remove css classes\n   *\n   */\n  const removeClasses = function (elmts) {\n    for (var _len3 = arguments.length, classes = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      classes[_key3 - 1] = arguments[_key3];\n    }\n    var norm_classes = classesArray(classes);\n    elmts = castAsArray(elmts);\n    elmts.map(el => {\n      norm_classes.map(cls => {\n        el.classList.remove(cls);\n      });\n    });\n  };\n\n  /**\n   * Return arguments\n   *\n   */\n  const classesArray = args => {\n    var classes = [];\n    iterate(args, _classes => {\n      if (typeof _classes === 'string') {\n        _classes = _classes.trim().split(/[\\t\\n\\f\\r\\s]/);\n      }\n      if (Array.isArray(_classes)) {\n        classes = classes.concat(_classes);\n      }\n    });\n    return classes.filter(Boolean);\n  };\n\n  /**\n   * Create an array from arg if it's not already an array\n   *\n   */\n  const castAsArray = arg => {\n    if (!Array.isArray(arg)) {\n      arg = [arg];\n    }\n    return arg;\n  };\n\n  /**\n   * Get the closest node to the evt.target matching the selector\n   * Stops at wrapper\n   *\n   */\n  const parentMatch = (target, selector, wrapper) => {\n    if (wrapper && !wrapper.contains(target)) {\n      return;\n    }\n    while (target && target.matches) {\n      if (target.matches(selector)) {\n        return target;\n      }\n      target = target.parentNode;\n    }\n  };\n\n  /**\n   * Get the first or last item from an array\n   *\n   * > 0 - right (last)\n   * <= 0 - left (first)\n   *\n   */\n  const getTail = function (list) {\n    let direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    if (direction > 0) {\n      return list[list.length - 1];\n    }\n    return list[0];\n  };\n\n  /**\n   * Return true if an object is empty\n   *\n   */\n  const isEmptyObject = obj => {\n    return Object.keys(obj).length === 0;\n  };\n\n  /**\n   * Get the index of an element amongst sibling nodes of the same type\n   *\n   */\n  const nodeIndex = (el, amongst) => {\n    if (!el) return -1;\n    amongst = amongst || el.nodeName;\n    var i = 0;\n    while (el = el.previousElementSibling) {\n      if (el.matches(amongst)) {\n        i++;\n      }\n    }\n    return i;\n  };\n\n  /**\n   * Set attributes of an element\n   *\n   */\n  const setAttr = (el, attrs) => {\n    iterate(attrs, (val, attr) => {\n      if (val == null) {\n        el.removeAttribute(attr);\n      } else {\n        el.setAttribute(attr, '' + val);\n      }\n    });\n  };\n\n  /**\n   * Replace a node\n   */\n  const replaceNode = (existing, replacement) => {\n    if (existing.parentNode) existing.parentNode.replaceChild(replacement, existing);\n  };\n\n  /**\n   * highlight v3 | MIT license | Johann Burkard <jb@eaio.com>\n   * Highlights arbitrary terms in a node.\n   *\n   * - Modified by Marshal <beatgates@gmail.com> 2011-6-24 (added regex)\n   * - Modified by Brian Reavis <brian@thirdroute.com> 2012-8-27 (cleanup)\n   */\n\n  const highlight = (element, regex) => {\n    if (regex === null) return;\n\n    // convet string to regex\n    if (typeof regex === 'string') {\n      if (!regex.length) return;\n      regex = new RegExp(regex, 'i');\n    }\n\n    // Wrap matching part of text node with highlighting <span>, e.g.\n    // Soccer  ->  <span class=\"highlight\">Soc</span>cer  for regex = /soc/i\n    const highlightText = node => {\n      var match = node.data.match(regex);\n      if (match && node.data.length > 0) {\n        var spannode = document.createElement('span');\n        spannode.className = 'highlight';\n        var middlebit = node.splitText(match.index);\n        middlebit.splitText(match[0].length);\n        var middleclone = middlebit.cloneNode(true);\n        spannode.appendChild(middleclone);\n        replaceNode(middlebit, spannode);\n        return 1;\n      }\n      return 0;\n    };\n\n    // Recurse element node, looking for child text nodes to highlight, unless element\n    // is childless, <script>, <style>, or already highlighted: <span class=\"hightlight\">\n    const highlightChildren = node => {\n      if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName) && (node.className !== 'highlight' || node.tagName !== 'SPAN')) {\n        Array.from(node.childNodes).forEach(element => {\n          highlightRecursive(element);\n        });\n      }\n    };\n    const highlightRecursive = node => {\n      if (node.nodeType === 3) {\n        return highlightText(node);\n      }\n      highlightChildren(node);\n      return 0;\n    };\n    highlightRecursive(element);\n  };\n\n  /**\n   * removeHighlight fn copied from highlight v5 and\n   * edited to remove with(), pass js strict mode, and use without jquery\n   */\n  const removeHighlight = el => {\n    var elements = el.querySelectorAll(\"span.highlight\");\n    Array.prototype.forEach.call(elements, function (el) {\n      var parent = el.parentNode;\n      parent.replaceChild(el.firstChild, el);\n      parent.normalize();\n    });\n  };\n  const KEY_A = 65;\n  const KEY_RETURN = 13;\n  const KEY_ESC = 27;\n  const KEY_LEFT = 37;\n  const KEY_UP = 38;\n  const KEY_RIGHT = 39;\n  const KEY_DOWN = 40;\n  const KEY_BACKSPACE = 8;\n  const KEY_DELETE = 46;\n  const KEY_TAB = 9;\n  const IS_MAC = typeof navigator === 'undefined' ? false : /Mac/.test(navigator.userAgent);\n  const KEY_SHORTCUT = IS_MAC ? 'metaKey' : 'ctrlKey'; // ctrl key or apple key for ma\n\n  var defaults = {\n    options: [],\n    optgroups: [],\n    plugins: [],\n    delimiter: ',',\n    splitOn: null,\n    // regexp or string for splitting up values from a paste command\n    persist: true,\n    diacritics: true,\n    create: null,\n    createOnBlur: false,\n    createFilter: null,\n    highlight: true,\n    openOnFocus: true,\n    shouldOpen: null,\n    maxOptions: 50,\n    maxItems: null,\n    hideSelected: null,\n    duplicates: false,\n    addPrecedence: false,\n    selectOnTab: false,\n    preload: null,\n    allowEmptyOption: false,\n    //closeAfterSelect: false,\n    refreshThrottle: 300,\n    loadThrottle: 300,\n    loadingClass: 'loading',\n    dataAttr: null,\n    //'data-data',\n    optgroupField: 'optgroup',\n    valueField: 'value',\n    labelField: 'text',\n    disabledField: 'disabled',\n    optgroupLabelField: 'label',\n    optgroupValueField: 'value',\n    lockOptgroupOrder: false,\n    sortField: '$order',\n    searchField: ['text'],\n    searchConjunction: 'and',\n    mode: null,\n    wrapperClass: 'ts-wrapper',\n    controlClass: 'ts-control',\n    dropdownClass: 'ts-dropdown',\n    dropdownContentClass: 'ts-dropdown-content',\n    itemClass: 'item',\n    optionClass: 'option',\n    dropdownParent: null,\n    controlInput: '<input type=\"text\" autocomplete=\"off\" size=\"1\" />',\n    copyClassesToDropdown: false,\n    placeholder: null,\n    hidePlaceholder: null,\n    shouldLoad: function (query) {\n      return query.length > 0;\n    },\n    /*\n    load                 : null, // function(query, callback) { ... }\n    score                : null, // function(search) { ... }\n    onInitialize         : null, // function() { ... }\n    onChange             : null, // function(value) { ... }\n    onItemAdd            : null, // function(value, $item) { ... }\n    onItemRemove         : null, // function(value) { ... }\n    onClear              : null, // function() { ... }\n    onOptionAdd          : null, // function(value, data) { ... }\n    onOptionRemove       : null, // function(value) { ... }\n    onOptionClear        : null, // function() { ... }\n    onOptionGroupAdd     : null, // function(id, data) { ... }\n    onOptionGroupRemove  : null, // function(id) { ... }\n    onOptionGroupClear   : null, // function() { ... }\n    onDropdownOpen       : null, // function(dropdown) { ... }\n    onDropdownClose      : null, // function(dropdown) { ... }\n    onType               : null, // function(str) { ... }\n    onDelete             : null, // function(values) { ... }\n    */\n\n    render: {\n      /*\n      item: null,\n      optgroup: null,\n      optgroup_header: null,\n      option: null,\n      option_create: null\n      */\n    }\n  };\n  function getSettings(input, settings_user) {\n    var settings = Object.assign({}, defaults, settings_user);\n    var attr_data = settings.dataAttr;\n    var field_label = settings.labelField;\n    var field_value = settings.valueField;\n    var field_disabled = settings.disabledField;\n    var field_optgroup = settings.optgroupField;\n    var field_optgroup_label = settings.optgroupLabelField;\n    var field_optgroup_value = settings.optgroupValueField;\n    var tag_name = input.tagName.toLowerCase();\n    var placeholder = input.getAttribute('placeholder') || input.getAttribute('data-placeholder');\n    if (!placeholder && !settings.allowEmptyOption) {\n      let option = input.querySelector('option[value=\"\"]');\n      if (option) {\n        placeholder = option.textContent;\n      }\n    }\n    var settings_element = {\n      placeholder: placeholder,\n      options: [],\n      optgroups: [],\n      items: [],\n      maxItems: null\n    };\n\n    /**\n     * Initialize from a <select> element.\n     *\n     */\n    var init_select = () => {\n      var tagName;\n      var options = settings_element.options;\n      var optionsMap = {};\n      var group_count = 1;\n      let $order = 0;\n      var readData = el => {\n        var data = Object.assign({}, el.dataset); // get plain object from DOMStringMap\n        var json = attr_data && data[attr_data];\n        if (typeof json === 'string' && json.length) {\n          data = Object.assign(data, JSON.parse(json));\n        }\n        return data;\n      };\n      var addOption = (option, group) => {\n        var value = hash_key(option.value);\n        if (value == null) return;\n        if (!value && !settings.allowEmptyOption) return;\n\n        // if the option already exists, it's probably been\n        // duplicated in another optgroup. in this case, push\n        // the current group to the \"optgroup\" property on the\n        // existing option so that it's rendered in both places.\n        if (optionsMap.hasOwnProperty(value)) {\n          if (group) {\n            var arr = optionsMap[value][field_optgroup];\n            if (!arr) {\n              optionsMap[value][field_optgroup] = group;\n            } else if (!Array.isArray(arr)) {\n              optionsMap[value][field_optgroup] = [arr, group];\n            } else {\n              arr.push(group);\n            }\n          }\n        } else {\n          var option_data = readData(option);\n          option_data[field_label] = option_data[field_label] || option.textContent;\n          option_data[field_value] = option_data[field_value] || value;\n          option_data[field_disabled] = option_data[field_disabled] || option.disabled;\n          option_data[field_optgroup] = option_data[field_optgroup] || group;\n          option_data.$option = option;\n          option_data.$order = option_data.$order || ++$order;\n          optionsMap[value] = option_data;\n          options.push(option_data);\n        }\n        if (option.selected) {\n          settings_element.items.push(value);\n        }\n      };\n      var addGroup = optgroup => {\n        var id, optgroup_data;\n        optgroup_data = readData(optgroup);\n        optgroup_data[field_optgroup_label] = optgroup_data[field_optgroup_label] || optgroup.getAttribute('label') || '';\n        optgroup_data[field_optgroup_value] = optgroup_data[field_optgroup_value] || group_count++;\n        optgroup_data[field_disabled] = optgroup_data[field_disabled] || optgroup.disabled;\n        optgroup_data.$order = optgroup_data.$order || ++$order;\n        settings_element.optgroups.push(optgroup_data);\n        id = optgroup_data[field_optgroup_value];\n        iterate(optgroup.children, option => {\n          addOption(option, id);\n        });\n      };\n      settings_element.maxItems = input.hasAttribute('multiple') ? null : 1;\n      iterate(input.children, child => {\n        tagName = child.tagName.toLowerCase();\n        if (tagName === 'optgroup') {\n          addGroup(child);\n        } else if (tagName === 'option') {\n          addOption(child);\n        }\n      });\n    };\n\n    /**\n     * Initialize from a <input type=\"text\"> element.\n     *\n     */\n    var init_textbox = () => {\n      const data_raw = input.getAttribute(attr_data);\n      if (!data_raw) {\n        var value = input.value.trim() || '';\n        if (!settings.allowEmptyOption && !value.length) return;\n        const values = value.split(settings.delimiter);\n        iterate(values, value => {\n          const option = {};\n          option[field_label] = value;\n          option[field_value] = value;\n          settings_element.options.push(option);\n        });\n        settings_element.items = values;\n      } else {\n        settings_element.options = JSON.parse(data_raw);\n        iterate(settings_element.options, opt => {\n          settings_element.items.push(opt[field_value]);\n        });\n      }\n    };\n    if (tag_name === 'select') {\n      init_select();\n    } else {\n      init_textbox();\n    }\n    return Object.assign({}, defaults, settings_element, settings_user);\n  }\n  var instance_i = 0;\n  class TomSelect extends MicroPlugin(MicroEvent) {\n    constructor(input_arg, user_settings) {\n      super();\n      this.order = 0;\n      this.isOpen = false;\n      this.isDisabled = false;\n      this.isReadOnly = false;\n      this.isInvalid = false;\n      // @deprecated 1.8\n      this.isValid = true;\n      this.isLocked = false;\n      this.isFocused = false;\n      this.isInputHidden = false;\n      this.isSetup = false;\n      this.ignoreFocus = false;\n      this.ignoreHover = false;\n      this.hasOptions = false;\n      this.lastValue = '';\n      this.caretPos = 0;\n      this.loading = 0;\n      this.loadedSearches = {};\n      this.activeOption = null;\n      this.activeItems = [];\n      this.optgroups = {};\n      this.options = {};\n      this.userOptions = {};\n      this.items = [];\n      this.refreshTimeout = null;\n      instance_i++;\n      var dir;\n      var input = getDom(input_arg);\n      if (input.tomselect) {\n        throw new Error('Tom Select already initialized on this element');\n      }\n      input.tomselect = this;\n\n      // detect rtl environment\n      var computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);\n      dir = computedStyle.getPropertyValue('direction');\n\n      // setup default state\n      const settings = getSettings(input, user_settings);\n      this.settings = settings;\n      this.input = input;\n      this.tabIndex = input.tabIndex || 0;\n      this.is_select_tag = input.tagName.toLowerCase() === 'select';\n      this.rtl = /rtl/i.test(dir);\n      this.inputId = getId(input, 'tomselect-' + instance_i);\n      this.isRequired = input.required;\n\n      // search system\n      this.sifter = new Sifter(this.options, {\n        diacritics: settings.diacritics\n      });\n\n      // option-dependent defaults\n      settings.mode = settings.mode || (settings.maxItems === 1 ? 'single' : 'multi');\n      if (typeof settings.hideSelected !== 'boolean') {\n        settings.hideSelected = settings.mode === 'multi';\n      }\n      if (typeof settings.hidePlaceholder !== 'boolean') {\n        settings.hidePlaceholder = settings.mode !== 'multi';\n      }\n\n      // set up createFilter callback\n      var filter = settings.createFilter;\n      if (typeof filter !== 'function') {\n        if (typeof filter === 'string') {\n          filter = new RegExp(filter);\n        }\n        if (filter instanceof RegExp) {\n          settings.createFilter = input => filter.test(input);\n        } else {\n          settings.createFilter = value => {\n            return this.settings.duplicates || !this.options[value];\n          };\n        }\n      }\n      this.initializePlugins(settings.plugins);\n      this.setupCallbacks();\n      this.setupTemplates();\n\n      // Create all elements\n      const wrapper = getDom('<div>');\n      const control = getDom('<div>');\n      const dropdown = this._render('dropdown');\n      const dropdown_content = getDom(`<div role=\"listbox\" tabindex=\"-1\">`);\n      const classes = this.input.getAttribute('class') || '';\n      const inputMode = settings.mode;\n      var control_input;\n      addClasses(wrapper, settings.wrapperClass, classes, inputMode);\n      addClasses(control, settings.controlClass);\n      append(wrapper, control);\n      addClasses(dropdown, settings.dropdownClass, inputMode);\n      if (settings.copyClassesToDropdown) {\n        addClasses(dropdown, classes);\n      }\n      addClasses(dropdown_content, settings.dropdownContentClass);\n      append(dropdown, dropdown_content);\n      getDom(settings.dropdownParent || wrapper).appendChild(dropdown);\n\n      // default controlInput\n      if (isHtmlString(settings.controlInput)) {\n        control_input = getDom(settings.controlInput);\n\n        // set attributes\n        var attrs = ['autocorrect', 'autocapitalize', 'autocomplete', 'spellcheck'];\n        iterate(attrs, attr => {\n          if (input.getAttribute(attr)) {\n            setAttr(control_input, {\n              [attr]: input.getAttribute(attr)\n            });\n          }\n        });\n        control_input.tabIndex = -1;\n        control.appendChild(control_input);\n        this.focus_node = control_input;\n\n        // dom element\n      } else if (settings.controlInput) {\n        control_input = getDom(settings.controlInput);\n        this.focus_node = control_input;\n      } else {\n        control_input = getDom('<input/>');\n        this.focus_node = control;\n      }\n      this.wrapper = wrapper;\n      this.dropdown = dropdown;\n      this.dropdown_content = dropdown_content;\n      this.control = control;\n      this.control_input = control_input;\n      this.setup();\n    }\n\n    /**\n     * set up event bindings.\n     *\n     */\n    setup() {\n      const self = this;\n      const settings = self.settings;\n      const control_input = self.control_input;\n      const dropdown = self.dropdown;\n      const dropdown_content = self.dropdown_content;\n      const wrapper = self.wrapper;\n      const control = self.control;\n      const input = self.input;\n      const focus_node = self.focus_node;\n      const passive_event = {\n        passive: true\n      };\n      const listboxId = self.inputId + '-ts-dropdown';\n      setAttr(dropdown_content, {\n        id: listboxId\n      });\n      setAttr(focus_node, {\n        role: 'combobox',\n        'aria-haspopup': 'listbox',\n        'aria-expanded': 'false',\n        'aria-controls': listboxId\n      });\n      const control_id = getId(focus_node, self.inputId + '-ts-control');\n      const query = \"label[for='\" + escapeQuery(self.inputId) + \"']\";\n      const label = document.querySelector(query);\n      const label_click = self.focus.bind(self);\n      if (label) {\n        addEvent(label, 'click', label_click);\n        setAttr(label, {\n          for: control_id\n        });\n        const label_id = getId(label, self.inputId + '-ts-label');\n        setAttr(focus_node, {\n          'aria-labelledby': label_id\n        });\n        setAttr(dropdown_content, {\n          'aria-labelledby': label_id\n        });\n      }\n      wrapper.style.width = input.style.width;\n      if (self.plugins.names.length) {\n        const classes_plugins = 'plugin-' + self.plugins.names.join(' plugin-');\n        addClasses([wrapper, dropdown], classes_plugins);\n      }\n      if ((settings.maxItems === null || settings.maxItems > 1) && self.is_select_tag) {\n        setAttr(input, {\n          multiple: 'multiple'\n        });\n      }\n      if (settings.placeholder) {\n        setAttr(control_input, {\n          placeholder: settings.placeholder\n        });\n      }\n\n      // if splitOn was not passed in, construct it from the delimiter to allow pasting universally\n      if (!settings.splitOn && settings.delimiter) {\n        settings.splitOn = new RegExp('\\\\s*' + escape_regex(settings.delimiter) + '+\\\\s*');\n      }\n\n      // debounce user defined load() if loadThrottle > 0\n      // after initializePlugins() so plugins can create/modify user defined loaders\n      if (settings.load && settings.loadThrottle) {\n        settings.load = loadDebounce(settings.load, settings.loadThrottle);\n      }\n      addEvent(dropdown, 'mousemove', () => {\n        self.ignoreHover = false;\n      });\n      addEvent(dropdown, 'mouseenter', e => {\n        var target_match = parentMatch(e.target, '[data-selectable]', dropdown);\n        if (target_match) self.onOptionHover(e, target_match);\n      }, {\n        capture: true\n      });\n\n      // clicking on an option should select it\n      addEvent(dropdown, 'click', evt => {\n        const option = parentMatch(evt.target, '[data-selectable]');\n        if (option) {\n          self.onOptionSelect(evt, option);\n          preventDefault(evt, true);\n        }\n      });\n      addEvent(control, 'click', evt => {\n        var target_match = parentMatch(evt.target, '[data-ts-item]', control);\n        if (target_match && self.onItemSelect(evt, target_match)) {\n          preventDefault(evt, true);\n          return;\n        }\n\n        // retain focus (see control_input mousedown)\n        if (control_input.value != '') {\n          return;\n        }\n        self.onClick();\n        preventDefault(evt, true);\n      });\n\n      // keydown on focus_node for arrow_down/arrow_up\n      addEvent(focus_node, 'keydown', e => self.onKeyDown(e));\n\n      // keypress and input/keyup\n      addEvent(control_input, 'keypress', e => self.onKeyPress(e));\n      addEvent(control_input, 'input', e => self.onInput(e));\n      addEvent(focus_node, 'blur', e => self.onBlur(e));\n      addEvent(focus_node, 'focus', e => self.onFocus(e));\n      addEvent(control_input, 'paste', e => self.onPaste(e));\n      const doc_mousedown = evt => {\n        // blur if target is outside of this instance\n        // dropdown is not always inside wrapper\n        const target = evt.composedPath()[0];\n        if (!wrapper.contains(target) && !dropdown.contains(target)) {\n          if (self.isFocused) {\n            self.blur();\n          }\n          self.inputState();\n          return;\n        }\n\n        // retain focus by preventing native handling. if the\n        // event target is the input it should not be modified.\n        // otherwise, text selection within the input won't work.\n        // Fixes bug #212 which is no covered by tests\n        if (target == control_input && self.isOpen) {\n          evt.stopPropagation();\n\n          // clicking anywhere in the control should not blur the control_input (which would close the dropdown)\n        } else {\n          preventDefault(evt, true);\n        }\n      };\n      const win_scroll = () => {\n        if (self.isOpen) {\n          self.positionDropdown();\n        }\n      };\n      addEvent(document, 'mousedown', doc_mousedown);\n      addEvent(window, 'scroll', win_scroll, passive_event);\n      addEvent(window, 'resize', win_scroll, passive_event);\n      this._destroy = () => {\n        document.removeEventListener('mousedown', doc_mousedown);\n        window.removeEventListener('scroll', win_scroll);\n        window.removeEventListener('resize', win_scroll);\n        if (label) label.removeEventListener('click', label_click);\n      };\n\n      // store original html and tab index so that they can be\n      // restored when the destroy() method is called.\n      this.revertSettings = {\n        innerHTML: input.innerHTML,\n        tabIndex: input.tabIndex\n      };\n      input.tabIndex = -1;\n      input.insertAdjacentElement('afterend', self.wrapper);\n      self.sync(false);\n      settings.items = [];\n      delete settings.optgroups;\n      delete settings.options;\n      addEvent(input, 'invalid', () => {\n        if (self.isValid) {\n          self.isValid = false;\n          self.isInvalid = true;\n          self.refreshState();\n        }\n      });\n      self.updateOriginalInput();\n      self.refreshItems();\n      self.close(false);\n      self.inputState();\n      self.isSetup = true;\n      if (input.disabled) {\n        self.disable();\n      } else if (input.readOnly) {\n        self.setReadOnly(true);\n      } else {\n        self.enable(); //sets tabIndex\n      }\n      self.on('change', this.onChange);\n      addClasses(input, 'tomselected', 'ts-hidden-accessible');\n      self.trigger('initialize');\n\n      // preload options\n      if (settings.preload === true) {\n        self.preload();\n      }\n    }\n\n    /**\n     * Register options and optgroups\n     *\n     */\n    setupOptions() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let optgroups = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      // build options table\n      this.addOptions(options);\n\n      // build optgroup table\n      iterate(optgroups, optgroup => {\n        this.registerOptionGroup(optgroup);\n      });\n    }\n\n    /**\n     * Sets up default rendering functions.\n     */\n    setupTemplates() {\n      var self = this;\n      var field_label = self.settings.labelField;\n      var field_optgroup = self.settings.optgroupLabelField;\n      var templates = {\n        'optgroup': data => {\n          let optgroup = document.createElement('div');\n          optgroup.className = 'optgroup';\n          optgroup.appendChild(data.options);\n          return optgroup;\n        },\n        'optgroup_header': (data, escape) => {\n          return '<div class=\"optgroup-header\">' + escape(data[field_optgroup]) + '</div>';\n        },\n        'option': (data, escape) => {\n          return '<div>' + escape(data[field_label]) + '</div>';\n        },\n        'item': (data, escape) => {\n          return '<div>' + escape(data[field_label]) + '</div>';\n        },\n        'option_create': (data, escape) => {\n          return '<div class=\"create\">Add <strong>' + escape(data.input) + '</strong>&hellip;</div>';\n        },\n        'no_results': () => {\n          return '<div class=\"no-results\">No results found</div>';\n        },\n        'loading': () => {\n          return '<div class=\"spinner\"></div>';\n        },\n        'not_loading': () => {},\n        'dropdown': () => {\n          return '<div></div>';\n        }\n      };\n      self.settings.render = Object.assign({}, templates, self.settings.render);\n    }\n\n    /**\n     * Maps fired events to callbacks provided\n     * in the settings used when creating the control.\n     */\n    setupCallbacks() {\n      var key, fn;\n      var callbacks = {\n        'initialize': 'onInitialize',\n        'change': 'onChange',\n        'item_add': 'onItemAdd',\n        'item_remove': 'onItemRemove',\n        'item_select': 'onItemSelect',\n        'clear': 'onClear',\n        'option_add': 'onOptionAdd',\n        'option_remove': 'onOptionRemove',\n        'option_clear': 'onOptionClear',\n        'optgroup_add': 'onOptionGroupAdd',\n        'optgroup_remove': 'onOptionGroupRemove',\n        'optgroup_clear': 'onOptionGroupClear',\n        'dropdown_open': 'onDropdownOpen',\n        'dropdown_close': 'onDropdownClose',\n        'type': 'onType',\n        'load': 'onLoad',\n        'focus': 'onFocus',\n        'blur': 'onBlur'\n      };\n      for (key in callbacks) {\n        fn = this.settings[callbacks[key]];\n        if (fn) this.on(key, fn);\n      }\n    }\n\n    /**\n     * Sync the Tom Select instance with the original input or select\n     *\n     */\n    sync() {\n      let get_settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      const self = this;\n      const settings = get_settings ? getSettings(self.input, {\n        delimiter: self.settings.delimiter\n      }) : self.settings;\n      self.setupOptions(settings.options, settings.optgroups);\n      self.setValue(settings.items || [], true); // silent prevents recursion\n\n      self.lastQuery = null; // so updated options will be displayed in dropdown\n    }\n\n    /**\n     * Triggered when the main control element\n     * has a click event.\n     *\n     */\n    onClick() {\n      var self = this;\n      if (self.activeItems.length > 0) {\n        self.clearActiveItems();\n        self.focus();\n        return;\n      }\n      if (self.isFocused && self.isOpen) {\n        self.blur();\n      } else {\n        self.focus();\n      }\n    }\n\n    /**\n     * @deprecated v1.7\n     *\n     */\n    onMouseDown() {}\n\n    /**\n     * Triggered when the value of the control has been changed.\n     * This should propagate the event to the original DOM\n     * input / select element.\n     */\n    onChange() {\n      triggerEvent(this.input, 'input');\n      triggerEvent(this.input, 'change');\n    }\n\n    /**\n     * Triggered on <input> paste.\n     *\n     */\n    onPaste(e) {\n      var self = this;\n      if (self.isInputHidden || self.isLocked) {\n        preventDefault(e);\n        return;\n      }\n\n      // If a regex or string is included, this will split the pasted\n      // input and create Items for each separate value\n      if (!self.settings.splitOn) {\n        return;\n      }\n\n      // Wait for pasted text to be recognized in value\n      setTimeout(() => {\n        var pastedText = self.inputValue();\n        if (!pastedText.match(self.settings.splitOn)) {\n          return;\n        }\n        var splitInput = pastedText.trim().split(self.settings.splitOn);\n        iterate(splitInput, piece => {\n          const hash = hash_key(piece);\n          if (hash) {\n            if (this.options[piece]) {\n              self.addItem(piece);\n            } else {\n              self.createItem(piece);\n            }\n          }\n        });\n      }, 0);\n    }\n\n    /**\n     * Triggered on <input> keypress.\n     *\n     */\n    onKeyPress(e) {\n      var self = this;\n      if (self.isLocked) {\n        preventDefault(e);\n        return;\n      }\n      var character = String.fromCharCode(e.keyCode || e.which);\n      if (self.settings.create && self.settings.mode === 'multi' && character === self.settings.delimiter) {\n        self.createItem();\n        preventDefault(e);\n        return;\n      }\n    }\n\n    /**\n     * Triggered on <input> keydown.\n     *\n     */\n    onKeyDown(e) {\n      var self = this;\n      self.ignoreHover = true;\n      if (self.isLocked) {\n        if (e.keyCode !== KEY_TAB) {\n          preventDefault(e);\n        }\n        return;\n      }\n      switch (e.keyCode) {\n        // ctrl+A: select all\n        case KEY_A:\n          if (isKeyDown(KEY_SHORTCUT, e)) {\n            if (self.control_input.value == '') {\n              preventDefault(e);\n              self.selectAll();\n              return;\n            }\n          }\n          break;\n\n        // esc: close dropdown\n        case KEY_ESC:\n          if (self.isOpen) {\n            preventDefault(e, true);\n            self.close();\n          }\n          self.clearActiveItems();\n          return;\n\n        // down: open dropdown or move selection down\n        case KEY_DOWN:\n          if (!self.isOpen && self.hasOptions) {\n            self.open();\n          } else if (self.activeOption) {\n            let next = self.getAdjacent(self.activeOption, 1);\n            if (next) self.setActiveOption(next);\n          }\n          preventDefault(e);\n          return;\n\n        // up: move selection up\n        case KEY_UP:\n          if (self.activeOption) {\n            let prev = self.getAdjacent(self.activeOption, -1);\n            if (prev) self.setActiveOption(prev);\n          }\n          preventDefault(e);\n          return;\n\n        // return: select active option\n        case KEY_RETURN:\n          if (self.canSelect(self.activeOption)) {\n            self.onOptionSelect(e, self.activeOption);\n            preventDefault(e);\n\n            // if the option_create=null, the dropdown might be closed\n          } else if (self.settings.create && self.createItem()) {\n            preventDefault(e);\n\n            // don't submit form when searching for a value\n          } else if (document.activeElement == self.control_input && self.isOpen) {\n            preventDefault(e);\n          }\n          return;\n\n        // left: modifiy item selection to the left\n        case KEY_LEFT:\n          self.advanceSelection(-1, e);\n          return;\n\n        // right: modifiy item selection to the right\n        case KEY_RIGHT:\n          self.advanceSelection(1, e);\n          return;\n\n        // tab: select active option and/or create item\n        case KEY_TAB:\n          if (self.settings.selectOnTab) {\n            if (self.canSelect(self.activeOption)) {\n              self.onOptionSelect(e, self.activeOption);\n\n              // prevent default [tab] behaviour of jump to the next field\n              // if select isFull, then the dropdown won't be open and [tab] will work normally\n              preventDefault(e);\n            }\n            if (self.settings.create && self.createItem()) {\n              preventDefault(e);\n            }\n          }\n          return;\n\n        // delete|backspace: delete items\n        case KEY_BACKSPACE:\n        case KEY_DELETE:\n          self.deleteSelection(e);\n          return;\n      }\n\n      // don't enter text in the control_input when active items are selected\n      if (self.isInputHidden && !isKeyDown(KEY_SHORTCUT, e)) {\n        preventDefault(e);\n      }\n    }\n\n    /**\n     * Triggered on <input> keyup.\n     *\n     */\n    onInput(e) {\n      if (this.isLocked) {\n        return;\n      }\n      const value = this.inputValue();\n      if (this.lastValue === value) return;\n      this.lastValue = value;\n      if (value == '') {\n        this._onInput();\n        return;\n      }\n      if (this.refreshTimeout) {\n        window.clearTimeout(this.refreshTimeout);\n      }\n      this.refreshTimeout = timeout(() => {\n        this.refreshTimeout = null;\n        this._onInput();\n      }, this.settings.refreshThrottle);\n    }\n    _onInput() {\n      const value = this.lastValue;\n      if (this.settings.shouldLoad.call(this, value)) {\n        this.load(value);\n      }\n      this.refreshOptions();\n      this.trigger('type', value);\n    }\n\n    /**\n     * Triggered when the user rolls over\n     * an option in the autocomplete dropdown menu.\n     *\n     */\n    onOptionHover(evt, option) {\n      if (this.ignoreHover) return;\n      this.setActiveOption(option, false);\n    }\n\n    /**\n     * Triggered on <input> focus.\n     *\n     */\n    onFocus(e) {\n      var self = this;\n      var wasFocused = self.isFocused;\n      if (self.isDisabled || self.isReadOnly) {\n        self.blur();\n        preventDefault(e);\n        return;\n      }\n      if (self.ignoreFocus) return;\n      self.isFocused = true;\n      if (self.settings.preload === 'focus') self.preload();\n      if (!wasFocused) self.trigger('focus');\n      if (!self.activeItems.length) {\n        self.inputState();\n        self.refreshOptions(!!self.settings.openOnFocus);\n      }\n      self.refreshState();\n    }\n\n    /**\n     * Triggered on <input> blur.\n     *\n     */\n    onBlur(e) {\n      if (document.hasFocus() === false) return;\n      var self = this;\n      if (!self.isFocused) return;\n      self.isFocused = false;\n      self.ignoreFocus = false;\n      var deactivate = () => {\n        self.close();\n        self.setActiveItem();\n        self.setCaret(self.items.length);\n        self.trigger('blur');\n      };\n      if (self.settings.create && self.settings.createOnBlur) {\n        self.createItem(null, deactivate);\n      } else {\n        deactivate();\n      }\n    }\n\n    /**\n     * Triggered when the user clicks on an option\n     * in the autocomplete dropdown menu.\n     *\n     */\n    onOptionSelect(evt, option) {\n      var value,\n        self = this;\n\n      // should not be possible to trigger a option under a disabled optgroup\n      if (option.parentElement && option.parentElement.matches('[data-disabled]')) {\n        return;\n      }\n      if (option.classList.contains('create')) {\n        self.createItem(null, () => {\n          if (self.settings.closeAfterSelect) {\n            self.close();\n          }\n        });\n      } else {\n        value = option.dataset.value;\n        if (typeof value !== 'undefined') {\n          self.lastQuery = null;\n          self.addItem(value);\n          if (self.settings.closeAfterSelect) {\n            self.close();\n          }\n          if (!self.settings.hideSelected && evt.type && /click/.test(evt.type)) {\n            self.setActiveOption(option);\n          }\n        }\n      }\n    }\n\n    /**\n     * Return true if the given option can be selected\n     *\n     */\n    canSelect(option) {\n      if (this.isOpen && option && this.dropdown_content.contains(option)) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Triggered when the user clicks on an item\n     * that has been selected.\n     *\n     */\n    onItemSelect(evt, item) {\n      var self = this;\n      if (!self.isLocked && self.settings.mode === 'multi') {\n        preventDefault(evt);\n        self.setActiveItem(item, evt);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Determines whether or not to invoke\n     * the user-provided option provider / loader\n     *\n     * Note, there is a subtle difference between\n     * this.canLoad() and this.settings.shouldLoad();\n     *\n     *\t- settings.shouldLoad() is a user-input validator.\n     *\tWhen false is returned, the not_loading template\n     *\twill be added to the dropdown\n     *\n     *\t- canLoad() is lower level validator that checks\n     * \tthe Tom Select instance. There is no inherent user\n     *\tfeedback when canLoad returns false\n     *\n     */\n    canLoad(value) {\n      if (!this.settings.load) return false;\n      if (this.loadedSearches.hasOwnProperty(value)) return false;\n      return true;\n    }\n\n    /**\n     * Invokes the user-provided option provider / loader.\n     *\n     */\n    load(value) {\n      const self = this;\n      if (!self.canLoad(value)) return;\n      addClasses(self.wrapper, self.settings.loadingClass);\n      self.loading++;\n      const callback = self.loadCallback.bind(self);\n      self.settings.load.call(self, value, callback);\n    }\n\n    /**\n     * Invoked by the user-provided option provider\n     *\n     */\n    loadCallback(options, optgroups) {\n      const self = this;\n      self.loading = Math.max(self.loading - 1, 0);\n      self.lastQuery = null;\n      self.clearActiveOption(); // when new results load, focus should be on first option\n      self.setupOptions(options, optgroups);\n      self.refreshOptions(self.isFocused && !self.isInputHidden);\n      if (!self.loading) {\n        removeClasses(self.wrapper, self.settings.loadingClass);\n      }\n      self.trigger('load', options, optgroups);\n    }\n    preload() {\n      var classList = this.wrapper.classList;\n      if (classList.contains('preloaded')) return;\n      classList.add('preloaded');\n      this.load('');\n    }\n\n    /**\n     * Sets the input field of the control to the specified value.\n     *\n     */\n    setTextboxValue() {\n      let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var input = this.control_input;\n      var changed = input.value !== value;\n      if (changed) {\n        input.value = value;\n        triggerEvent(input, 'update');\n        this.lastValue = value;\n      }\n    }\n\n    /**\n     * Returns the value of the control. If multiple items\n     * can be selected (e.g. <select multiple>), this returns\n     * an array. If only one item can be selected, this\n     * returns a string.\n     *\n     */\n    getValue() {\n      if (this.is_select_tag && this.input.hasAttribute('multiple')) {\n        return this.items;\n      }\n      return this.items.join(this.settings.delimiter);\n    }\n\n    /**\n     * Resets the selected items to the given value.\n     *\n     */\n    setValue(value, silent) {\n      var events = silent ? [] : ['change'];\n      debounce_events(this, events, () => {\n        this.clear(silent);\n        this.addItems(value, silent);\n      });\n    }\n\n    /**\n     * Resets the number of max items to the given value\n     *\n     */\n    setMaxItems(value) {\n      if (value === 0) value = null; //reset to unlimited items.\n      this.settings.maxItems = value;\n      this.refreshState();\n    }\n\n    /**\n     * Sets the selected item.\n     *\n     */\n    setActiveItem(item, e) {\n      var self = this;\n      var eventName;\n      var i, begin, end, swap;\n      var last;\n      if (self.settings.mode === 'single') return;\n\n      // clear the active selection\n      if (!item) {\n        self.clearActiveItems();\n        if (self.isFocused) {\n          self.inputState();\n        }\n        return;\n      }\n\n      // modify selection\n      eventName = e && e.type.toLowerCase();\n      if (eventName === 'click' && isKeyDown('shiftKey', e) && self.activeItems.length) {\n        last = self.getLastActive();\n        begin = Array.prototype.indexOf.call(self.control.children, last);\n        end = Array.prototype.indexOf.call(self.control.children, item);\n        if (begin > end) {\n          swap = begin;\n          begin = end;\n          end = swap;\n        }\n        for (i = begin; i <= end; i++) {\n          item = self.control.children[i];\n          if (self.activeItems.indexOf(item) === -1) {\n            self.setActiveItemClass(item);\n          }\n        }\n        preventDefault(e);\n      } else if (eventName === 'click' && isKeyDown(KEY_SHORTCUT, e) || eventName === 'keydown' && isKeyDown('shiftKey', e)) {\n        if (item.classList.contains('active')) {\n          self.removeActiveItem(item);\n        } else {\n          self.setActiveItemClass(item);\n        }\n      } else {\n        self.clearActiveItems();\n        self.setActiveItemClass(item);\n      }\n\n      // ensure control has focus\n      self.inputState();\n      if (!self.isFocused) {\n        self.focus();\n      }\n    }\n\n    /**\n     * Set the active and last-active classes\n     *\n     */\n    setActiveItemClass(item) {\n      const self = this;\n      const last_active = self.control.querySelector('.last-active');\n      if (last_active) removeClasses(last_active, 'last-active');\n      addClasses(item, 'active last-active');\n      self.trigger('item_select', item);\n      if (self.activeItems.indexOf(item) == -1) {\n        self.activeItems.push(item);\n      }\n    }\n\n    /**\n     * Remove active item\n     *\n     */\n    removeActiveItem(item) {\n      var idx = this.activeItems.indexOf(item);\n      this.activeItems.splice(idx, 1);\n      removeClasses(item, 'active');\n    }\n\n    /**\n     * Clears all the active items\n     *\n     */\n    clearActiveItems() {\n      removeClasses(this.activeItems, 'active');\n      this.activeItems = [];\n    }\n\n    /**\n     * Sets the selected item in the dropdown menu\n     * of available options.\n     *\n     */\n    setActiveOption(option) {\n      let scroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (option === this.activeOption) {\n        return;\n      }\n      this.clearActiveOption();\n      if (!option) return;\n      this.activeOption = option;\n      setAttr(this.focus_node, {\n        'aria-activedescendant': option.getAttribute('id')\n      });\n      setAttr(option, {\n        'aria-selected': 'true'\n      });\n      addClasses(option, 'active');\n      if (scroll) this.scrollToOption(option);\n    }\n\n    /**\n     * Sets the dropdown_content scrollTop to display the option\n     *\n     */\n    scrollToOption(option, behavior) {\n      if (!option) return;\n      const content = this.dropdown_content;\n      const height_menu = content.clientHeight;\n      const scrollTop = content.scrollTop || 0;\n      const height_item = option.offsetHeight;\n      const y = option.getBoundingClientRect().top - content.getBoundingClientRect().top + scrollTop;\n      if (y + height_item > height_menu + scrollTop) {\n        this.scroll(y - height_menu + height_item, behavior);\n      } else if (y < scrollTop) {\n        this.scroll(y, behavior);\n      }\n    }\n\n    /**\n     * Scroll the dropdown to the given position\n     *\n     */\n    scroll(scrollTop, behavior) {\n      const content = this.dropdown_content;\n      if (behavior) {\n        content.style.scrollBehavior = behavior;\n      }\n      content.scrollTop = scrollTop;\n      content.style.scrollBehavior = '';\n    }\n\n    /**\n     * Clears the active option\n     *\n     */\n    clearActiveOption() {\n      if (this.activeOption) {\n        removeClasses(this.activeOption, 'active');\n        setAttr(this.activeOption, {\n          'aria-selected': null\n        });\n      }\n      this.activeOption = null;\n      setAttr(this.focus_node, {\n        'aria-activedescendant': null\n      });\n    }\n\n    /**\n     * Selects all items (CTRL + A).\n     */\n    selectAll() {\n      const self = this;\n      if (self.settings.mode === 'single') return;\n      const activeItems = self.controlChildren();\n      if (!activeItems.length) return;\n      self.inputState();\n      self.close();\n      self.activeItems = activeItems;\n      iterate(activeItems, item => {\n        self.setActiveItemClass(item);\n      });\n    }\n\n    /**\n     * Determines if the control_input should be in a hidden or visible state\n     *\n     */\n    inputState() {\n      var self = this;\n      if (!self.control.contains(self.control_input)) return;\n      setAttr(self.control_input, {\n        placeholder: self.settings.placeholder\n      });\n      if (self.activeItems.length > 0 || !self.isFocused && self.settings.hidePlaceholder && self.items.length > 0) {\n        self.setTextboxValue();\n        self.isInputHidden = true;\n      } else {\n        if (self.settings.hidePlaceholder && self.items.length > 0) {\n          setAttr(self.control_input, {\n            placeholder: ''\n          });\n        }\n        self.isInputHidden = false;\n      }\n      self.wrapper.classList.toggle('input-hidden', self.isInputHidden);\n    }\n\n    /**\n     * Get the input value\n     */\n    inputValue() {\n      return this.control_input.value.trim();\n    }\n\n    /**\n     * Gives the control focus.\n     */\n    focus() {\n      var self = this;\n      if (self.isDisabled || self.isReadOnly) return;\n      self.ignoreFocus = true;\n      if (self.control_input.offsetWidth) {\n        self.control_input.focus();\n      } else {\n        self.focus_node.focus();\n      }\n      setTimeout(() => {\n        self.ignoreFocus = false;\n        self.onFocus();\n      }, 0);\n    }\n\n    /**\n     * Forces the control out of focus.\n     *\n     */\n    blur() {\n      this.focus_node.blur();\n      this.onBlur();\n    }\n\n    /**\n     * Returns a function that scores an object\n     * to show how good of a match it is to the\n     * provided query.\n     *\n     * @return {function}\n     */\n    getScoreFunction(query) {\n      return this.sifter.getScoreFunction(query, this.getSearchOptions());\n    }\n\n    /**\n     * Returns search options for sifter (the system\n     * for scoring and sorting results).\n     *\n     * @see https://github.com/orchidjs/sifter.js\n     * @return {object}\n     */\n    getSearchOptions() {\n      var settings = this.settings;\n      var sort = settings.sortField;\n      if (typeof settings.sortField === 'string') {\n        sort = [{\n          field: settings.sortField\n        }];\n      }\n      return {\n        fields: settings.searchField,\n        conjunction: settings.searchConjunction,\n        sort: sort,\n        nesting: settings.nesting\n      };\n    }\n\n    /**\n     * Searches through available options and returns\n     * a sorted array of matches.\n     *\n     */\n    search(query) {\n      var result, calculateScore;\n      var self = this;\n      var options = this.getSearchOptions();\n\n      // validate user-provided result scoring function\n      if (self.settings.score) {\n        calculateScore = self.settings.score.call(self, query);\n        if (typeof calculateScore !== 'function') {\n          throw new Error('Tom Select \"score\" setting must be a function that returns a function');\n        }\n      }\n\n      // perform search\n      if (query !== self.lastQuery) {\n        self.lastQuery = query;\n        result = self.sifter.search(query, Object.assign(options, {\n          score: calculateScore\n        }));\n        self.currentResults = result;\n      } else {\n        result = Object.assign({}, self.currentResults);\n      }\n\n      // filter out selected items\n      if (self.settings.hideSelected) {\n        result.items = result.items.filter(item => {\n          let hashed = hash_key(item.id);\n          return !(hashed && self.items.indexOf(hashed) !== -1);\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Refreshes the list of available options shown\n     * in the autocomplete dropdown menu.\n     *\n     */\n    refreshOptions() {\n      let triggerDropdown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var i, j, k, n, optgroup, optgroups, html, has_create_option, active_group;\n      var create;\n      const groups = {};\n      const groups_order = [];\n      var self = this;\n      var query = self.inputValue();\n      const same_query = query === self.lastQuery || query == '' && self.lastQuery == null;\n      var results = self.search(query);\n      var active_option = null;\n      var show_dropdown = self.settings.shouldOpen || false;\n      var dropdown_content = self.dropdown_content;\n      if (same_query) {\n        active_option = self.activeOption;\n        if (active_option) {\n          active_group = active_option.closest('[data-group]');\n        }\n      }\n\n      // build markup\n      n = results.items.length;\n      if (typeof self.settings.maxOptions === 'number') {\n        n = Math.min(n, self.settings.maxOptions);\n      }\n      if (n > 0) {\n        show_dropdown = true;\n      }\n\n      // get fragment for group and the position of the group in group_order\n      const getGroupFragment = (optgroup, order) => {\n        let group_order_i = groups[optgroup];\n        if (group_order_i !== undefined) {\n          let order_group = groups_order[group_order_i];\n          if (order_group !== undefined) {\n            return [group_order_i, order_group.fragment];\n          }\n        }\n        let group_fragment = document.createDocumentFragment();\n        group_order_i = groups_order.length;\n        groups_order.push({\n          fragment: group_fragment,\n          order,\n          optgroup\n        });\n        return [group_order_i, group_fragment];\n      };\n\n      // render and group available options individually\n      for (i = 0; i < n; i++) {\n        // get option dom element\n        let item = results.items[i];\n        if (!item) continue;\n        let opt_value = item.id;\n        let option = self.options[opt_value];\n        if (option === undefined) continue;\n        let opt_hash = get_hash(opt_value);\n        let option_el = self.getOption(opt_hash, true);\n\n        // toggle 'selected' class\n        if (!self.settings.hideSelected) {\n          option_el.classList.toggle('selected', self.items.includes(opt_hash));\n        }\n        optgroup = option[self.settings.optgroupField] || '';\n        optgroups = Array.isArray(optgroup) ? optgroup : [optgroup];\n        for (j = 0, k = optgroups && optgroups.length; j < k; j++) {\n          optgroup = optgroups[j];\n          let order = option.$order;\n          let self_optgroup = self.optgroups[optgroup];\n          if (self_optgroup === undefined) {\n            optgroup = '';\n          } else {\n            order = self_optgroup.$order;\n          }\n          const _getGroupFragment = getGroupFragment(optgroup, order),\n            _getGroupFragment2 = _slicedToArray(_getGroupFragment, 2),\n            group_order_i = _getGroupFragment2[0],\n            group_fragment = _getGroupFragment2[1];\n\n          // nodes can only have one parent, so if the option is in mutple groups, we need a clone\n          if (j > 0) {\n            option_el = option_el.cloneNode(true);\n            setAttr(option_el, {\n              id: option.$id + '-clone-' + j,\n              'aria-selected': null\n            });\n            option_el.classList.add('ts-cloned');\n            removeClasses(option_el, 'active');\n\n            // make sure we keep the activeOption in the same group\n            if (self.activeOption && self.activeOption.dataset.value == opt_value) {\n              if (active_group && active_group.dataset.group === optgroup.toString()) {\n                active_option = option_el;\n              }\n            }\n          }\n          group_fragment.appendChild(option_el);\n          if (optgroup != '') {\n            groups[optgroup] = group_order_i;\n          }\n        }\n      }\n\n      // sort optgroups\n      if (self.settings.lockOptgroupOrder) {\n        groups_order.sort((a, b) => {\n          return a.order - b.order;\n        });\n      }\n\n      // render optgroup headers & join groups\n      html = document.createDocumentFragment();\n      iterate(groups_order, group_order => {\n        let group_fragment = group_order.fragment;\n        let optgroup = group_order.optgroup;\n        if (!group_fragment || !group_fragment.children.length) return;\n        let group_heading = self.optgroups[optgroup];\n        if (group_heading !== undefined) {\n          let group_options = document.createDocumentFragment();\n          let header = self.render('optgroup_header', group_heading);\n          append(group_options, header);\n          append(group_options, group_fragment);\n          let group_html = self.render('optgroup', {\n            group: group_heading,\n            options: group_options\n          });\n          append(html, group_html);\n        } else {\n          append(html, group_fragment);\n        }\n      });\n      dropdown_content.innerHTML = '';\n      append(dropdown_content, html);\n\n      // highlight matching terms inline\n      if (self.settings.highlight) {\n        removeHighlight(dropdown_content);\n        if (results.query.length && results.tokens.length) {\n          iterate(results.tokens, tok => {\n            highlight(dropdown_content, tok.regex);\n          });\n        }\n      }\n\n      // helper method for adding templates to dropdown\n      var add_template = template => {\n        let content = self.render(template, {\n          input: query\n        });\n        if (content) {\n          show_dropdown = true;\n          dropdown_content.insertBefore(content, dropdown_content.firstChild);\n        }\n        return content;\n      };\n\n      // add loading message\n      if (self.loading) {\n        add_template('loading');\n\n        // invalid query\n      } else if (!self.settings.shouldLoad.call(self, query)) {\n        add_template('not_loading');\n\n        // add no_results message\n      } else if (results.items.length === 0) {\n        add_template('no_results');\n      }\n\n      // add create option\n      has_create_option = self.canCreate(query);\n      if (has_create_option) {\n        create = add_template('option_create');\n      }\n\n      // activate\n      self.hasOptions = results.items.length > 0 || has_create_option;\n      if (show_dropdown) {\n        if (results.items.length > 0) {\n          if (!active_option && self.settings.mode === 'single' && self.items[0] != undefined) {\n            active_option = self.getOption(self.items[0]);\n          }\n          if (!dropdown_content.contains(active_option)) {\n            let active_index = 0;\n            if (create && !self.settings.addPrecedence) {\n              active_index = 1;\n            }\n            active_option = self.selectable()[active_index];\n          }\n        } else if (create) {\n          active_option = create;\n        }\n        if (triggerDropdown && !self.isOpen) {\n          self.open();\n          self.scrollToOption(active_option, 'auto');\n        }\n        self.setActiveOption(active_option);\n      } else {\n        self.clearActiveOption();\n        if (triggerDropdown && self.isOpen) {\n          self.close(false); // if create_option=null, we want the dropdown to close but not reset the textbox value\n        }\n      }\n    }\n\n    /**\n     * Return list of selectable options\n     *\n     */\n    selectable() {\n      return this.dropdown_content.querySelectorAll('[data-selectable]');\n    }\n\n    /**\n     * Adds an available option. If it already exists,\n     * nothing will happen. Note: this does not refresh\n     * the options list dropdown (use `refreshOptions`\n     * for that).\n     *\n     * Usage:\n     *\n     *   this.addOption(data)\n     *\n     */\n    addOption(data) {\n      let user_created = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const self = this;\n\n      // @deprecated 1.7.7\n      // use addOptions( array, user_created ) for adding multiple options\n      if (Array.isArray(data)) {\n        self.addOptions(data, user_created);\n        return false;\n      }\n      const key = hash_key(data[self.settings.valueField]);\n      if (key === null || self.options.hasOwnProperty(key)) {\n        return false;\n      }\n      data.$order = data.$order || ++self.order;\n      data.$id = self.inputId + '-opt-' + data.$order;\n      self.options[key] = data;\n      self.lastQuery = null;\n      if (user_created) {\n        self.userOptions[key] = user_created;\n        self.trigger('option_add', key, data);\n      }\n      return key;\n    }\n\n    /**\n     * Add multiple options\n     *\n     */\n    addOptions(data) {\n      let user_created = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      iterate(data, dat => {\n        this.addOption(dat, user_created);\n      });\n    }\n\n    /**\n     * @deprecated 1.7.7\n     */\n    registerOption(data) {\n      return this.addOption(data);\n    }\n\n    /**\n     * Registers an option group to the pool of option groups.\n     *\n     * @return {boolean|string}\n     */\n    registerOptionGroup(data) {\n      var key = hash_key(data[this.settings.optgroupValueField]);\n      if (key === null) return false;\n      data.$order = data.$order || ++this.order;\n      this.optgroups[key] = data;\n      return key;\n    }\n\n    /**\n     * Registers a new optgroup for options\n     * to be bucketed into.\n     *\n     */\n    addOptionGroup(id, data) {\n      var hashed_id;\n      data[this.settings.optgroupValueField] = id;\n      if (hashed_id = this.registerOptionGroup(data)) {\n        this.trigger('optgroup_add', hashed_id, data);\n      }\n    }\n\n    /**\n     * Removes an existing option group.\n     *\n     */\n    removeOptionGroup(id) {\n      if (this.optgroups.hasOwnProperty(id)) {\n        delete this.optgroups[id];\n        this.clearCache();\n        this.trigger('optgroup_remove', id);\n      }\n    }\n\n    /**\n     * Clears all existing option groups.\n     */\n    clearOptionGroups() {\n      this.optgroups = {};\n      this.clearCache();\n      this.trigger('optgroup_clear');\n    }\n\n    /**\n     * Updates an option available for selection. If\n     * it is visible in the selected items or options\n     * dropdown, it will be re-rendered automatically.\n     *\n     */\n    updateOption(value, data) {\n      const self = this;\n      var item_new;\n      var index_item;\n      const value_old = hash_key(value);\n      const value_new = hash_key(data[self.settings.valueField]);\n\n      // sanity checks\n      if (value_old === null) return;\n      const data_old = self.options[value_old];\n      if (data_old == undefined) return;\n      if (typeof value_new !== 'string') throw new Error('Value must be set in option data');\n      const option = self.getOption(value_old);\n      const item = self.getItem(value_old);\n      data.$order = data.$order || data_old.$order;\n      delete self.options[value_old];\n\n      // invalidate render cache\n      // don't remove existing node yet, we'll remove it after replacing it\n      self.uncacheValue(value_new);\n      self.options[value_new] = data;\n\n      // update the option if it's in the dropdown\n      if (option) {\n        if (self.dropdown_content.contains(option)) {\n          const option_new = self._render('option', data);\n          replaceNode(option, option_new);\n          if (self.activeOption === option) {\n            self.setActiveOption(option_new);\n          }\n        }\n        option.remove();\n      }\n\n      // update the item if we have one\n      if (item) {\n        index_item = self.items.indexOf(value_old);\n        if (index_item !== -1) {\n          self.items.splice(index_item, 1, value_new);\n        }\n        item_new = self._render('item', data);\n        if (item.classList.contains('active')) addClasses(item_new, 'active');\n        replaceNode(item, item_new);\n      }\n\n      // invalidate last query because we might have updated the sortField\n      self.lastQuery = null;\n    }\n\n    /**\n     * Removes a single option.\n     *\n     */\n    removeOption(value, silent) {\n      const self = this;\n      value = get_hash(value);\n      self.uncacheValue(value);\n      delete self.userOptions[value];\n      delete self.options[value];\n      self.lastQuery = null;\n      self.trigger('option_remove', value);\n      self.removeItem(value, silent);\n    }\n\n    /**\n     * Clears all options.\n     */\n    clearOptions(filter) {\n      const boundFilter = (filter || this.clearFilter).bind(this);\n      this.loadedSearches = {};\n      this.userOptions = {};\n      this.clearCache();\n      const selected = {};\n      iterate(this.options, (option, key) => {\n        if (boundFilter(option, key)) {\n          selected[key] = option;\n        }\n      });\n      this.options = this.sifter.items = selected;\n      this.lastQuery = null;\n      this.trigger('option_clear');\n    }\n\n    /**\n     * Used by clearOptions() to decide whether or not an option should be removed\n     * Return true to keep an option, false to remove\n     *\n     */\n    clearFilter(option, value) {\n      if (this.items.indexOf(value) >= 0) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the dom element of the option\n     * matching the given value.\n     *\n     */\n    getOption(value) {\n      let create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const hashed = hash_key(value);\n      if (hashed === null) return null;\n      const option = this.options[hashed];\n      if (option != undefined) {\n        if (option.$div) {\n          return option.$div;\n        }\n        if (create) {\n          return this._render('option', option);\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Returns the dom element of the next or previous dom element of the same type\n     * Note: adjacent options may not be adjacent DOM elements (optgroups)\n     *\n     */\n    getAdjacent(option, direction) {\n      let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'option';\n      var self = this,\n        all;\n      if (!option) {\n        return null;\n      }\n      if (type == 'item') {\n        all = self.controlChildren();\n      } else {\n        all = self.dropdown_content.querySelectorAll('[data-selectable]');\n      }\n      for (let i = 0; i < all.length; i++) {\n        if (all[i] != option) {\n          continue;\n        }\n        if (direction > 0) {\n          return all[i + 1];\n        }\n        return all[i - 1];\n      }\n      return null;\n    }\n\n    /**\n     * Returns the dom element of the item\n     * matching the given value.\n     *\n     */\n    getItem(item) {\n      if (typeof item == 'object') {\n        return item;\n      }\n      var value = hash_key(item);\n      return value !== null ? this.control.querySelector(`[data-value=\"${addSlashes(value)}\"]`) : null;\n    }\n\n    /**\n     * \"Selects\" multiple items at once. Adds them to the list\n     * at the current caret position.\n     *\n     */\n    addItems(values, silent) {\n      var self = this;\n      var items = Array.isArray(values) ? values : [values];\n      items = items.filter(x => self.items.indexOf(x) === -1);\n      const last_item = items[items.length - 1];\n      items.forEach(item => {\n        self.isPending = item !== last_item;\n        self.addItem(item, silent);\n      });\n    }\n\n    /**\n     * \"Selects\" an item. Adds it to the list\n     * at the current caret position.\n     *\n     */\n    addItem(value, silent) {\n      var events = silent ? [] : ['change', 'dropdown_close'];\n      debounce_events(this, events, () => {\n        var item, wasFull;\n        const self = this;\n        const inputMode = self.settings.mode;\n        const hashed = hash_key(value);\n        if (hashed && self.items.indexOf(hashed) !== -1) {\n          if (inputMode === 'single') {\n            self.close();\n          }\n          if (inputMode === 'single' || !self.settings.duplicates) {\n            return;\n          }\n        }\n        if (hashed === null || !self.options.hasOwnProperty(hashed)) return;\n        if (inputMode === 'single') self.clear(silent);\n        if (inputMode === 'multi' && self.isFull()) return;\n        item = self._render('item', self.options[hashed]);\n        if (self.control.contains(item)) {\n          // duplicates\n          item = item.cloneNode(true);\n        }\n        wasFull = self.isFull();\n        self.items.splice(self.caretPos, 0, hashed);\n        self.insertAtCaret(item);\n        if (self.isSetup) {\n          // update menu / remove the option (if this is not one item being added as part of series)\n          if (!self.isPending && self.settings.hideSelected) {\n            let option = self.getOption(hashed);\n            let next = self.getAdjacent(option, 1);\n            if (next) {\n              self.setActiveOption(next);\n            }\n          }\n\n          // refreshOptions after setActiveOption(),\n          // otherwise setActiveOption() will be called by refreshOptions() with the wrong value\n          if (!self.isPending && !self.settings.closeAfterSelect) {\n            self.refreshOptions(self.isFocused && inputMode !== 'single');\n          }\n\n          // hide the menu if the maximum number of items have been selected or no options are left\n          if (self.settings.closeAfterSelect != false && self.isFull()) {\n            self.close();\n          } else if (!self.isPending) {\n            self.positionDropdown();\n          }\n          self.trigger('item_add', hashed, item);\n          if (!self.isPending) {\n            self.updateOriginalInput({\n              silent: silent\n            });\n          }\n        }\n        if (!self.isPending || !wasFull && self.isFull()) {\n          self.inputState();\n          self.refreshState();\n        }\n      });\n    }\n\n    /**\n     * Removes the selected item matching\n     * the provided value.\n     *\n     */\n    removeItem() {\n      let item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      let silent = arguments.length > 1 ? arguments[1] : undefined;\n      const self = this;\n      item = self.getItem(item);\n      if (!item) return;\n      var i, idx;\n      const value = item.dataset.value;\n      i = nodeIndex(item);\n      item.remove();\n      if (item.classList.contains('active')) {\n        idx = self.activeItems.indexOf(item);\n        self.activeItems.splice(idx, 1);\n        removeClasses(item, 'active');\n      }\n      self.items.splice(i, 1);\n      self.lastQuery = null;\n      if (!self.settings.persist && self.userOptions.hasOwnProperty(value)) {\n        self.removeOption(value, silent);\n      }\n      if (i < self.caretPos) {\n        self.setCaret(self.caretPos - 1);\n      }\n      self.updateOriginalInput({\n        silent: silent\n      });\n      self.refreshState();\n      self.positionDropdown();\n      self.trigger('item_remove', value, item);\n    }\n\n    /**\n     * Invokes the `create` method provided in the\n     * TomSelect options that should provide the data\n     * for the new item, given the user input.\n     *\n     * Once this completes, it will be added\n     * to the item list.\n     *\n     */\n    createItem() {\n      let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n      // triggerDropdown parameter @deprecated 2.1.1\n      if (arguments.length === 3) {\n        callback = arguments[2];\n      }\n      if (typeof callback != 'function') {\n        callback = () => {};\n      }\n      var self = this;\n      var caret = self.caretPos;\n      var output;\n      input = input || self.inputValue();\n      if (!self.canCreate(input)) {\n        callback();\n        return false;\n      }\n      self.lock();\n      var created = false;\n      var create = data => {\n        self.unlock();\n        if (!data || typeof data !== 'object') return callback();\n        var value = hash_key(data[self.settings.valueField]);\n        if (typeof value !== 'string') {\n          return callback();\n        }\n        self.setTextboxValue();\n        self.addOption(data, true);\n        self.setCaret(caret);\n        self.addItem(value);\n        callback(data);\n        created = true;\n      };\n      if (typeof self.settings.create === 'function') {\n        output = self.settings.create.call(this, input, create);\n      } else {\n        output = {\n          [self.settings.labelField]: input,\n          [self.settings.valueField]: input\n        };\n      }\n      if (!created) {\n        create(output);\n      }\n      return true;\n    }\n\n    /**\n     * Re-renders the selected item lists.\n     */\n    refreshItems() {\n      var self = this;\n      self.lastQuery = null;\n      if (self.isSetup) {\n        self.addItems(self.items);\n      }\n      self.updateOriginalInput();\n      self.refreshState();\n    }\n\n    /**\n     * Updates all state-dependent attributes\n     * and CSS classes.\n     */\n    refreshState() {\n      const self = this;\n      self.refreshValidityState();\n      const isFull = self.isFull();\n      const isLocked = self.isLocked;\n      self.wrapper.classList.toggle('rtl', self.rtl);\n      const wrap_classList = self.wrapper.classList;\n      wrap_classList.toggle('focus', self.isFocused);\n      wrap_classList.toggle('disabled', self.isDisabled);\n      wrap_classList.toggle('readonly', self.isReadOnly);\n      wrap_classList.toggle('required', self.isRequired);\n      wrap_classList.toggle('invalid', !self.isValid);\n      wrap_classList.toggle('locked', isLocked);\n      wrap_classList.toggle('full', isFull);\n      wrap_classList.toggle('input-active', self.isFocused && !self.isInputHidden);\n      wrap_classList.toggle('dropdown-active', self.isOpen);\n      wrap_classList.toggle('has-options', isEmptyObject(self.options));\n      wrap_classList.toggle('has-items', self.items.length > 0);\n    }\n\n    /**\n     * Update the `required` attribute of both input and control input.\n     *\n     * The `required` property needs to be activated on the control input\n     * for the error to be displayed at the right place. `required` also\n     * needs to be temporarily deactivated on the input since the input is\n     * hidden and can't show errors.\n     */\n    refreshValidityState() {\n      var self = this;\n      if (!self.input.validity) {\n        return;\n      }\n      self.isValid = self.input.validity.valid;\n      self.isInvalid = !self.isValid;\n    }\n\n    /**\n     * Determines whether or not more items can be added\n     * to the control without exceeding the user-defined maximum.\n     *\n     * @returns {boolean}\n     */\n    isFull() {\n      return this.settings.maxItems !== null && this.items.length >= this.settings.maxItems;\n    }\n\n    /**\n     * Refreshes the original <select> or <input>\n     * element to reflect the current state.\n     *\n     */\n    updateOriginalInput() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const self = this;\n      var option, label;\n      const empty_option = self.input.querySelector('option[value=\"\"]');\n      if (self.is_select_tag) {\n        const selected = [];\n        const has_selected = self.input.querySelectorAll('option:checked').length;\n        function AddSelected(option_el, value, label) {\n          if (!option_el) {\n            option_el = getDom('<option value=\"' + escape_html(value) + '\">' + escape_html(label) + '</option>');\n          }\n\n          // don't move empty option from top of list\n          // fixes bug in firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1725293\n          if (option_el != empty_option) {\n            self.input.append(option_el);\n          }\n          selected.push(option_el);\n\n          // marking empty option as selected can break validation\n          // fixes https://github.com/orchidjs/tom-select/issues/303\n          if (option_el != empty_option || has_selected > 0) {\n            option_el.selected = true;\n          }\n          return option_el;\n        }\n\n        // unselect all selected options\n        self.input.querySelectorAll('option:checked').forEach(option_el => {\n          option_el.selected = false;\n        });\n\n        // nothing selected?\n        if (self.items.length == 0 && self.settings.mode == 'single') {\n          AddSelected(empty_option, \"\", \"\");\n\n          // order selected <option> tags for values in self.items\n        } else {\n          self.items.forEach(value => {\n            option = self.options[value];\n            label = option[self.settings.labelField] || '';\n            if (selected.includes(option.$option)) {\n              const reuse_opt = self.input.querySelector(`option[value=\"${addSlashes(value)}\"]:not(:checked)`);\n              AddSelected(reuse_opt, value, label);\n            } else {\n              option.$option = AddSelected(option.$option, value, label);\n            }\n          });\n        }\n      } else {\n        self.input.value = self.getValue();\n      }\n      if (self.isSetup) {\n        if (!opts.silent) {\n          self.trigger('change', self.getValue());\n        }\n      }\n    }\n\n    /**\n     * Shows the autocomplete dropdown containing\n     * the available options.\n     */\n    open() {\n      var self = this;\n      if (self.isLocked || self.isOpen || self.settings.mode === 'multi' && self.isFull()) return;\n      self.isOpen = true;\n      setAttr(self.focus_node, {\n        'aria-expanded': 'true'\n      });\n      self.refreshState();\n      applyCSS(self.dropdown, {\n        visibility: 'hidden',\n        display: 'block'\n      });\n      self.positionDropdown();\n      applyCSS(self.dropdown, {\n        visibility: 'visible',\n        display: 'block'\n      });\n      self.focus();\n      self.trigger('dropdown_open', self.dropdown);\n    }\n\n    /**\n     * Closes the autocomplete dropdown menu.\n     */\n    close() {\n      let setTextboxValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var self = this;\n      var trigger = self.isOpen;\n      if (setTextboxValue) {\n        // before blur() to prevent form onchange event\n        self.setTextboxValue();\n        if (self.settings.mode === 'single' && self.items.length) {\n          self.inputState();\n        }\n      }\n      self.isOpen = false;\n      setAttr(self.focus_node, {\n        'aria-expanded': 'false'\n      });\n      applyCSS(self.dropdown, {\n        display: 'none'\n      });\n      if (self.settings.hideSelected) {\n        self.clearActiveOption();\n      }\n      self.refreshState();\n      if (trigger) self.trigger('dropdown_close', self.dropdown);\n    }\n\n    /**\n     * Calculates and applies the appropriate\n     * position of the dropdown if dropdownParent = 'body'.\n     * Otherwise, position is determined by css\n     */\n    positionDropdown() {\n      if (this.settings.dropdownParent !== 'body') {\n        return;\n      }\n      var context = this.control;\n      var rect = context.getBoundingClientRect();\n      var top = context.offsetHeight + rect.top + window.scrollY;\n      var left = rect.left + window.scrollX;\n      applyCSS(this.dropdown, {\n        width: rect.width + 'px',\n        top: top + 'px',\n        left: left + 'px'\n      });\n    }\n\n    /**\n     * Resets / clears all selected items\n     * from the control.\n     *\n     */\n    clear(silent) {\n      var self = this;\n      if (!self.items.length) return;\n      var items = self.controlChildren();\n      iterate(items, item => {\n        self.removeItem(item, true);\n      });\n      self.inputState();\n      if (!silent) self.updateOriginalInput();\n      self.trigger('clear');\n    }\n\n    /**\n     * A helper method for inserting an element\n     * at the current caret position.\n     *\n     */\n    insertAtCaret(el) {\n      const self = this;\n      const caret = self.caretPos;\n      const target = self.control;\n      target.insertBefore(el, target.children[caret] || null);\n      self.setCaret(caret + 1);\n    }\n\n    /**\n     * Removes the current selected item(s).\n     *\n     */\n    deleteSelection(e) {\n      var direction, selection, caret, tail;\n      var self = this;\n      direction = e && e.keyCode === KEY_BACKSPACE ? -1 : 1;\n      selection = getSelection(self.control_input);\n\n      // determine items that will be removed\n      const rm_items = [];\n      if (self.activeItems.length) {\n        tail = getTail(self.activeItems, direction);\n        caret = nodeIndex(tail);\n        if (direction > 0) {\n          caret++;\n        }\n        iterate(self.activeItems, item => rm_items.push(item));\n      } else if ((self.isFocused || self.settings.mode === 'single') && self.items.length) {\n        const items = self.controlChildren();\n        let rm_item;\n        if (direction < 0 && selection.start === 0 && selection.length === 0) {\n          rm_item = items[self.caretPos - 1];\n        } else if (direction > 0 && selection.start === self.inputValue().length) {\n          rm_item = items[self.caretPos];\n        }\n        if (rm_item !== undefined) {\n          rm_items.push(rm_item);\n        }\n      }\n      if (!self.shouldDelete(rm_items, e)) {\n        return false;\n      }\n      preventDefault(e, true);\n\n      // perform removal\n      if (typeof caret !== 'undefined') {\n        self.setCaret(caret);\n      }\n      while (rm_items.length) {\n        self.removeItem(rm_items.pop());\n      }\n      self.inputState();\n      self.positionDropdown();\n      self.refreshOptions(false);\n      return true;\n    }\n\n    /**\n     * Return true if the items should be deleted\n     */\n    shouldDelete(items, evt) {\n      const values = items.map(item => item.dataset.value);\n\n      // allow the callback to abort\n      if (!values.length || typeof this.settings.onDelete === 'function' && this.settings.onDelete(values, evt) === false) {\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Selects the previous / next item (depending on the `direction` argument).\n     *\n     * > 0 - right\n     * < 0 - left\n     *\n     */\n    advanceSelection(direction, e) {\n      var last_active,\n        adjacent,\n        self = this;\n      if (self.rtl) direction *= -1;\n      if (self.inputValue().length) return;\n\n      // add or remove to active items\n      if (isKeyDown(KEY_SHORTCUT, e) || isKeyDown('shiftKey', e)) {\n        last_active = self.getLastActive(direction);\n        if (last_active) {\n          if (!last_active.classList.contains('active')) {\n            adjacent = last_active;\n          } else {\n            adjacent = self.getAdjacent(last_active, direction, 'item');\n          }\n\n          // if no active item, get items adjacent to the control input\n        } else if (direction > 0) {\n          adjacent = self.control_input.nextElementSibling;\n        } else {\n          adjacent = self.control_input.previousElementSibling;\n        }\n        if (adjacent) {\n          if (adjacent.classList.contains('active')) {\n            self.removeActiveItem(last_active);\n          }\n          self.setActiveItemClass(adjacent); // mark as last_active !! after removeActiveItem() on last_active\n        }\n\n        // move caret to the left or right\n      } else {\n        self.moveCaret(direction);\n      }\n    }\n    moveCaret(direction) {}\n\n    /**\n     * Get the last active item\n     *\n     */\n    getLastActive(direction) {\n      let last_active = this.control.querySelector('.last-active');\n      if (last_active) {\n        return last_active;\n      }\n      var result = this.control.querySelectorAll('.active');\n      if (result) {\n        return getTail(result, direction);\n      }\n    }\n\n    /**\n     * Moves the caret to the specified index.\n     *\n     * The input must be moved by leaving it in place and moving the\n     * siblings, due to the fact that focus cannot be restored once lost\n     * on mobile webkit devices\n     *\n     */\n    setCaret(new_pos) {\n      this.caretPos = this.items.length;\n    }\n\n    /**\n     * Return list of item dom elements\n     *\n     */\n    controlChildren() {\n      return Array.from(this.control.querySelectorAll('[data-ts-item]'));\n    }\n\n    /**\n     * Disables user input on the control. Used while\n     * items are being asynchronously created.\n     */\n    lock() {\n      this.setLocked(true);\n    }\n\n    /**\n     * Re-enables user input on the control.\n     */\n    unlock() {\n      this.setLocked(false);\n    }\n\n    /**\n     * Disable or enable user input on the control\n     */\n    setLocked() {\n      let lock = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isReadOnly || this.isDisabled;\n      this.isLocked = lock;\n      this.refreshState();\n    }\n\n    /**\n     * Disables user input on the control completely.\n     * While disabled, it cannot receive focus.\n     */\n    disable() {\n      this.setDisabled(true);\n      this.close();\n    }\n\n    /**\n     * Enables the control so that it can respond\n     * to focus and user input.\n     */\n    enable() {\n      this.setDisabled(false);\n    }\n    setDisabled(disabled) {\n      this.focus_node.tabIndex = disabled ? -1 : this.tabIndex;\n      this.isDisabled = disabled;\n      this.input.disabled = disabled;\n      this.control_input.disabled = disabled;\n      this.setLocked();\n    }\n    setReadOnly(isReadOnly) {\n      this.isReadOnly = isReadOnly;\n      this.input.readOnly = isReadOnly;\n      this.control_input.readOnly = isReadOnly;\n      this.setLocked();\n    }\n\n    /**\n     * Completely destroys the control and\n     * unbinds all event listeners so that it can\n     * be garbage collected.\n     */\n    destroy() {\n      var self = this;\n      var revertSettings = self.revertSettings;\n      self.trigger('destroy');\n      self.off();\n      self.wrapper.remove();\n      self.dropdown.remove();\n      self.input.innerHTML = revertSettings.innerHTML;\n      self.input.tabIndex = revertSettings.tabIndex;\n      removeClasses(self.input, 'tomselected', 'ts-hidden-accessible');\n      self._destroy();\n      delete self.input.tomselect;\n    }\n\n    /**\n     * A helper method for rendering \"item\" and\n     * \"option\" templates, given the data.\n     *\n     */\n    render(templateName, data) {\n      var id, html;\n      const self = this;\n      if (typeof this.settings.render[templateName] !== 'function') {\n        return null;\n      }\n\n      // render markup\n      html = self.settings.render[templateName].call(this, data, escape_html);\n      if (!html) {\n        return null;\n      }\n      html = getDom(html);\n\n      // add mandatory attributes\n      if (templateName === 'option' || templateName === 'option_create') {\n        if (data[self.settings.disabledField]) {\n          setAttr(html, {\n            'aria-disabled': 'true'\n          });\n        } else {\n          setAttr(html, {\n            'data-selectable': ''\n          });\n        }\n      } else if (templateName === 'optgroup') {\n        id = data.group[self.settings.optgroupValueField];\n        setAttr(html, {\n          'data-group': id\n        });\n        if (data.group[self.settings.disabledField]) {\n          setAttr(html, {\n            'data-disabled': ''\n          });\n        }\n      }\n      if (templateName === 'option' || templateName === 'item') {\n        const value = get_hash(data[self.settings.valueField]);\n        setAttr(html, {\n          'data-value': value\n        });\n\n        // make sure we have some classes if a template is overwritten\n        if (templateName === 'item') {\n          addClasses(html, self.settings.itemClass);\n          setAttr(html, {\n            'data-ts-item': ''\n          });\n        } else {\n          addClasses(html, self.settings.optionClass);\n          setAttr(html, {\n            role: 'option',\n            id: data.$id\n          });\n\n          // update cache\n          data.$div = html;\n          self.options[value] = data;\n        }\n      }\n      return html;\n    }\n\n    /**\n     * Type guarded rendering\n     *\n     */\n    _render(templateName, data) {\n      const html = this.render(templateName, data);\n      if (html == null) {\n        throw 'HTMLElement expected';\n      }\n      return html;\n    }\n\n    /**\n     * Clears the render cache for a template. If\n     * no template is given, clears all render\n     * caches.\n     *\n     */\n    clearCache() {\n      iterate(this.options, option => {\n        if (option.$div) {\n          option.$div.remove();\n          delete option.$div;\n        }\n      });\n    }\n\n    /**\n     * Removes a value from item and option caches\n     *\n     */\n    uncacheValue(value) {\n      const option_el = this.getOption(value);\n      if (option_el) option_el.remove();\n    }\n\n    /**\n     * Determines whether or not to display the\n     * create item prompt, given a user input.\n     *\n     */\n    canCreate(input) {\n      return this.settings.create && input.length > 0 && this.settings.createFilter.call(this, input);\n    }\n\n    /**\n     * Wraps this.`method` so that `new_fn` can be invoked 'before', 'after', or 'instead' of the original method\n     *\n     * this.hook('instead','onKeyDown',function( arg1, arg2 ...){\n     *\n     * });\n     */\n    hook(when, method, new_fn) {\n      var self = this;\n      var orig_method = self[method];\n      self[method] = function () {\n        var result, result_new;\n        if (when === 'after') {\n          result = orig_method.apply(self, arguments);\n        }\n        result_new = new_fn.apply(self, arguments);\n        if (when === 'instead') {\n          return result_new;\n        }\n        if (when === 'before') {\n          result = orig_method.apply(self, arguments);\n        }\n        return result;\n      };\n    }\n  }\n\n  /**\n   * Plugin: \"change_listener\" (Tom Select)\n   * Copyright (c) contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function change_listener() {\n    addEvent(this.input, 'change', () => {\n      this.sync();\n    });\n  }\n\n  /**\n   * Plugin: \"checkbox_options\" (Tom Select)\n   * Copyright (c) contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function checkbox_options(userOptions) {\n    var self = this;\n    var orig_onOptionSelect = self.onOptionSelect;\n    self.settings.hideSelected = false;\n    const cbOptions = Object.assign({\n      // so that the user may add different ones as well\n      className: \"tomselect-checkbox\",\n      // the following default to the historic plugin's values\n      checkedClassNames: undefined,\n      uncheckedClassNames: undefined\n    }, userOptions);\n    var UpdateChecked = function UpdateChecked(checkbox, toCheck) {\n      if (toCheck) {\n        checkbox.checked = true;\n        if (cbOptions.uncheckedClassNames) {\n          checkbox.classList.remove(...cbOptions.uncheckedClassNames);\n        }\n        if (cbOptions.checkedClassNames) {\n          checkbox.classList.add(...cbOptions.checkedClassNames);\n        }\n      } else {\n        checkbox.checked = false;\n        if (cbOptions.checkedClassNames) {\n          checkbox.classList.remove(...cbOptions.checkedClassNames);\n        }\n        if (cbOptions.uncheckedClassNames) {\n          checkbox.classList.add(...cbOptions.uncheckedClassNames);\n        }\n      }\n    };\n\n    // update the checkbox for an option\n    var UpdateCheckbox = function UpdateCheckbox(option) {\n      setTimeout(() => {\n        var checkbox = option.querySelector('input.' + cbOptions.className);\n        if (checkbox instanceof HTMLInputElement) {\n          UpdateChecked(checkbox, option.classList.contains('selected'));\n        }\n      }, 1);\n    };\n\n    // add checkbox to option template\n    self.hook('after', 'setupTemplates', () => {\n      var orig_render_option = self.settings.render.option;\n      self.settings.render.option = (data, escape_html) => {\n        var rendered = getDom(orig_render_option.call(self, data, escape_html));\n        var checkbox = document.createElement('input');\n        if (cbOptions.className) {\n          checkbox.classList.add(cbOptions.className);\n        }\n        checkbox.addEventListener('click', function (evt) {\n          preventDefault(evt);\n        });\n        checkbox.type = 'checkbox';\n        const hashed = hash_key(data[self.settings.valueField]);\n        UpdateChecked(checkbox, !!(hashed && self.items.indexOf(hashed) > -1));\n        rendered.prepend(checkbox);\n        return rendered;\n      };\n    });\n\n    // uncheck when item removed\n    self.on('item_remove', value => {\n      var option = self.getOption(value);\n      if (option) {\n        // if dropdown hasn't been opened yet, the option won't exist\n        option.classList.remove('selected'); // selected class won't be removed yet\n        UpdateCheckbox(option);\n      }\n    });\n\n    // check when item added\n    self.on('item_add', value => {\n      var option = self.getOption(value);\n      if (option) {\n        // if dropdown hasn't been opened yet, the option won't exist\n        UpdateCheckbox(option);\n      }\n    });\n\n    // remove items when selected option is clicked\n    self.hook('instead', 'onOptionSelect', (evt, option) => {\n      if (option.classList.contains('selected')) {\n        option.classList.remove('selected');\n        self.removeItem(option.dataset.value);\n        self.refreshOptions();\n        preventDefault(evt, true);\n        return;\n      }\n      orig_onOptionSelect.call(self, evt, option);\n      UpdateCheckbox(option);\n    });\n  }\n\n  /**\n   * Plugin: \"dropdown_header\" (Tom Select)\n   * Copyright (c) contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function clear_button(userOptions) {\n    const self = this;\n    const options = Object.assign({\n      className: 'clear-button',\n      title: 'Clear All',\n      html: data => {\n        return `<div class=\"${data.className}\" title=\"${data.title}\">&#10799;</div>`;\n      }\n    }, userOptions);\n    self.on('initialize', () => {\n      var button = getDom(options.html(options));\n      button.addEventListener('click', evt => {\n        if (self.isLocked) return;\n        self.clear();\n        if (self.settings.mode === 'single' && self.settings.allowEmptyOption) {\n          self.addItem('');\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n      });\n      self.control.appendChild(button);\n    });\n  }\n\n  /**\n   * Plugin: \"drag_drop\" (Tom Select)\n   * Copyright (c) contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  const insertAfter = (referenceNode, newNode) => {\n    var _referenceNode$parent;\n    (_referenceNode$parent = referenceNode.parentNode) == null || _referenceNode$parent.insertBefore(newNode, referenceNode.nextSibling);\n  };\n  const insertBefore = (referenceNode, newNode) => {\n    var _referenceNode$parent2;\n    (_referenceNode$parent2 = referenceNode.parentNode) == null || _referenceNode$parent2.insertBefore(newNode, referenceNode);\n  };\n  const isBefore = (referenceNode, newNode) => {\n    do {\n      var _newNode;\n      newNode = (_newNode = newNode) == null ? void 0 : _newNode.previousElementSibling;\n      if (referenceNode == newNode) {\n        return true;\n      }\n    } while (newNode && newNode.previousElementSibling);\n    return false;\n  };\n  function drag_drop() {\n    var self = this;\n    if (self.settings.mode !== 'multi') return;\n    var orig_lock = self.lock;\n    var orig_unlock = self.unlock;\n    let sortable = true;\n    let drag_item;\n\n    /**\n     * Add draggable attribute to item\n     */\n    self.hook('after', 'setupTemplates', () => {\n      var orig_render_item = self.settings.render.item;\n      self.settings.render.item = (data, escape) => {\n        const item = getDom(orig_render_item.call(self, data, escape));\n        setAttr(item, {\n          'draggable': 'true'\n        });\n\n        // prevent doc_mousedown (see tom-select.ts)\n        const mousedown = evt => {\n          if (!sortable) preventDefault(evt);\n          evt.stopPropagation();\n        };\n        const dragStart = evt => {\n          drag_item = item;\n          setTimeout(() => {\n            item.classList.add('ts-dragging');\n          }, 0);\n        };\n        const dragOver = evt => {\n          evt.preventDefault();\n          item.classList.add('ts-drag-over');\n          moveitem(item, drag_item);\n        };\n        const dragLeave = () => {\n          item.classList.remove('ts-drag-over');\n        };\n        const moveitem = (targetitem, dragitem) => {\n          if (dragitem === undefined) return;\n          if (isBefore(dragitem, item)) {\n            insertAfter(targetitem, dragitem);\n          } else {\n            insertBefore(targetitem, dragitem);\n          }\n        };\n        const dragend = () => {\n          var _drag_item;\n          document.querySelectorAll('.ts-drag-over').forEach(el => el.classList.remove('ts-drag-over'));\n          (_drag_item = drag_item) == null || _drag_item.classList.remove('ts-dragging');\n          drag_item = undefined;\n          var values = [];\n          self.control.querySelectorAll(`[data-value]`).forEach(el => {\n            if (el.dataset.value) {\n              let value = el.dataset.value;\n              if (value) {\n                values.push(value);\n              }\n            }\n          });\n          self.setValue(values);\n        };\n        addEvent(item, 'mousedown', mousedown);\n        addEvent(item, 'dragstart', dragStart);\n        addEvent(item, 'dragenter', dragOver);\n        addEvent(item, 'dragover', dragOver);\n        addEvent(item, 'dragleave', dragLeave);\n        addEvent(item, 'dragend', dragend);\n        return item;\n      };\n    });\n    self.hook('instead', 'lock', () => {\n      sortable = false;\n      return orig_lock.call(self);\n    });\n    self.hook('instead', 'unlock', () => {\n      sortable = true;\n      return orig_unlock.call(self);\n    });\n  }\n\n  /**\n   * Plugin: \"dropdown_header\" (Tom Select)\n   * Copyright (c) contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function dropdown_header(userOptions) {\n    const self = this;\n    const options = Object.assign({\n      title: 'Untitled',\n      headerClass: 'dropdown-header',\n      titleRowClass: 'dropdown-header-title',\n      labelClass: 'dropdown-header-label',\n      closeClass: 'dropdown-header-close',\n      html: data => {\n        return '<div class=\"' + data.headerClass + '\">' + '<div class=\"' + data.titleRowClass + '\">' + '<span class=\"' + data.labelClass + '\">' + data.title + '</span>' + '<a class=\"' + data.closeClass + '\">&times;</a>' + '</div>' + '</div>';\n      }\n    }, userOptions);\n    self.on('initialize', () => {\n      var header = getDom(options.html(options));\n      var close_link = header.querySelector('.' + options.closeClass);\n      if (close_link) {\n        close_link.addEventListener('click', evt => {\n          preventDefault(evt, true);\n          self.close();\n        });\n      }\n      self.dropdown.insertBefore(header, self.dropdown.firstChild);\n    });\n  }\n\n  /**\n   * Plugin: \"dropdown_input\" (Tom Select)\n   * Copyright (c) contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function caret_position() {\n    var self = this;\n\n    /**\n     * Moves the caret to the specified index.\n     *\n     * The input must be moved by leaving it in place and moving the\n     * siblings, due to the fact that focus cannot be restored once lost\n     * on mobile webkit devices\n     *\n     */\n    self.hook('instead', 'setCaret', new_pos => {\n      if (self.settings.mode === 'single' || !self.control.contains(self.control_input)) {\n        new_pos = self.items.length;\n      } else {\n        new_pos = Math.max(0, Math.min(self.items.length, new_pos));\n        if (new_pos != self.caretPos && !self.isPending) {\n          self.controlChildren().forEach((child, j) => {\n            if (j < new_pos) {\n              self.control_input.insertAdjacentElement('beforebegin', child);\n            } else {\n              self.control.appendChild(child);\n            }\n          });\n        }\n      }\n      self.caretPos = new_pos;\n    });\n    self.hook('instead', 'moveCaret', direction => {\n      if (!self.isFocused) return;\n\n      // move caret before or after selected items\n      const last_active = self.getLastActive(direction);\n      if (last_active) {\n        const idx = nodeIndex(last_active);\n        self.setCaret(direction > 0 ? idx + 1 : idx);\n        self.setActiveItem();\n        removeClasses(last_active, 'last-active');\n\n        // move caret left or right of current position\n      } else {\n        self.setCaret(self.caretPos + direction);\n      }\n    });\n  }\n\n  /**\n   * Plugin: \"dropdown_input\" (Tom Select)\n   * Copyright (c) contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function dropdown_input() {\n    const self = this;\n    self.settings.shouldOpen = true; // make sure the input is shown even if there are no options to display in the dropdown\n\n    self.hook('before', 'setup', () => {\n      self.focus_node = self.control;\n      addClasses(self.control_input, 'dropdown-input');\n      const div = getDom('<div class=\"dropdown-input-wrap\">');\n      div.append(self.control_input);\n      self.dropdown.insertBefore(div, self.dropdown.firstChild);\n\n      // set a placeholder in the select control\n      const placeholder = getDom('<input class=\"items-placeholder\" tabindex=\"-1\" />');\n      placeholder.placeholder = self.settings.placeholder || '';\n      self.control.append(placeholder);\n    });\n    self.on('initialize', () => {\n      // set tabIndex on control to -1, otherwise [shift+tab] will put focus right back on control_input\n      self.control_input.addEventListener('keydown', evt => {\n        //addEvent(self.control_input,'keydown' as const,(evt:KeyboardEvent) =>{\n        switch (evt.keyCode) {\n          case KEY_ESC:\n            if (self.isOpen) {\n              preventDefault(evt, true);\n              self.close();\n            }\n            self.clearActiveItems();\n            return;\n          case KEY_TAB:\n            self.focus_node.tabIndex = -1;\n            break;\n        }\n        return self.onKeyDown.call(self, evt);\n      });\n      self.on('blur', () => {\n        self.focus_node.tabIndex = self.isDisabled ? -1 : self.tabIndex;\n      });\n\n      // give the control_input focus when the dropdown is open\n      self.on('dropdown_open', () => {\n        self.control_input.focus();\n      });\n\n      // prevent onBlur from closing when focus is on the control_input\n      const orig_onBlur = self.onBlur;\n      self.hook('instead', 'onBlur', evt => {\n        if (evt && evt.relatedTarget == self.control_input) return;\n        return orig_onBlur.call(self);\n      });\n      addEvent(self.control_input, 'blur', () => self.onBlur());\n\n      // return focus to control to allow further keyboard input\n      self.hook('before', 'close', () => {\n        if (!self.isOpen) return;\n        self.focus_node.focus({\n          preventScroll: true\n        });\n      });\n    });\n  }\n\n  /**\n   * Plugin: \"input_autogrow\" (Tom Select)\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function input_autogrow() {\n    var self = this;\n    self.on('initialize', () => {\n      var test_input = document.createElement('span');\n      var control = self.control_input;\n      test_input.style.cssText = 'position:absolute; top:-99999px; left:-99999px; width:auto; padding:0; white-space:pre; ';\n      self.wrapper.appendChild(test_input);\n      var transfer_styles = ['letterSpacing', 'fontSize', 'fontFamily', 'fontWeight', 'textTransform'];\n      for (var _i = 0, _transfer_styles = transfer_styles; _i < _transfer_styles.length; _i++) {\n        const style_name = _transfer_styles[_i];\n        // @ts-ignore TS7015 https://stackoverflow.com/a/50506154/697576\n        test_input.style[style_name] = control.style[style_name];\n      }\n\n      /**\n       * Set the control width\n       *\n       */\n      var resize = () => {\n        test_input.textContent = control.value;\n        control.style.width = test_input.clientWidth + 'px';\n      };\n      resize();\n      self.on('update item_add item_remove', resize);\n      addEvent(control, 'input', resize);\n      addEvent(control, 'keyup', resize);\n      addEvent(control, 'blur', resize);\n      addEvent(control, 'update', resize);\n    });\n  }\n\n  /**\n   * Plugin: \"input_autogrow\" (Tom Select)\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function no_backspace_delete() {\n    var self = this;\n    var orig_deleteSelection = self.deleteSelection;\n    this.hook('instead', 'deleteSelection', evt => {\n      if (self.activeItems.length) {\n        return orig_deleteSelection.call(self, evt);\n      }\n      return false;\n    });\n  }\n\n  /**\n   * Plugin: \"no_active_items\" (Tom Select)\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function no_active_items() {\n    this.hook('instead', 'setActiveItem', () => {});\n    this.hook('instead', 'selectAll', () => {});\n  }\n\n  /**\n   * Plugin: \"optgroup_columns\" (Tom Select.js)\n   * Copyright (c) contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function optgroup_columns() {\n    var self = this;\n    var orig_keydown = self.onKeyDown;\n    self.hook('instead', 'onKeyDown', evt => {\n      var index, option, options, optgroup;\n      if (!self.isOpen || !(evt.keyCode === KEY_LEFT || evt.keyCode === KEY_RIGHT)) {\n        return orig_keydown.call(self, evt);\n      }\n      self.ignoreHover = true;\n      optgroup = parentMatch(self.activeOption, '[data-group]');\n      index = nodeIndex(self.activeOption, '[data-selectable]');\n      if (!optgroup) {\n        return;\n      }\n      if (evt.keyCode === KEY_LEFT) {\n        optgroup = optgroup.previousSibling;\n      } else {\n        optgroup = optgroup.nextSibling;\n      }\n      if (!optgroup) {\n        return;\n      }\n      options = optgroup.querySelectorAll('[data-selectable]');\n      option = options[Math.min(options.length - 1, index)];\n      if (option) {\n        self.setActiveOption(option);\n      }\n    });\n  }\n\n  /**\n   * Plugin: \"remove_button\" (Tom Select)\n   * Copyright (c) contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function remove_button(userOptions) {\n    const options = Object.assign({\n      label: '&times;',\n      title: 'Remove',\n      className: 'remove',\n      append: true\n    }, userOptions);\n\n    //options.className = 'remove-single';\n    var self = this;\n\n    // override the render method to add remove button to each item\n    if (!options.append) {\n      return;\n    }\n    var html = '<a href=\"javascript:void(0)\" class=\"' + options.className + '\" tabindex=\"-1\" title=\"' + escape_html(options.title) + '\">' + options.label + '</a>';\n    self.hook('after', 'setupTemplates', () => {\n      var orig_render_item = self.settings.render.item;\n      self.settings.render.item = (data, escape) => {\n        var item = getDom(orig_render_item.call(self, data, escape));\n        var close_button = getDom(html);\n        item.appendChild(close_button);\n        addEvent(close_button, 'mousedown', evt => {\n          preventDefault(evt, true);\n        });\n        addEvent(close_button, 'click', evt => {\n          if (self.isLocked) return;\n\n          // propagating will trigger the dropdown to show for single mode\n          preventDefault(evt, true);\n          if (self.isLocked) return;\n          if (!self.shouldDelete([item], evt)) return;\n          self.removeItem(item);\n          self.refreshOptions(false);\n          self.inputState();\n        });\n        return item;\n      };\n    });\n  }\n\n  /**\n   * Plugin: \"restore_on_backspace\" (Tom Select)\n   * Copyright (c) contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function restore_on_backspace(userOptions) {\n    const self = this;\n    const options = Object.assign({\n      text: option => {\n        return option[self.settings.labelField];\n      }\n    }, userOptions);\n    self.on('item_remove', function (value) {\n      if (!self.isFocused) {\n        return;\n      }\n      if (self.control_input.value.trim() === '') {\n        var option = self.options[value];\n        if (option) {\n          self.setTextboxValue(options.text.call(self, option));\n        }\n      }\n    });\n  }\n\n  /**\n   * Plugin: \"restore_on_backspace\" (Tom Select)\n   * Copyright (c) contributors\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n   * file except in compliance with the License. You may obtain a copy of the License at:\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software distributed under\n   * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n   * ANY KIND, either express or implied. See the License for the specific language\n   * governing permissions and limitations under the License.\n   *\n   */\n\n  function virtual_scroll() {\n    const self = this;\n    const orig_canLoad = self.canLoad;\n    const orig_clearActiveOption = self.clearActiveOption;\n    const orig_loadCallback = self.loadCallback;\n    var pagination = {};\n    var dropdown_content;\n    var loading_more = false;\n    var load_more_opt;\n    var default_values = [];\n    if (!self.settings.shouldLoadMore) {\n      // return true if additional results should be loaded\n      self.settings.shouldLoadMore = () => {\n        const scroll_percent = dropdown_content.clientHeight / (dropdown_content.scrollHeight - dropdown_content.scrollTop);\n        if (scroll_percent > 0.9) {\n          return true;\n        }\n        if (self.activeOption) {\n          var selectable = self.selectable();\n          var index = Array.from(selectable).indexOf(self.activeOption);\n          if (index >= selectable.length - 2) {\n            return true;\n          }\n        }\n        return false;\n      };\n    }\n    if (!self.settings.firstUrl) {\n      throw 'virtual_scroll plugin requires a firstUrl() method';\n    }\n\n    // in order for virtual scrolling to work,\n    // options need to be ordered the same way they're returned from the remote data source\n    self.settings.sortField = [{\n      field: '$order'\n    }, {\n      field: '$score'\n    }];\n\n    // can we load more results for given query?\n    const canLoadMore = query => {\n      if (typeof self.settings.maxOptions === 'number' && dropdown_content.children.length >= self.settings.maxOptions) {\n        return false;\n      }\n      if (query in pagination && pagination[query]) {\n        return true;\n      }\n      return false;\n    };\n    const clearFilter = (option, value) => {\n      if (self.items.indexOf(value) >= 0 || default_values.indexOf(value) >= 0) {\n        return true;\n      }\n      return false;\n    };\n\n    // set the next url that will be\n    self.setNextUrl = (value, next_url) => {\n      pagination[value] = next_url;\n    };\n\n    // getUrl() to be used in settings.load()\n    self.getUrl = query => {\n      if (query in pagination) {\n        const next_url = pagination[query];\n        pagination[query] = false;\n        return next_url;\n      }\n\n      // if the user goes back to a previous query\n      // we need to load the first page again\n      self.clearPagination();\n      return self.settings.firstUrl.call(self, query);\n    };\n\n    // clear pagination\n    self.clearPagination = () => {\n      pagination = {};\n    };\n\n    // don't clear the active option (and cause unwanted dropdown scroll)\n    // while loading more results\n    self.hook('instead', 'clearActiveOption', () => {\n      if (loading_more) {\n        return;\n      }\n      return orig_clearActiveOption.call(self);\n    });\n\n    // override the canLoad method\n    self.hook('instead', 'canLoad', query => {\n      // first time the query has been seen\n      if (!(query in pagination)) {\n        return orig_canLoad.call(self, query);\n      }\n      return canLoadMore(query);\n    });\n\n    // wrap the load\n    self.hook('instead', 'loadCallback', (options, optgroups) => {\n      if (!loading_more) {\n        self.clearOptions(clearFilter);\n      } else if (load_more_opt) {\n        const first_option = options[0];\n        if (first_option !== undefined) {\n          load_more_opt.dataset.value = first_option[self.settings.valueField];\n        }\n      }\n      orig_loadCallback.call(self, options, optgroups);\n      loading_more = false;\n    });\n\n    // add templates to dropdown\n    //\tloading_more if we have another url in the queue\n    //\tno_more_results if we don't have another url in the queue\n    self.hook('after', 'refreshOptions', () => {\n      const query = self.lastValue;\n      var option;\n      if (canLoadMore(query)) {\n        option = self.render('loading_more', {\n          query: query\n        });\n        if (option) {\n          option.setAttribute('data-selectable', ''); // so that navigating dropdown with [down] keypresses can navigate to this node\n          load_more_opt = option;\n        }\n      } else if (query in pagination && !dropdown_content.querySelector('.no-results')) {\n        option = self.render('no_more_results', {\n          query: query\n        });\n      }\n      if (option) {\n        addClasses(option, self.settings.optionClass);\n        dropdown_content.append(option);\n      }\n    });\n\n    // add scroll listener and default templates\n    self.on('initialize', () => {\n      default_values = Object.keys(self.options);\n      dropdown_content = self.dropdown_content;\n\n      // default templates\n      self.settings.render = Object.assign({}, {\n        loading_more: () => {\n          return `<div class=\"loading-more-results\">Loading more results ... </div>`;\n        },\n        no_more_results: () => {\n          return `<div class=\"no-more-results\">No more results</div>`;\n        }\n      }, self.settings.render);\n\n      // watch dropdown content scroll position\n      dropdown_content.addEventListener('scroll', () => {\n        if (!self.settings.shouldLoadMore.call(self)) {\n          return;\n        }\n\n        // !important: this will get checked again in load() but we still need to check here otherwise loading_more will be set to true\n        if (!canLoadMore(self.lastValue)) {\n          return;\n        }\n\n        // don't call load() too much\n        if (loading_more) return;\n        loading_more = true;\n        self.load.call(self, self.lastValue);\n      });\n    });\n  }\n  TomSelect.define('change_listener', change_listener);\n  TomSelect.define('checkbox_options', checkbox_options);\n  TomSelect.define('clear_button', clear_button);\n  TomSelect.define('drag_drop', drag_drop);\n  TomSelect.define('dropdown_header', dropdown_header);\n  TomSelect.define('caret_position', caret_position);\n  TomSelect.define('dropdown_input', dropdown_input);\n  TomSelect.define('input_autogrow', input_autogrow);\n  TomSelect.define('no_backspace_delete', no_backspace_delete);\n  TomSelect.define('no_active_items', no_active_items);\n  TomSelect.define('optgroup_columns', optgroup_columns);\n  TomSelect.define('remove_button', remove_button);\n  TomSelect.define('restore_on_backspace', restore_on_backspace);\n  TomSelect.define('virtual_scroll', virtual_scroll);\n  return TomSelect;\n});\nvar tomSelect = function (el, opts) {\n  return new TomSelect(el, opts);\n};","/*\nTurbolinks 5.2.0\nCopyright © 2018 Basecamp, LLC\n */\n(function () {\n  var t = this;\n  (function () {\n    (function () {\n      this.Turbolinks = {\n        supported: function () {\n          return null != window.history.pushState && null != window.requestAnimationFrame && null != window.addEventListener;\n        }(),\n        visit: function (t, r) {\n          return e.controller.visit(t, r);\n        },\n        clearCache: function () {\n          return e.controller.clearCache();\n        },\n        setProgressBarDelay: function (t) {\n          return e.controller.setProgressBarDelay(t);\n        }\n      };\n    }).call(this);\n  }).call(t);\n  var e = t.Turbolinks;\n  (function () {\n    (function () {\n      var t,\n        r,\n        n,\n        o = [].slice;\n      e.copyObject = function (t) {\n        var e, r, n;\n        r = {};\n        for (e in t) n = t[e], r[e] = n;\n        return r;\n      }, e.closest = function (e, r) {\n        return t.call(e, r);\n      }, t = function () {\n        var t, e;\n        return t = document.documentElement, null != (e = t.closest) ? e : function (t) {\n          var e;\n          for (e = this; e;) {\n            if (e.nodeType === Node.ELEMENT_NODE && r.call(e, t)) return e;\n            e = e.parentNode;\n          }\n        };\n      }(), e.defer = function (t) {\n        return setTimeout(t, 1);\n      }, e.throttle = function (t) {\n        var e;\n        return e = null, function () {\n          var r;\n          return r = 1 <= arguments.length ? o.call(arguments, 0) : [], null != e ? e : e = requestAnimationFrame(function (n) {\n            return function () {\n              return e = null, t.apply(n, r);\n            };\n          }(this));\n        };\n      }, e.dispatch = function (t, e) {\n        var r, o, i, s, a, u;\n        return a = null != e ? e : {}, u = a.target, r = a.cancelable, o = a.data, i = document.createEvent(\"Events\"), i.initEvent(t, !0, r === !0), i.data = null != o ? o : {}, i.cancelable && !n && (s = i.preventDefault, i.preventDefault = function () {\n          return this.defaultPrevented || Object.defineProperty(this, \"defaultPrevented\", {\n            get: function () {\n              return !0;\n            }\n          }), s.call(this);\n        }), (null != u ? u : document).dispatchEvent(i), i;\n      }, n = function () {\n        var t;\n        return t = document.createEvent(\"Events\"), t.initEvent(\"test\", !0, !0), t.preventDefault(), t.defaultPrevented;\n      }(), e.match = function (t, e) {\n        return r.call(t, e);\n      }, r = function () {\n        var t, e, r, n;\n        return t = document.documentElement, null != (e = null != (r = null != (n = t.matchesSelector) ? n : t.webkitMatchesSelector) ? r : t.msMatchesSelector) ? e : t.mozMatchesSelector;\n      }(), e.uuid = function () {\n        var t, e, r;\n        for (r = \"\", t = e = 1; 36 >= e; t = ++e) r += 9 === t || 14 === t || 19 === t || 24 === t ? \"-\" : 15 === t ? \"4\" : 20 === t ? (Math.floor(4 * Math.random()) + 8).toString(16) : Math.floor(15 * Math.random()).toString(16);\n        return r;\n      };\n    }).call(this), function () {\n      e.Location = function () {\n        function t(t) {\n          var e, r;\n          null == t && (t = \"\"), r = document.createElement(\"a\"), r.href = t.toString(), this.absoluteURL = r.href, e = r.hash.length, 2 > e ? this.requestURL = this.absoluteURL : (this.requestURL = this.absoluteURL.slice(0, -e), this.anchor = r.hash.slice(1));\n        }\n        var e, r, n, o;\n        return t.wrap = function (t) {\n          return t instanceof this ? t : new this(t);\n        }, t.prototype.getOrigin = function () {\n          return this.absoluteURL.split(\"/\", 3).join(\"/\");\n        }, t.prototype.getPath = function () {\n          var t, e;\n          return null != (t = null != (e = this.requestURL.match(/\\/\\/[^\\/]*(\\/[^?;]*)/)) ? e[1] : void 0) ? t : \"/\";\n        }, t.prototype.getPathComponents = function () {\n          return this.getPath().split(\"/\").slice(1);\n        }, t.prototype.getLastPathComponent = function () {\n          return this.getPathComponents().slice(-1)[0];\n        }, t.prototype.getExtension = function () {\n          var t, e;\n          return null != (t = null != (e = this.getLastPathComponent().match(/\\.[^.]*$/)) ? e[0] : void 0) ? t : \"\";\n        }, t.prototype.isHTML = function () {\n          return this.getExtension().match(/^(?:|\\.(?:htm|html|xhtml))$/);\n        }, t.prototype.isPrefixedBy = function (t) {\n          var e;\n          return e = r(t), this.isEqualTo(t) || o(this.absoluteURL, e);\n        }, t.prototype.isEqualTo = function (t) {\n          return this.absoluteURL === (null != t ? t.absoluteURL : void 0);\n        }, t.prototype.toCacheKey = function () {\n          return this.requestURL;\n        }, t.prototype.toJSON = function () {\n          return this.absoluteURL;\n        }, t.prototype.toString = function () {\n          return this.absoluteURL;\n        }, t.prototype.valueOf = function () {\n          return this.absoluteURL;\n        }, r = function (t) {\n          return e(t.getOrigin() + t.getPath());\n        }, e = function (t) {\n          return n(t, \"/\") ? t : t + \"/\";\n        }, o = function (t, e) {\n          return t.slice(0, e.length) === e;\n        }, n = function (t, e) {\n          return t.slice(-e.length) === e;\n        }, t;\n      }();\n    }.call(this), function () {\n      var t = function (t, e) {\n        return function () {\n          return t.apply(e, arguments);\n        };\n      };\n      e.HttpRequest = function () {\n        function r(r, n, o) {\n          this.delegate = r, this.requestCanceled = t(this.requestCanceled, this), this.requestTimedOut = t(this.requestTimedOut, this), this.requestFailed = t(this.requestFailed, this), this.requestLoaded = t(this.requestLoaded, this), this.requestProgressed = t(this.requestProgressed, this), this.url = e.Location.wrap(n).requestURL, this.referrer = e.Location.wrap(o).absoluteURL, this.createXHR();\n        }\n        return r.NETWORK_FAILURE = 0, r.TIMEOUT_FAILURE = -1, r.timeout = 60, r.prototype.send = function () {\n          var t;\n          return this.xhr && !this.sent ? (this.notifyApplicationBeforeRequestStart(), this.setProgress(0), this.xhr.send(), this.sent = !0, \"function\" == typeof (t = this.delegate).requestStarted ? t.requestStarted() : void 0) : void 0;\n        }, r.prototype.cancel = function () {\n          return this.xhr && this.sent ? this.xhr.abort() : void 0;\n        }, r.prototype.requestProgressed = function (t) {\n          return t.lengthComputable ? this.setProgress(t.loaded / t.total) : void 0;\n        }, r.prototype.requestLoaded = function () {\n          return this.endRequest(function (t) {\n            return function () {\n              var e;\n              return 200 <= (e = t.xhr.status) && 300 > e ? t.delegate.requestCompletedWithResponse(t.xhr.responseText, t.xhr.getResponseHeader(\"Turbolinks-Location\")) : (t.failed = !0, t.delegate.requestFailedWithStatusCode(t.xhr.status, t.xhr.responseText));\n            };\n          }(this));\n        }, r.prototype.requestFailed = function () {\n          return this.endRequest(function (t) {\n            return function () {\n              return t.failed = !0, t.delegate.requestFailedWithStatusCode(t.constructor.NETWORK_FAILURE);\n            };\n          }(this));\n        }, r.prototype.requestTimedOut = function () {\n          return this.endRequest(function (t) {\n            return function () {\n              return t.failed = !0, t.delegate.requestFailedWithStatusCode(t.constructor.TIMEOUT_FAILURE);\n            };\n          }(this));\n        }, r.prototype.requestCanceled = function () {\n          return this.endRequest();\n        }, r.prototype.notifyApplicationBeforeRequestStart = function () {\n          return e.dispatch(\"turbolinks:request-start\", {\n            data: {\n              url: this.url,\n              xhr: this.xhr\n            }\n          });\n        }, r.prototype.notifyApplicationAfterRequestEnd = function () {\n          return e.dispatch(\"turbolinks:request-end\", {\n            data: {\n              url: this.url,\n              xhr: this.xhr\n            }\n          });\n        }, r.prototype.createXHR = function () {\n          return this.xhr = new XMLHttpRequest(), this.xhr.open(\"GET\", this.url, !0), this.xhr.timeout = 1e3 * this.constructor.timeout, this.xhr.setRequestHeader(\"Accept\", \"text/html, application/xhtml+xml\"), this.xhr.setRequestHeader(\"Turbolinks-Referrer\", this.referrer), this.xhr.onprogress = this.requestProgressed, this.xhr.onload = this.requestLoaded, this.xhr.onerror = this.requestFailed, this.xhr.ontimeout = this.requestTimedOut, this.xhr.onabort = this.requestCanceled;\n        }, r.prototype.endRequest = function (t) {\n          return this.xhr ? (this.notifyApplicationAfterRequestEnd(), null != t && t.call(this), this.destroy()) : void 0;\n        }, r.prototype.setProgress = function (t) {\n          var e;\n          return this.progress = t, \"function\" == typeof (e = this.delegate).requestProgressed ? e.requestProgressed(this.progress) : void 0;\n        }, r.prototype.destroy = function () {\n          var t;\n          return this.setProgress(1), \"function\" == typeof (t = this.delegate).requestFinished && t.requestFinished(), this.delegate = null, this.xhr = null;\n        }, r;\n      }();\n    }.call(this), function () {\n      var t = function (t, e) {\n        return function () {\n          return t.apply(e, arguments);\n        };\n      };\n      e.ProgressBar = function () {\n        function e() {\n          this.trickle = t(this.trickle, this), this.stylesheetElement = this.createStylesheetElement(), this.progressElement = this.createProgressElement();\n        }\n        var r;\n        return r = 300, e.defaultCSS = \".turbolinks-progress-bar {\\n  position: fixed;\\n  display: block;\\n  top: 0;\\n  left: 0;\\n  height: 3px;\\n  background: #0076ff;\\n  z-index: 9999;\\n  transition: width \" + r + \"ms ease-out, opacity \" + r / 2 + \"ms \" + r / 2 + \"ms ease-in;\\n  transform: translate3d(0, 0, 0);\\n}\", e.prototype.show = function () {\n          return this.visible ? void 0 : (this.visible = !0, this.installStylesheetElement(), this.installProgressElement(), this.startTrickling());\n        }, e.prototype.hide = function () {\n          return this.visible && !this.hiding ? (this.hiding = !0, this.fadeProgressElement(function (t) {\n            return function () {\n              return t.uninstallProgressElement(), t.stopTrickling(), t.visible = !1, t.hiding = !1;\n            };\n          }(this))) : void 0;\n        }, e.prototype.setValue = function (t) {\n          return this.value = t, this.refresh();\n        }, e.prototype.installStylesheetElement = function () {\n          return document.head.insertBefore(this.stylesheetElement, document.head.firstChild);\n        }, e.prototype.installProgressElement = function () {\n          return this.progressElement.style.width = 0, this.progressElement.style.opacity = 1, document.documentElement.insertBefore(this.progressElement, document.body), this.refresh();\n        }, e.prototype.fadeProgressElement = function (t) {\n          return this.progressElement.style.opacity = 0, setTimeout(t, 1.5 * r);\n        }, e.prototype.uninstallProgressElement = function () {\n          return this.progressElement.parentNode ? document.documentElement.removeChild(this.progressElement) : void 0;\n        }, e.prototype.startTrickling = function () {\n          return null != this.trickleInterval ? this.trickleInterval : this.trickleInterval = setInterval(this.trickle, r);\n        }, e.prototype.stopTrickling = function () {\n          return clearInterval(this.trickleInterval), this.trickleInterval = null;\n        }, e.prototype.trickle = function () {\n          return this.setValue(this.value + Math.random() / 100);\n        }, e.prototype.refresh = function () {\n          return requestAnimationFrame(function (t) {\n            return function () {\n              return t.progressElement.style.width = 10 + 90 * t.value + \"%\";\n            };\n          }(this));\n        }, e.prototype.createStylesheetElement = function () {\n          var t;\n          return t = document.createElement(\"style\"), t.type = \"text/css\", t.textContent = this.constructor.defaultCSS, t;\n        }, e.prototype.createProgressElement = function () {\n          var t;\n          return t = document.createElement(\"div\"), t.className = \"turbolinks-progress-bar\", t;\n        }, e;\n      }();\n    }.call(this), function () {\n      var t = function (t, e) {\n        return function () {\n          return t.apply(e, arguments);\n        };\n      };\n      e.BrowserAdapter = function () {\n        function r(r) {\n          this.controller = r, this.showProgressBar = t(this.showProgressBar, this), this.progressBar = new e.ProgressBar();\n        }\n        var n, o, i;\n        return i = e.HttpRequest, n = i.NETWORK_FAILURE, o = i.TIMEOUT_FAILURE, r.prototype.visitProposedToLocationWithAction = function (t, e) {\n          return this.controller.startVisitToLocationWithAction(t, e);\n        }, r.prototype.visitStarted = function (t) {\n          return t.issueRequest(), t.changeHistory(), t.loadCachedSnapshot();\n        }, r.prototype.visitRequestStarted = function (t) {\n          return this.progressBar.setValue(0), t.hasCachedSnapshot() || \"restore\" !== t.action ? this.showProgressBarAfterDelay() : this.showProgressBar();\n        }, r.prototype.visitRequestProgressed = function (t) {\n          return this.progressBar.setValue(t.progress);\n        }, r.prototype.visitRequestCompleted = function (t) {\n          return t.loadResponse();\n        }, r.prototype.visitRequestFailedWithStatusCode = function (t, e) {\n          switch (e) {\n            case n:\n            case o:\n              return this.reload();\n            default:\n              return t.loadResponse();\n          }\n        }, r.prototype.visitRequestFinished = function (t) {\n          return this.hideProgressBar();\n        }, r.prototype.visitCompleted = function (t) {\n          return t.followRedirect();\n        }, r.prototype.pageInvalidated = function () {\n          return this.reload();\n        }, r.prototype.showProgressBarAfterDelay = function () {\n          return this.progressBarTimeout = setTimeout(this.showProgressBar, this.controller.progressBarDelay);\n        }, r.prototype.showProgressBar = function () {\n          return this.progressBar.show();\n        }, r.prototype.hideProgressBar = function () {\n          return this.progressBar.hide(), clearTimeout(this.progressBarTimeout);\n        }, r.prototype.reload = function () {\n          return window.location.reload();\n        }, r;\n      }();\n    }.call(this), function () {\n      var t = function (t, e) {\n        return function () {\n          return t.apply(e, arguments);\n        };\n      };\n      e.History = function () {\n        function r(e) {\n          this.delegate = e, this.onPageLoad = t(this.onPageLoad, this), this.onPopState = t(this.onPopState, this);\n        }\n        return r.prototype.start = function () {\n          return this.started ? void 0 : (addEventListener(\"popstate\", this.onPopState, !1), addEventListener(\"load\", this.onPageLoad, !1), this.started = !0);\n        }, r.prototype.stop = function () {\n          return this.started ? (removeEventListener(\"popstate\", this.onPopState, !1), removeEventListener(\"load\", this.onPageLoad, !1), this.started = !1) : void 0;\n        }, r.prototype.push = function (t, r) {\n          return t = e.Location.wrap(t), this.update(\"push\", t, r);\n        }, r.prototype.replace = function (t, r) {\n          return t = e.Location.wrap(t), this.update(\"replace\", t, r);\n        }, r.prototype.onPopState = function (t) {\n          var r, n, o, i;\n          return this.shouldHandlePopState() && (i = null != (n = t.state) ? n.turbolinks : void 0) ? (r = e.Location.wrap(window.location), o = i.restorationIdentifier, this.delegate.historyPoppedToLocationWithRestorationIdentifier(r, o)) : void 0;\n        }, r.prototype.onPageLoad = function (t) {\n          return e.defer(function (t) {\n            return function () {\n              return t.pageLoaded = !0;\n            };\n          }(this));\n        }, r.prototype.shouldHandlePopState = function () {\n          return this.pageIsLoaded();\n        }, r.prototype.pageIsLoaded = function () {\n          return this.pageLoaded || \"complete\" === document.readyState;\n        }, r.prototype.update = function (t, e, r) {\n          var n;\n          return n = {\n            turbolinks: {\n              restorationIdentifier: r\n            }\n          }, history[t + \"State\"](n, null, e);\n        }, r;\n      }();\n    }.call(this), function () {\n      e.HeadDetails = function () {\n        function t(t) {\n          var e, r, n, s, a, u;\n          for (this.elements = {}, n = 0, a = t.length; a > n; n++) u = t[n], u.nodeType === Node.ELEMENT_NODE && (s = u.outerHTML, r = null != (e = this.elements)[s] ? e[s] : e[s] = {\n            type: i(u),\n            tracked: o(u),\n            elements: []\n          }, r.elements.push(u));\n        }\n        var e, r, n, o, i;\n        return t.fromHeadElement = function (t) {\n          var e;\n          return new this(null != (e = null != t ? t.childNodes : void 0) ? e : []);\n        }, t.prototype.hasElementWithKey = function (t) {\n          return t in this.elements;\n        }, t.prototype.getTrackedElementSignature = function () {\n          var t, e;\n          return function () {\n            var r, n;\n            r = this.elements, n = [];\n            for (t in r) e = r[t].tracked, e && n.push(t);\n            return n;\n          }.call(this).join(\"\");\n        }, t.prototype.getScriptElementsNotInDetails = function (t) {\n          return this.getElementsMatchingTypeNotInDetails(\"script\", t);\n        }, t.prototype.getStylesheetElementsNotInDetails = function (t) {\n          return this.getElementsMatchingTypeNotInDetails(\"stylesheet\", t);\n        }, t.prototype.getElementsMatchingTypeNotInDetails = function (t, e) {\n          var r, n, o, i, s, a;\n          o = this.elements, s = [];\n          for (n in o) i = o[n], a = i.type, r = i.elements, a !== t || e.hasElementWithKey(n) || s.push(r[0]);\n          return s;\n        }, t.prototype.getProvisionalElements = function () {\n          var t, e, r, n, o, i, s;\n          r = [], n = this.elements;\n          for (e in n) o = n[e], s = o.type, i = o.tracked, t = o.elements, null != s || i ? t.length > 1 && r.push.apply(r, t.slice(1)) : r.push.apply(r, t);\n          return r;\n        }, t.prototype.getMetaValue = function (t) {\n          var e;\n          return null != (e = this.findMetaElementByName(t)) ? e.getAttribute(\"content\") : void 0;\n        }, t.prototype.findMetaElementByName = function (t) {\n          var r, n, o, i;\n          r = void 0, i = this.elements;\n          for (o in i) n = i[o].elements, e(n[0], t) && (r = n[0]);\n          return r;\n        }, i = function (t) {\n          return r(t) ? \"script\" : n(t) ? \"stylesheet\" : void 0;\n        }, o = function (t) {\n          return \"reload\" === t.getAttribute(\"data-turbolinks-track\");\n        }, r = function (t) {\n          var e;\n          return e = t.tagName.toLowerCase(), \"script\" === e;\n        }, n = function (t) {\n          var e;\n          return e = t.tagName.toLowerCase(), \"style\" === e || \"link\" === e && \"stylesheet\" === t.getAttribute(\"rel\");\n        }, e = function (t, e) {\n          var r;\n          return r = t.tagName.toLowerCase(), \"meta\" === r && t.getAttribute(\"name\") === e;\n        }, t;\n      }();\n    }.call(this), function () {\n      e.Snapshot = function () {\n        function t(t, e) {\n          this.headDetails = t, this.bodyElement = e;\n        }\n        return t.wrap = function (t) {\n          return t instanceof this ? t : \"string\" == typeof t ? this.fromHTMLString(t) : this.fromHTMLElement(t);\n        }, t.fromHTMLString = function (t) {\n          var e;\n          return e = document.createElement(\"html\"), e.innerHTML = t, this.fromHTMLElement(e);\n        }, t.fromHTMLElement = function (t) {\n          var r, n, o, i;\n          return o = t.querySelector(\"head\"), r = null != (i = t.querySelector(\"body\")) ? i : document.createElement(\"body\"), n = e.HeadDetails.fromHeadElement(o), new this(n, r);\n        }, t.prototype.clone = function () {\n          return new this.constructor(this.headDetails, this.bodyElement.cloneNode(!0));\n        }, t.prototype.getRootLocation = function () {\n          var t, r;\n          return r = null != (t = this.getSetting(\"root\")) ? t : \"/\", new e.Location(r);\n        }, t.prototype.getCacheControlValue = function () {\n          return this.getSetting(\"cache-control\");\n        }, t.prototype.getElementForAnchor = function (t) {\n          try {\n            return this.bodyElement.querySelector(\"[id='\" + t + \"'], a[name='\" + t + \"']\");\n          } catch (e) {}\n        }, t.prototype.getPermanentElements = function () {\n          return this.bodyElement.querySelectorAll(\"[id][data-turbolinks-permanent]\");\n        }, t.prototype.getPermanentElementById = function (t) {\n          return this.bodyElement.querySelector(\"#\" + t + \"[data-turbolinks-permanent]\");\n        }, t.prototype.getPermanentElementsPresentInSnapshot = function (t) {\n          var e, r, n, o, i;\n          for (o = this.getPermanentElements(), i = [], r = 0, n = o.length; n > r; r++) e = o[r], t.getPermanentElementById(e.id) && i.push(e);\n          return i;\n        }, t.prototype.findFirstAutofocusableElement = function () {\n          return this.bodyElement.querySelector(\"[autofocus]\");\n        }, t.prototype.hasAnchor = function (t) {\n          return null != this.getElementForAnchor(t);\n        }, t.prototype.isPreviewable = function () {\n          return \"no-preview\" !== this.getCacheControlValue();\n        }, t.prototype.isCacheable = function () {\n          return \"no-cache\" !== this.getCacheControlValue();\n        }, t.prototype.isVisitable = function () {\n          return \"reload\" !== this.getSetting(\"visit-control\");\n        }, t.prototype.getSetting = function (t) {\n          return this.headDetails.getMetaValue(\"turbolinks-\" + t);\n        }, t;\n      }();\n    }.call(this), function () {\n      var t = [].slice;\n      e.Renderer = function () {\n        function e() {}\n        var r;\n        return e.render = function () {\n          var e, r, n, o;\n          return n = arguments[0], r = arguments[1], e = 3 <= arguments.length ? t.call(arguments, 2) : [], o = function (t, e, r) {\n            r.prototype = t.prototype;\n            var n = new r(),\n              o = t.apply(n, e);\n            return Object(o) === o ? o : n;\n          }(this, e, function () {}), o.delegate = n, o.render(r), o;\n        }, e.prototype.renderView = function (t) {\n          return this.delegate.viewWillRender(this.newBody), t(), this.delegate.viewRendered(this.newBody);\n        }, e.prototype.invalidateView = function () {\n          return this.delegate.viewInvalidated();\n        }, e.prototype.createScriptElement = function (t) {\n          var e;\n          return \"false\" === t.getAttribute(\"data-turbolinks-eval\") ? t : (e = document.createElement(\"script\"), e.textContent = t.textContent, e.async = !1, r(e, t), e);\n        }, r = function (t, e) {\n          var r, n, o, i, s, a, u;\n          for (i = e.attributes, a = [], r = 0, n = i.length; n > r; r++) s = i[r], o = s.name, u = s.value, a.push(t.setAttribute(o, u));\n          return a;\n        }, e;\n      }();\n    }.call(this), function () {\n      var t,\n        r,\n        n = function (t, e) {\n          function r() {\n            this.constructor = t;\n          }\n          for (var n in e) o.call(e, n) && (t[n] = e[n]);\n          return r.prototype = e.prototype, t.prototype = new r(), t.__super__ = e.prototype, t;\n        },\n        o = {}.hasOwnProperty;\n      e.SnapshotRenderer = function (e) {\n        function o(t, e, r) {\n          this.currentSnapshot = t, this.newSnapshot = e, this.isPreview = r, this.currentHeadDetails = this.currentSnapshot.headDetails, this.newHeadDetails = this.newSnapshot.headDetails, this.currentBody = this.currentSnapshot.bodyElement, this.newBody = this.newSnapshot.bodyElement;\n        }\n        return n(o, e), o.prototype.render = function (t) {\n          return this.shouldRender() ? (this.mergeHead(), this.renderView(function (e) {\n            return function () {\n              return e.replaceBody(), e.isPreview || e.focusFirstAutofocusableElement(), t();\n            };\n          }(this))) : this.invalidateView();\n        }, o.prototype.mergeHead = function () {\n          return this.copyNewHeadStylesheetElements(), this.copyNewHeadScriptElements(), this.removeCurrentHeadProvisionalElements(), this.copyNewHeadProvisionalElements();\n        }, o.prototype.replaceBody = function () {\n          var t;\n          return t = this.relocateCurrentBodyPermanentElements(), this.activateNewBodyScriptElements(), this.assignNewBody(), this.replacePlaceholderElementsWithClonedPermanentElements(t);\n        }, o.prototype.shouldRender = function () {\n          return this.newSnapshot.isVisitable() && this.trackedElementsAreIdentical();\n        }, o.prototype.trackedElementsAreIdentical = function () {\n          return this.currentHeadDetails.getTrackedElementSignature() === this.newHeadDetails.getTrackedElementSignature();\n        }, o.prototype.copyNewHeadStylesheetElements = function () {\n          var t, e, r, n, o;\n          for (n = this.getNewHeadStylesheetElements(), o = [], e = 0, r = n.length; r > e; e++) t = n[e], o.push(document.head.appendChild(t));\n          return o;\n        }, o.prototype.copyNewHeadScriptElements = function () {\n          var t, e, r, n, o;\n          for (n = this.getNewHeadScriptElements(), o = [], e = 0, r = n.length; r > e; e++) t = n[e], o.push(document.head.appendChild(this.createScriptElement(t)));\n          return o;\n        }, o.prototype.removeCurrentHeadProvisionalElements = function () {\n          var t, e, r, n, o;\n          for (n = this.getCurrentHeadProvisionalElements(), o = [], e = 0, r = n.length; r > e; e++) t = n[e], o.push(document.head.removeChild(t));\n          return o;\n        }, o.prototype.copyNewHeadProvisionalElements = function () {\n          var t, e, r, n, o;\n          for (n = this.getNewHeadProvisionalElements(), o = [], e = 0, r = n.length; r > e; e++) t = n[e], o.push(document.head.appendChild(t));\n          return o;\n        }, o.prototype.relocateCurrentBodyPermanentElements = function () {\n          var e, n, o, i, s, a, u;\n          for (a = this.getCurrentBodyPermanentElements(), u = [], e = 0, n = a.length; n > e; e++) i = a[e], s = t(i), o = this.newSnapshot.getPermanentElementById(i.id), r(i, s.element), r(o, i), u.push(s);\n          return u;\n        }, o.prototype.replacePlaceholderElementsWithClonedPermanentElements = function (t) {\n          var e, n, o, i, s, a, u;\n          for (u = [], o = 0, i = t.length; i > o; o++) a = t[o], n = a.element, s = a.permanentElement, e = s.cloneNode(!0), u.push(r(n, e));\n          return u;\n        }, o.prototype.activateNewBodyScriptElements = function () {\n          var t, e, n, o, i, s;\n          for (i = this.getNewBodyScriptElements(), s = [], e = 0, o = i.length; o > e; e++) n = i[e], t = this.createScriptElement(n), s.push(r(n, t));\n          return s;\n        }, o.prototype.assignNewBody = function () {\n          return document.body = this.newBody;\n        }, o.prototype.focusFirstAutofocusableElement = function () {\n          var t;\n          return null != (t = this.newSnapshot.findFirstAutofocusableElement()) ? t.focus() : void 0;\n        }, o.prototype.getNewHeadStylesheetElements = function () {\n          return this.newHeadDetails.getStylesheetElementsNotInDetails(this.currentHeadDetails);\n        }, o.prototype.getNewHeadScriptElements = function () {\n          return this.newHeadDetails.getScriptElementsNotInDetails(this.currentHeadDetails);\n        }, o.prototype.getCurrentHeadProvisionalElements = function () {\n          return this.currentHeadDetails.getProvisionalElements();\n        }, o.prototype.getNewHeadProvisionalElements = function () {\n          return this.newHeadDetails.getProvisionalElements();\n        }, o.prototype.getCurrentBodyPermanentElements = function () {\n          return this.currentSnapshot.getPermanentElementsPresentInSnapshot(this.newSnapshot);\n        }, o.prototype.getNewBodyScriptElements = function () {\n          return this.newBody.querySelectorAll(\"script\");\n        }, o;\n      }(e.Renderer), t = function (t) {\n        var e;\n        return e = document.createElement(\"meta\"), e.setAttribute(\"name\", \"turbolinks-permanent-placeholder\"), e.setAttribute(\"content\", t.id), {\n          element: e,\n          permanentElement: t\n        };\n      }, r = function (t, e) {\n        var r;\n        return (r = t.parentNode) ? r.replaceChild(e, t) : void 0;\n      };\n    }.call(this), function () {\n      var t = function (t, e) {\n          function n() {\n            this.constructor = t;\n          }\n          for (var o in e) r.call(e, o) && (t[o] = e[o]);\n          return n.prototype = e.prototype, t.prototype = new n(), t.__super__ = e.prototype, t;\n        },\n        r = {}.hasOwnProperty;\n      e.ErrorRenderer = function (e) {\n        function r(t) {\n          var e;\n          e = document.createElement(\"html\"), e.innerHTML = t, this.newHead = e.querySelector(\"head\"), this.newBody = e.querySelector(\"body\");\n        }\n        return t(r, e), r.prototype.render = function (t) {\n          return this.renderView(function (e) {\n            return function () {\n              return e.replaceHeadAndBody(), e.activateBodyScriptElements(), t();\n            };\n          }(this));\n        }, r.prototype.replaceHeadAndBody = function () {\n          var t, e;\n          return e = document.head, t = document.body, e.parentNode.replaceChild(this.newHead, e), t.parentNode.replaceChild(this.newBody, t);\n        }, r.prototype.activateBodyScriptElements = function () {\n          var t, e, r, n, o, i;\n          for (n = this.getScriptElements(), i = [], e = 0, r = n.length; r > e; e++) o = n[e], t = this.createScriptElement(o), i.push(o.parentNode.replaceChild(t, o));\n          return i;\n        }, r.prototype.getScriptElements = function () {\n          return document.documentElement.querySelectorAll(\"script\");\n        }, r;\n      }(e.Renderer);\n    }.call(this), function () {\n      e.View = function () {\n        function t(t) {\n          this.delegate = t, this.htmlElement = document.documentElement;\n        }\n        return t.prototype.getRootLocation = function () {\n          return this.getSnapshot().getRootLocation();\n        }, t.prototype.getElementForAnchor = function (t) {\n          return this.getSnapshot().getElementForAnchor(t);\n        }, t.prototype.getSnapshot = function () {\n          return e.Snapshot.fromHTMLElement(this.htmlElement);\n        }, t.prototype.render = function (t, e) {\n          var r, n, o;\n          return o = t.snapshot, r = t.error, n = t.isPreview, this.markAsPreview(n), null != o ? this.renderSnapshot(o, n, e) : this.renderError(r, e);\n        }, t.prototype.markAsPreview = function (t) {\n          return t ? this.htmlElement.setAttribute(\"data-turbolinks-preview\", \"\") : this.htmlElement.removeAttribute(\"data-turbolinks-preview\");\n        }, t.prototype.renderSnapshot = function (t, r, n) {\n          return e.SnapshotRenderer.render(this.delegate, n, this.getSnapshot(), e.Snapshot.wrap(t), r);\n        }, t.prototype.renderError = function (t, r) {\n          return e.ErrorRenderer.render(this.delegate, r, t);\n        }, t;\n      }();\n    }.call(this), function () {\n      var t = function (t, e) {\n        return function () {\n          return t.apply(e, arguments);\n        };\n      };\n      e.ScrollManager = function () {\n        function r(r) {\n          this.delegate = r, this.onScroll = t(this.onScroll, this), this.onScroll = e.throttle(this.onScroll);\n        }\n        return r.prototype.start = function () {\n          return this.started ? void 0 : (addEventListener(\"scroll\", this.onScroll, !1), this.onScroll(), this.started = !0);\n        }, r.prototype.stop = function () {\n          return this.started ? (removeEventListener(\"scroll\", this.onScroll, !1), this.started = !1) : void 0;\n        }, r.prototype.scrollToElement = function (t) {\n          return t.scrollIntoView();\n        }, r.prototype.scrollToPosition = function (t) {\n          var e, r;\n          return e = t.x, r = t.y, window.scrollTo(e, r);\n        }, r.prototype.onScroll = function (t) {\n          return this.updatePosition({\n            x: window.pageXOffset,\n            y: window.pageYOffset\n          });\n        }, r.prototype.updatePosition = function (t) {\n          var e;\n          return this.position = t, null != (e = this.delegate) ? e.scrollPositionChanged(this.position) : void 0;\n        }, r;\n      }();\n    }.call(this), function () {\n      e.SnapshotCache = function () {\n        function t(t) {\n          this.size = t, this.keys = [], this.snapshots = {};\n        }\n        var r;\n        return t.prototype.has = function (t) {\n          var e;\n          return e = r(t), e in this.snapshots;\n        }, t.prototype.get = function (t) {\n          var e;\n          if (this.has(t)) return e = this.read(t), this.touch(t), e;\n        }, t.prototype.put = function (t, e) {\n          return this.write(t, e), this.touch(t), e;\n        }, t.prototype.read = function (t) {\n          var e;\n          return e = r(t), this.snapshots[e];\n        }, t.prototype.write = function (t, e) {\n          var n;\n          return n = r(t), this.snapshots[n] = e;\n        }, t.prototype.touch = function (t) {\n          var e, n;\n          return n = r(t), e = this.keys.indexOf(n), e > -1 && this.keys.splice(e, 1), this.keys.unshift(n), this.trim();\n        }, t.prototype.trim = function () {\n          var t, e, r, n, o;\n          for (n = this.keys.splice(this.size), o = [], t = 0, r = n.length; r > t; t++) e = n[t], o.push(delete this.snapshots[e]);\n          return o;\n        }, r = function (t) {\n          return e.Location.wrap(t).toCacheKey();\n        }, t;\n      }();\n    }.call(this), function () {\n      var t = function (t, e) {\n        return function () {\n          return t.apply(e, arguments);\n        };\n      };\n      e.Visit = function () {\n        function r(r, n, o) {\n          this.controller = r, this.action = o, this.performScroll = t(this.performScroll, this), this.identifier = e.uuid(), this.location = e.Location.wrap(n), this.adapter = this.controller.adapter, this.state = \"initialized\", this.timingMetrics = {};\n        }\n        var n;\n        return r.prototype.start = function () {\n          return \"initialized\" === this.state ? (this.recordTimingMetric(\"visitStart\"), this.state = \"started\", this.adapter.visitStarted(this)) : void 0;\n        }, r.prototype.cancel = function () {\n          var t;\n          return \"started\" === this.state ? (null != (t = this.request) && t.cancel(), this.cancelRender(), this.state = \"canceled\") : void 0;\n        }, r.prototype.complete = function () {\n          var t;\n          return \"started\" === this.state ? (this.recordTimingMetric(\"visitEnd\"), this.state = \"completed\", \"function\" == typeof (t = this.adapter).visitCompleted && t.visitCompleted(this), this.controller.visitCompleted(this)) : void 0;\n        }, r.prototype.fail = function () {\n          var t;\n          return \"started\" === this.state ? (this.state = \"failed\", \"function\" == typeof (t = this.adapter).visitFailed ? t.visitFailed(this) : void 0) : void 0;\n        }, r.prototype.changeHistory = function () {\n          var t, e;\n          return this.historyChanged ? void 0 : (t = this.location.isEqualTo(this.referrer) ? \"replace\" : this.action, e = n(t), this.controller[e](this.location, this.restorationIdentifier), this.historyChanged = !0);\n        }, r.prototype.issueRequest = function () {\n          return this.shouldIssueRequest() && null == this.request ? (this.progress = 0, this.request = new e.HttpRequest(this, this.location, this.referrer), this.request.send()) : void 0;\n        }, r.prototype.getCachedSnapshot = function () {\n          var t;\n          return !(t = this.controller.getCachedSnapshotForLocation(this.location)) || null != this.location.anchor && !t.hasAnchor(this.location.anchor) || \"restore\" !== this.action && !t.isPreviewable() ? void 0 : t;\n        }, r.prototype.hasCachedSnapshot = function () {\n          return null != this.getCachedSnapshot();\n        }, r.prototype.loadCachedSnapshot = function () {\n          var t, e;\n          return (e = this.getCachedSnapshot()) ? (t = this.shouldIssueRequest(), this.render(function () {\n            var r;\n            return this.cacheSnapshot(), this.controller.render({\n              snapshot: e,\n              isPreview: t\n            }, this.performScroll), \"function\" == typeof (r = this.adapter).visitRendered && r.visitRendered(this), t ? void 0 : this.complete();\n          })) : void 0;\n        }, r.prototype.loadResponse = function () {\n          return null != this.response ? this.render(function () {\n            var t, e;\n            return this.cacheSnapshot(), this.request.failed ? (this.controller.render({\n              error: this.response\n            }, this.performScroll), \"function\" == typeof (t = this.adapter).visitRendered && t.visitRendered(this), this.fail()) : (this.controller.render({\n              snapshot: this.response\n            }, this.performScroll), \"function\" == typeof (e = this.adapter).visitRendered && e.visitRendered(this), this.complete());\n          }) : void 0;\n        }, r.prototype.followRedirect = function () {\n          return this.redirectedToLocation && !this.followedRedirect ? (this.location = this.redirectedToLocation, this.controller.replaceHistoryWithLocationAndRestorationIdentifier(this.redirectedToLocation, this.restorationIdentifier), this.followedRedirect = !0) : void 0;\n        }, r.prototype.requestStarted = function () {\n          var t;\n          return this.recordTimingMetric(\"requestStart\"), \"function\" == typeof (t = this.adapter).visitRequestStarted ? t.visitRequestStarted(this) : void 0;\n        }, r.prototype.requestProgressed = function (t) {\n          var e;\n          return this.progress = t, \"function\" == typeof (e = this.adapter).visitRequestProgressed ? e.visitRequestProgressed(this) : void 0;\n        }, r.prototype.requestCompletedWithResponse = function (t, r) {\n          return this.response = t, null != r && (this.redirectedToLocation = e.Location.wrap(r)), this.adapter.visitRequestCompleted(this);\n        }, r.prototype.requestFailedWithStatusCode = function (t, e) {\n          return this.response = e, this.adapter.visitRequestFailedWithStatusCode(this, t);\n        }, r.prototype.requestFinished = function () {\n          var t;\n          return this.recordTimingMetric(\"requestEnd\"), \"function\" == typeof (t = this.adapter).visitRequestFinished ? t.visitRequestFinished(this) : void 0;\n        }, r.prototype.performScroll = function () {\n          return this.scrolled ? void 0 : (\"restore\" === this.action ? this.scrollToRestoredPosition() || this.scrollToTop() : this.scrollToAnchor() || this.scrollToTop(), this.scrolled = !0);\n        }, r.prototype.scrollToRestoredPosition = function () {\n          var t, e;\n          return t = null != (e = this.restorationData) ? e.scrollPosition : void 0, null != t ? (this.controller.scrollToPosition(t), !0) : void 0;\n        }, r.prototype.scrollToAnchor = function () {\n          return null != this.location.anchor ? (this.controller.scrollToAnchor(this.location.anchor), !0) : void 0;\n        }, r.prototype.scrollToTop = function () {\n          return this.controller.scrollToPosition({\n            x: 0,\n            y: 0\n          });\n        }, r.prototype.recordTimingMetric = function (t) {\n          var e;\n          return null != (e = this.timingMetrics)[t] ? e[t] : e[t] = new Date().getTime();\n        }, r.prototype.getTimingMetrics = function () {\n          return e.copyObject(this.timingMetrics);\n        }, n = function (t) {\n          switch (t) {\n            case \"replace\":\n              return \"replaceHistoryWithLocationAndRestorationIdentifier\";\n            case \"advance\":\n            case \"restore\":\n              return \"pushHistoryWithLocationAndRestorationIdentifier\";\n          }\n        }, r.prototype.shouldIssueRequest = function () {\n          return \"restore\" === this.action ? !this.hasCachedSnapshot() : !0;\n        }, r.prototype.cacheSnapshot = function () {\n          return this.snapshotCached ? void 0 : (this.controller.cacheSnapshot(), this.snapshotCached = !0);\n        }, r.prototype.render = function (t) {\n          return this.cancelRender(), this.frame = requestAnimationFrame(function (e) {\n            return function () {\n              return e.frame = null, t.call(e);\n            };\n          }(this));\n        }, r.prototype.cancelRender = function () {\n          return this.frame ? cancelAnimationFrame(this.frame) : void 0;\n        }, r;\n      }();\n    }.call(this), function () {\n      var t = function (t, e) {\n        return function () {\n          return t.apply(e, arguments);\n        };\n      };\n      e.Controller = function () {\n        function r() {\n          this.clickBubbled = t(this.clickBubbled, this), this.clickCaptured = t(this.clickCaptured, this), this.pageLoaded = t(this.pageLoaded, this), this.history = new e.History(this), this.view = new e.View(this), this.scrollManager = new e.ScrollManager(this), this.restorationData = {}, this.clearCache(), this.setProgressBarDelay(500);\n        }\n        return r.prototype.start = function () {\n          return e.supported && !this.started ? (addEventListener(\"click\", this.clickCaptured, !0), addEventListener(\"DOMContentLoaded\", this.pageLoaded, !1), this.scrollManager.start(), this.startHistory(), this.started = !0, this.enabled = !0) : void 0;\n        }, r.prototype.disable = function () {\n          return this.enabled = !1;\n        }, r.prototype.stop = function () {\n          return this.started ? (removeEventListener(\"click\", this.clickCaptured, !0), removeEventListener(\"DOMContentLoaded\", this.pageLoaded, !1), this.scrollManager.stop(), this.stopHistory(), this.started = !1) : void 0;\n        }, r.prototype.clearCache = function () {\n          return this.cache = new e.SnapshotCache(10);\n        }, r.prototype.visit = function (t, r) {\n          var n, o;\n          return null == r && (r = {}), t = e.Location.wrap(t), this.applicationAllowsVisitingLocation(t) ? this.locationIsVisitable(t) ? (n = null != (o = r.action) ? o : \"advance\", this.adapter.visitProposedToLocationWithAction(t, n)) : window.location = t : void 0;\n        }, r.prototype.startVisitToLocationWithAction = function (t, r, n) {\n          var o;\n          return e.supported ? (o = this.getRestorationDataForIdentifier(n), this.startVisit(t, r, {\n            restorationData: o\n          })) : window.location = t;\n        }, r.prototype.setProgressBarDelay = function (t) {\n          return this.progressBarDelay = t;\n        }, r.prototype.startHistory = function () {\n          return this.location = e.Location.wrap(window.location), this.restorationIdentifier = e.uuid(), this.history.start(), this.history.replace(this.location, this.restorationIdentifier);\n        }, r.prototype.stopHistory = function () {\n          return this.history.stop();\n        }, r.prototype.pushHistoryWithLocationAndRestorationIdentifier = function (t, r) {\n          return this.restorationIdentifier = r, this.location = e.Location.wrap(t), this.history.push(this.location, this.restorationIdentifier);\n        }, r.prototype.replaceHistoryWithLocationAndRestorationIdentifier = function (t, r) {\n          return this.restorationIdentifier = r, this.location = e.Location.wrap(t), this.history.replace(this.location, this.restorationIdentifier);\n        }, r.prototype.historyPoppedToLocationWithRestorationIdentifier = function (t, r) {\n          var n;\n          return this.restorationIdentifier = r, this.enabled ? (n = this.getRestorationDataForIdentifier(this.restorationIdentifier), this.startVisit(t, \"restore\", {\n            restorationIdentifier: this.restorationIdentifier,\n            restorationData: n,\n            historyChanged: !0\n          }), this.location = e.Location.wrap(t)) : this.adapter.pageInvalidated();\n        }, r.prototype.getCachedSnapshotForLocation = function (t) {\n          var e;\n          return null != (e = this.cache.get(t)) ? e.clone() : void 0;\n        }, r.prototype.shouldCacheSnapshot = function () {\n          return this.view.getSnapshot().isCacheable();\n        }, r.prototype.cacheSnapshot = function () {\n          var t, r;\n          return this.shouldCacheSnapshot() ? (this.notifyApplicationBeforeCachingSnapshot(), r = this.view.getSnapshot(), t = this.lastRenderedLocation, e.defer(function (e) {\n            return function () {\n              return e.cache.put(t, r.clone());\n            };\n          }(this))) : void 0;\n        }, r.prototype.scrollToAnchor = function (t) {\n          var e;\n          return (e = this.view.getElementForAnchor(t)) ? this.scrollToElement(e) : this.scrollToPosition({\n            x: 0,\n            y: 0\n          });\n        }, r.prototype.scrollToElement = function (t) {\n          return this.scrollManager.scrollToElement(t);\n        }, r.prototype.scrollToPosition = function (t) {\n          return this.scrollManager.scrollToPosition(t);\n        }, r.prototype.scrollPositionChanged = function (t) {\n          var e;\n          return e = this.getCurrentRestorationData(), e.scrollPosition = t;\n        }, r.prototype.render = function (t, e) {\n          return this.view.render(t, e);\n        }, r.prototype.viewInvalidated = function () {\n          return this.adapter.pageInvalidated();\n        }, r.prototype.viewWillRender = function (t) {\n          return this.notifyApplicationBeforeRender(t);\n        }, r.prototype.viewRendered = function () {\n          return this.lastRenderedLocation = this.currentVisit.location, this.notifyApplicationAfterRender();\n        }, r.prototype.pageLoaded = function () {\n          return this.lastRenderedLocation = this.location, this.notifyApplicationAfterPageLoad();\n        }, r.prototype.clickCaptured = function () {\n          return removeEventListener(\"click\", this.clickBubbled, !1), addEventListener(\"click\", this.clickBubbled, !1);\n        }, r.prototype.clickBubbled = function (t) {\n          var e, r, n;\n          return this.enabled && this.clickEventIsSignificant(t) && (r = this.getVisitableLinkForNode(t.target)) && (n = this.getVisitableLocationForLink(r)) && this.applicationAllowsFollowingLinkToLocation(r, n) ? (t.preventDefault(), e = this.getActionForLink(r), this.visit(n, {\n            action: e\n          })) : void 0;\n        }, r.prototype.applicationAllowsFollowingLinkToLocation = function (t, e) {\n          var r;\n          return r = this.notifyApplicationAfterClickingLinkToLocation(t, e), !r.defaultPrevented;\n        }, r.prototype.applicationAllowsVisitingLocation = function (t) {\n          var e;\n          return e = this.notifyApplicationBeforeVisitingLocation(t), !e.defaultPrevented;\n        }, r.prototype.notifyApplicationAfterClickingLinkToLocation = function (t, r) {\n          return e.dispatch(\"turbolinks:click\", {\n            target: t,\n            data: {\n              url: r.absoluteURL\n            },\n            cancelable: !0\n          });\n        }, r.prototype.notifyApplicationBeforeVisitingLocation = function (t) {\n          return e.dispatch(\"turbolinks:before-visit\", {\n            data: {\n              url: t.absoluteURL\n            },\n            cancelable: !0\n          });\n        }, r.prototype.notifyApplicationAfterVisitingLocation = function (t) {\n          return e.dispatch(\"turbolinks:visit\", {\n            data: {\n              url: t.absoluteURL\n            }\n          });\n        }, r.prototype.notifyApplicationBeforeCachingSnapshot = function () {\n          return e.dispatch(\"turbolinks:before-cache\");\n        }, r.prototype.notifyApplicationBeforeRender = function (t) {\n          return e.dispatch(\"turbolinks:before-render\", {\n            data: {\n              newBody: t\n            }\n          });\n        }, r.prototype.notifyApplicationAfterRender = function () {\n          return e.dispatch(\"turbolinks:render\");\n        }, r.prototype.notifyApplicationAfterPageLoad = function (t) {\n          return null == t && (t = {}), e.dispatch(\"turbolinks:load\", {\n            data: {\n              url: this.location.absoluteURL,\n              timing: t\n            }\n          });\n        }, r.prototype.startVisit = function (t, e, r) {\n          var n;\n          return null != (n = this.currentVisit) && n.cancel(), this.currentVisit = this.createVisit(t, e, r), this.currentVisit.start(), this.notifyApplicationAfterVisitingLocation(t);\n        }, r.prototype.createVisit = function (t, r, n) {\n          var o, i, s, a, u;\n          return i = null != n ? n : {}, a = i.restorationIdentifier, s = i.restorationData, o = i.historyChanged, u = new e.Visit(this, t, r), u.restorationIdentifier = null != a ? a : e.uuid(), u.restorationData = e.copyObject(s), u.historyChanged = o, u.referrer = this.location, u;\n        }, r.prototype.visitCompleted = function (t) {\n          return this.notifyApplicationAfterPageLoad(t.getTimingMetrics());\n        }, r.prototype.clickEventIsSignificant = function (t) {\n          return !(t.defaultPrevented || t.target.isContentEditable || t.which > 1 || t.altKey || t.ctrlKey || t.metaKey || t.shiftKey);\n        }, r.prototype.getVisitableLinkForNode = function (t) {\n          return this.nodeIsVisitable(t) ? e.closest(t, \"a[href]:not([target]):not([download])\") : void 0;\n        }, r.prototype.getVisitableLocationForLink = function (t) {\n          var r;\n          return r = new e.Location(t.getAttribute(\"href\")), this.locationIsVisitable(r) ? r : void 0;\n        }, r.prototype.getActionForLink = function (t) {\n          var e;\n          return null != (e = t.getAttribute(\"data-turbolinks-action\")) ? e : \"advance\";\n        }, r.prototype.nodeIsVisitable = function (t) {\n          var r;\n          return (r = e.closest(t, \"[data-turbolinks]\")) ? \"false\" !== r.getAttribute(\"data-turbolinks\") : !0;\n        }, r.prototype.locationIsVisitable = function (t) {\n          return t.isPrefixedBy(this.view.getRootLocation()) && t.isHTML();\n        }, r.prototype.getCurrentRestorationData = function () {\n          return this.getRestorationDataForIdentifier(this.restorationIdentifier);\n        }, r.prototype.getRestorationDataForIdentifier = function (t) {\n          var e;\n          return null != (e = this.restorationData)[t] ? e[t] : e[t] = {};\n        }, r;\n      }();\n    }.call(this), function () {\n      !function () {\n        var t, e;\n        if ((t = e = document.currentScript) && !e.hasAttribute(\"data-turbolinks-suppress-warning\")) for (; t = t.parentNode;) if (t === document.body) return console.warn(\"You are loading Turbolinks from a <script> element inside the <body> element. This is probably not what you meant to do!\\n\\nLoad your application\\u2019s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.\\n\\nFor more information, see: https://github.com/turbolinks/turbolinks#working-with-script-elements\\n\\n\\u2014\\u2014\\nSuppress this warning by adding a `data-turbolinks-suppress-warning` attribute to: %s\", e.outerHTML);\n      }();\n    }.call(this), function () {\n      var t, r, n;\n      e.start = function () {\n        return r() ? (null == e.controller && (e.controller = t()), e.controller.start()) : void 0;\n      }, r = function () {\n        return null == window.Turbolinks && (window.Turbolinks = e), n();\n      }, t = function () {\n        var t;\n        return t = new e.Controller(), t.adapter = new e.BrowserAdapter(t), t;\n      }, n = function () {\n        return window.Turbolinks === e;\n      }, n() && e.start();\n    }.call(this);\n  }).call(this), \"object\" == typeof module && module.exports ? module.exports = e : \"function\" == typeof define && define.amd && define(e);\n}).call(this);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;AAAA;AAAA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AAmBA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqDA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;AAAA;AAAA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AAUA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AA1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8CA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AArHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAxIA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;ACdpstpsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpspmsourceRoot":""}